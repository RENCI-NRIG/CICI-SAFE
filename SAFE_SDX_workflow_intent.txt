---------------SAFE-SDX Workflow-----------------------------
Following are the steps (intend) to run the SDX demo.

[1] Launch a riak server with code and instructions in SAFE-Riak-Server directory.


[2] Create/configure an SDX slice.
  a) $cd SDX-Simple
  
  b) Edit configuration file for sdx slice "config/sdx.conf".
  
  c) Build the code.
     $./scripts/build.sh
  
  d) Create SDX slice.
     $./scritps/createslice.sh -c config/sdx.conf
  
  e) Run SDX server controller, configure the address and port number that sdx server will listen on ("config.serverurl").
     $./scripts/sdxserver.sh -c config/sdx.conf     
     
     
 [3] Create/configure Alice and Bob slices:
  a) $cd SDX-Client-ExoGENI
  
  b) Edit configuration files for Alice and Bob, "config/alice.conf" and "config/bob.conf".
  
  c) Rebuild.
     $./scripts/build.sh
     
  d) create Alice slice and Bob slice
     $./scripts/createslice.sh -c config/alice.conf
     $./scripts/createslice.sh -c config/bob.conf
     
     
 [4] Post SAFE identity sets, make SAFE statements to state the stitching and traffic policies, allocation of IP prefixes and stitching requests.
  a) $ cd safe-scripts 
  
  b) Change the SAFESERVER ip address to your safe server IP address in idset.sh, post.sh and updatess.sh, and run following scripts to make posts to safesets. Messages with a token in each message are expected.
    $./idset.sh
    $./post.sh
    $./updatess.sh 
  
  c) (Future work: reorganize into three shell scripts: alice-safe.ssh, bob-safe.ssh, sdx-safe.ssh.)


 [5] Configure the address of SDX server controller ("config.sdxserver") in configuration files and then run controller for alice, 
  a) $./scripts/sdxclient.sh -c config/alice.conf     
    
  b) Alice stitch CNode0 to sdx/c0, in Alice's controller, run:
     $>stitch alice sdx CNode0 c0
     
  c) Configure the route:
     Alice tells sdx controller its address space
     $>route 192.168.10.1/24 192.168.33.2 sdx c0
    
    
 [6] Run controller for Bob:
  a) $./scripts/sdxclient.sh -c config/bob.conf
 	 
  b) Bob stitch CNode0 to sdx/c3, in bob's controller run:
     $>stitch bob sdx CNode0 c3
     
  c) Configure the route:
     Bob tells sdx controller its address space:
     $>route 192.168.20.1/24 192.168.34.2 sdx c3
     
     
  [7] setup routing in client side
    An example command of adding an entry to the routing table is as follows, this only supports dest IP address with /32 netmask
    Another way to do this is using Quagga with zebra enabled, and add routing entries in zebra.conf, dest ip with any netmask is supported
    In the demo, to enable communication between CNode1 in alice and CNode1 in bob, the commands are:
    CNode1-alice$ ip route add 192.168.20.2/32 via 192.168.10.1
    CNode0-alice$ ip route add 192.168.20.2/32 via 192.168.33.1
    CNode1-bob$  ip route add 192.168.10.2/32 via 192.168.20.1
    CNode0-bob$ ip route add 192.168.10.2/32 via 192.168.34.1


  PS. If you want to delete a slice
    we can delete a slice with command: ./scripts/createslice.sh -c configFile -d
    For exmaple: ./scripts/createslice.sh -c config/alice.conf -d
    
