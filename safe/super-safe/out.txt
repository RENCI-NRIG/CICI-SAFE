[0m[[0minfo[0m] [0mLoading project definition from /home/yaoyj11/project/exo-geni/safe/super-safe/project[0m
[0m[[0minfo[0m] [0mSet current project to safe (in build file:/home/yaoyj11/project/exo-geni/safe/super-safe/)[0m
[0m[[0minfo[0m] [0mSet current project to safe-server (in build file:/home/yaoyj11/project/exo-geni/safe/super-safe/)[0m
[0m[[0minfo[0m] [0mRunning safe.server.BootService -f /home/yaoyj11/project/exo-geni/safe/super-safe/safe-apps/safe-network/exo-geni/stitch-routing.slang -r safeService -kd src/main/resources/key[0m
2017-06-152 13:51:30.626 [SafeSystem-akka.actor.default-dispatcher-3] [34mINFO [0;39m [36mSlf4jLogger[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1 applyOrElse}[0;39m - Slf4jLogger started
2017-06-152 13:51:30.644 [SafeSystem-akka.actor.default-dispatcher-3] [34mINFO [0;39m [36mActorSystemImpl[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - {
    # merge of String: 1,application.conf: 22-24,reference.conf: 7-77
    "akka" : {
        # merge of application.conf: 29,reference.conf: 10-226
        # Protobuf serializer for cluster DistributedPubSubMeditor messages
        # Protobuf serializer for cluster messages
        # Protobuf serialization for persistent messages
        "actor" : {
            # reference.conf: 74
            # Timeout for ActorSystem.actorOf
            "creation-timeout" : "20s",
            # merge of application.conf: 29,reference.conf: 418
            "debug" : {
                # application.conf: 31
                "autoreceive" : "on",
                # reference.conf: 434
                # enable DEBUG logging of subscription changes on the eventStream
                "event-stream" : "off",
                # reference.conf: 431
                # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
                "fsm" : "off",
                # application.conf: 32
                "lifecycle" : "on",
                # application.conf: 30
                "receive" : "on",
                # reference.conf: 440
                # enable WARN logging of misconfigured routers
                "router-misconfiguration" : "off",
                # reference.conf: 437
                # enable DEBUG logging of unhandled messages
                "unhandled" : "off"
            },
            # reference.conf: 238
            "default-dispatcher" : {
                # reference.conf: 334
                # For BalancingDispatcher: If the balancing dispatcher should attempt to
                # schedule idle actors using the same dispatcher when a message comes in,
                # and the dispatchers ExecutorService is not fully busy already.
                "attempt-teamwork" : "on",
                # reference.conf: 263
                # This will be used if you have set "executor = "default-executor"".
                # If an ActorSystem is created with a given ExecutionContext, this
                # ExecutionContext will be used as the default executor for all
                # dispatchers in the ActorSystem configured with
                # executor = "default-executor". Note that "default-executor"
                # is the default value for executor, and therefore used if not
                # specified otherwise. If no ExecutionContext is given,
                # the executor configured in "fallback" will be used.
                "default-executor" : {
                    # reference.conf: 264
                    "fallback" : "fork-join-executor"
                },
                # reference.conf: 253
                # Which kind of ExecutorService to use for this dispatcher
                # Valid options:
                #  - "default-executor" requires a "default-executor" section
                #  - "fork-join-executor" requires a "fork-join-executor" section
                #  - "thread-pool-executor" requires a "thread-pool-executor" section
                #  - A FQCN of a class extending ExecutorServiceConfigurator
                "executor" : "default-executor",
                # reference.conf: 268
                # This will be used if you have set "executor = "fork-join-executor""
                "fork-join-executor" : {
                    # reference.conf: 275
                    # The parallelism factor is used to determine thread pool size using the
                    # following formula: ceil(available processors * factor). Resulting size
                    # is then bounded by the parallelism-min and parallelism-max values.
                    "parallelism-factor" : 3,
                    # reference.conf: 278
                    # Max number of threads to cap factor-based parallelism number to
                    "parallelism-max" : 64,
                    # reference.conf: 270
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 8
                },
                # reference.conf: 339
                # If this dispatcher requires a specific type of mailbox, specify the
                # fully-qualified class name here; the actually created mailbox will
                # be a subtype of this type. The empty string signifies no requirement.
                "mailbox-requirement" : "",
                # reference.conf: 322
                # How long time the dispatcher will wait for new actors until it shuts down
                "shutdown-timeout" : "1s",
                # reference.conf: 282
                # This will be used if you have set "executor = "thread-pool-executor""
                "thread-pool-executor" : {
                    # reference.conf: 318
                    # Allow core threads to time out
                    "allow-core-timeout" : "on",
                    # reference.conf: 293
                    # The core pool size factor is used to determine thread pool core size
                    # using the following formula: ceil(available processors * factor).
                    # Resulting size is then bounded by the core-pool-size-min and
                    # core-pool-size-max values.
                    "core-pool-size-factor" : 3,
                    # reference.conf: 296
                    # Max number of threads to cap factor-based number to
                    "core-pool-size-max" : 64,
                    # reference.conf: 287
                    # Min number of threads to cap factor-based core number to
                    "core-pool-size-min" : 8,
                    # reference.conf: 284
                    # Keep alive time for threads
                    "keep-alive-time" : "60s",
                    # reference.conf: 304
                    # Max no of threads (if using a bounded task queue) is determined by
                    # calculating: ceil(available processors * factor)
                    "max-pool-size-factor" : 3,
                    # reference.conf: 308
                    # Max number of threads to cap factor-based max number to
                    # (if using a  bounded task queue)
                    "max-pool-size-max" : 64,
                    # reference.conf: 300
                    # Minimum number of threads to cap factor-based max number to
                    # (if using a bounded task queue)
                    "max-pool-size-min" : 8,
                    # reference.conf: 311
                    # Specifies the bounded capacity of the task queue (< 1 == unbounded)
                    "task-queue-size" : -1,
                    # reference.conf: 315
                    # Specifies which type of task queue will be used, can be "array" or
                    # "linked" (default)
                    "task-queue-type" : "linked"
                },
                # reference.conf: 326
                # Throughput defines the number of messages that are processed in a batch
                # before the thread is returned to the pool. Set to 1 for as fair as possible.
                "throughput" : 5,
                # reference.conf: 329
                # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
                "throughput-deadline-time" : "0ms",
                # reference.conf: 245
                # Must be one of the following
                # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
                # MessageDispatcherConfigurator with a public constructor with
                # both com.typesafe.config.Config parameter and
                # akka.dispatch.DispatcherPrerequisites parameters.
                # PinnedDispatcher must be used together with executor=thread-pool-executor.
                "type" : "Dispatcher"
            },
            # reference.conf: 342
            "default-mailbox" : {
                # reference.conf: 353
                # If the mailbox is bounded then it uses this setting to determine its
                # capacity. The provided value must be positive.
                # NOTICE:
                # Up to version 2.1 the mailbox type was determined based on this setting;
                # this is no longer the case, the type must explicitly be a bounded mailbox.
                "mailbox-capacity" : 1000,
                # reference.conf: 358
                # If the mailbox is bounded then this is the timeout for enqueueing
                # in case the mailbox is full. Negative values signify infinite
                # timeout, which should be avoided as it bears the risk of dead-lock.
                "mailbox-push-timeout-time" : "10s",
                # reference.conf: 346
                # FQCN of the MailboxType. The Class of the FQCN must have a public
                # constructor with
                # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
                "mailbox-type" : "akka.dispatch.UnboundedMailbox",
                # reference.conf: 364
                # For Actor with Stash: The default capacity of the stash.
                # If negative (or zero) then an unbounded stash is used (default)
                # If positive then a bounded stash is used and the capacity is set using
                # the property
                "stash-capacity" : -1
            },
            # reference.conf: 31-199
            "deployment" : {
                # reference.conf: 33-199
                # deployment id pattern - on the format: /parent/child etc.
                # Default configuration for routers
                "default" : {
                    # reference.conf: 199
                    "cluster" : {
                        # reference.conf: 215
                        # Defines if routees are allowed to be located on the same node as
                        # the head router actor, or only on remote nodes.
                        # Useful for master-worker scenario where all routees are remote.
                        "allow-local-routees" : "on",
                        # reference.conf: 201
                        # enable cluster aware router that deploys to nodes in the cluster
                        "enabled" : "off",
                        # reference.conf: 210
                        # Maximum number of routees that will be deployed on each cluster
                        # member node.
                        # Note that nr-of-instances defines total number of routees, but
                        # number of routees per node will not be exceeded, i.e. if you
                        # define nr-of-instances = 50 and max-nr-of-instances-per-node = 2
                        # it will deploy 2 routees per new member in the cluster, up to
                        # 25 members.
                        "max-nr-of-instances-per-node" : 1,
                        # reference.conf: 218
                        # Deprecated in 2.3, use routees.paths instead
                        "routees-path" : "",
                        # reference.conf: 221
                        # Use members with specified role, or all members if undefined or empty.
                        "use-role" : ""
                    },
                    # reference.conf: 127
                    # The id of the dispatcher to use for this actor.
                    # If undefined or empty the dispatcher specified in code
                    # (Props.withDispatcher) is used, or default-dispatcher if not
                    # specified at all.
                    "dispatcher" : "",
                    # reference.conf: 135
                    # The id of the mailbox to use for this actor.
                    # If undefined or empty the default mailbox of the configured dispatcher
                    # is used or if there is no mailbox configuration the mailbox specified
                    # in code (Props.withMailbox) is used.
                    # If there is a mailbox defined in the configured dispatcher then that
                    # overrides this setting.
                    "mailbox" : "",
                    # reference.conf: 197
                    # MetricsSelector to use
                    # - available: "mix", "heap", "cpu", "load"
                    # - or: Fully qualified class name of the MetricsSelector class.
                    #       The class must extend akka.cluster.routing.MetricsSelector
                    #       and have a public constructor with com.typesafe.config.Config
                    #       parameter.
                    # - default is "mix"
                    "metrics-selector" : "mix",
                    # reference.conf: 160
                    # number of children to create in case of a router;
                    # this setting is ignored if routees.paths is given
                    "nr-of-instances" : 1,
                    # reference.conf: 37
                    # if this is set to a valid remote address, the named actor will be
                    # deployed at that node e.g. "akka.tcp://sys@host:port"
                    "remote" : "",
                    # reference.conf: 191
                    # Routers with dynamically resizable number of routees; this feature is
                    # enabled by including (parts of) this section in the deployment
                    "resizer" : {
                        # reference.conf: 229
                        # Fraction of routees to be removed when the resizer reaches the
                        # backoffThreshold.
                        # For example, 0.1 would decrease 10% (rounded up), i.e. if current
                        # capacity is 9 it will request an decrease of 1 routee.
                        "backoff-rate" : 0.1,
                        # reference.conf: 223
                        # Minimum fraction of busy routees before backing off.
                        # For example, if this is 0.3, then we'll remove some routees only when
                        # less than 30% of routees are busy, i.e. if current capacity is 10 and
                        # 3 are busy then the capacity is unchanged, but if 2 or less are busy
                        # the capacity is decreased.
                        # Use 0.0 or negative to avoid removal of routees.
                        "backoff-threshold" : 0.3,
                        # reference.conf: 193
                        "enabled" : "off",
                        # reference.conf: 196
                        # The fewest number of routees the router should ever have.
                        "lower-bound" : 1,
                        # reference.conf: 233
                        # Number of messages between resize operation.
                        # Use 1 to resize before each message.
                        "messages-per-resize" : 10,
                        # reference.conf: 210
                        # Threshold used to evaluate if a routee is considered to be busy
                        # (under pressure). Implementation depends on this value (default is 1).
                        # 0:   number of routees currently processing a message.
                        # 1:   number of routees currently processing a message has
                        #      some messages in mailbox.
                        # > 1: number of routees with at least the configured pressure-threshold
                        #      messages in their mailbox. Note that estimating mailbox size of
                        #      default UnboundedMailbox is O(N) operation.
                        "pressure-threshold" : 1,
                        # reference.conf: 215
                        # Percentage to increase capacity whenever all routees are busy.
                        # For example, 0.2 would increase 20% (rounded up), i.e. if current
                        # capacity is 6 it will request an increase of 2 more routees.
                        "rampup-rate" : 0.2,
                        # reference.conf: 200
                        # The most number of routees the router should ever have.
                        # Must be greater than or equal to lower-bound.
                        "upper-bound" : 10
                    },
                    # reference.conf: 173
                    "routees" : {
                        # reference.conf: 177
                        # Alternatively to giving nr-of-instances you can specify the full
                        # paths of those actors which should be routed to. This setting takes
                        # precedence over nr-of-instances
                        "paths" : []
                    },
                    # reference.conf: 156
                    # routing (load-balance) scheme to use
                    # - available: "from-code", "round-robin", "random", "smallest-mailbox",
                    #              "scatter-gather", "broadcast"
                    # - or:        Fully qualified class name of the router class.
                    #              The class must extend akka.routing.CustomRouterConfig and
                    #              have a public constructor with com.typesafe.config.Config
                    #              and optional akka.actor.DynamicAccess parameter.
                    # - default is "from-code";
                    # Whether or not an actor is transformed to a Router is decided in code
                    # only (Props.withRouter). The type of router can be overridden in the
                    # configuration; specifying "from-code" means that the values specified
                    # in the code shall be used.
                    # In case of routing, the actors to be routed to can be specified
                    # in several ways:
                    # - nr-of-instances: will create that many children
                    # - routees.paths: will route messages to these paths using ActorSelection,
                    #   i.e. will not create children
                    # - resizer: dynamically resizable number of routees as specified in
                    #   resizer below
                    "router" : "from-code",
                    # reference.conf: 168
                    "tail-chopping-router" : {
                        # reference.conf: 170
                        # interval is duration between sending message to next routee
                        "interval" : "10 milliseconds"
                    },
                    # reference.conf: 39
                    "target" : {
                        # reference.conf: 51
                        # A list of hostnames and ports for instantiating the children of a
                        # router
                        #   The format should be on "akka.tcp://sys@host:port", where:
                        #    - sys is the remote actor system name
                        #    - hostname can be either hostname or IP address the remote actor
                        #      should connect to
                        #    - port should be the port for the remote server on the other node
                        # The number of actor instances to be spawned is still taken from the
                        # nr-of-instances setting as for local routers; the instances will be
                        # distributed round-robin among the given nodes.
                        "nodes" : []
                    },
                    # reference.conf: 166
                    # number of virtual nodes per node for consistent-hashing router
                    "virtual-nodes-factor" : 10,
                    # reference.conf: 163
                    # within is the timeout used for routers containing future calls
                    "within" : "5 seconds"
                }
            },
            # reference.conf: 462
            # Configuration items which are used by the akka.actor.ActorDSL._ methods
            "dsl" : {
                # reference.conf: 468
                # Default timeout to assume for operations like Inbox.receive et al
                "default-timeout" : "5s",
                # reference.conf: 465
                # Maximum queue size of the actor created by newInbox(); this protects
                # against faulty programs which use select() and consistently miss messages
                "inbox-size" : 1000
            },
            # reference.conf: 71
            # The guardian "/user" will use this class to obtain its supervisorStrategy.
            # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
            # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
            "guardian-supervisor-strategy" : "akka.actor.DefaultSupervisorStrategy",
            # reference.conf: 367
            "mailbox" : {
                # reference.conf: 410
                "bounded-deque-based" : {
                    # reference.conf: 414
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedDequeBasedMailbox"
                },
                # reference.conf: 396
                "bounded-queue-based" : {
                    # reference.conf: 400
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedMailbox"
                },
                # reference.conf: 374
                # Mapping between message queue semantics and mailbox configurations.
                # Used by akka.dispatch.RequiresMessageQueue[T] to enforce different
                # mailbox types on actors.
                # If your Actor implements RequiresMessageQueue[T], then when you create
                # an instance of that actor its mailbox type will be decided by looking
                # up a mailbox configuration via T in this mapping
                "requirements" : {
                    # reference.conf: 384
                    "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.bounded-deque-based",
                    # reference.conf: 378
                    "akka.dispatch.BoundedMessageQueueSemantics" : "akka.actor.mailbox.bounded-queue-based",
                    # reference.conf: 380
                    "akka.dispatch.DequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf: 386
                    "akka.dispatch.MultipleConsumerSemantics" : "akka.actor.mailbox.unbounded-queue-based",
                    # reference.conf: 382
                    "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf: 376
                    "akka.dispatch.UnboundedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-queue-based"
                },
                # reference.conf: 403
                "unbounded-deque-based" : {
                    # reference.conf: 407
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedDequeBasedMailbox"
                },
                # reference.conf: 389
                "unbounded-queue-based" : {
                    # reference.conf: 393
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedMailbox"
                }
            },
            # reference.conf: 66
            # FQCN of the ActorRefProvider to be used; the below is the built-in default,
            # another one is akka.remote.RemoteActorRefProvider in the akka-remote bundle.
            "provider" : "akka.actor.LocalActorRefProvider",
            # reference.conf: 78
            # Frequency with which stopping actors are prodded in case they had to be
            # removed from their parents
            "reaper-interval" : "5s",
            # reference.conf: 100-235
            "router" : {
                # reference.conf: 100-235
                # Mapping between ´deployment.router' short names to fully qualified class names
                "type-mapping" : {
                    # reference.conf: 237
                    "adaptive-group" : "akka.cluster.routing.AdaptiveLoadBalancingGroup",
                    # reference.conf: 236
                    "adaptive-pool" : "akka.cluster.routing.AdaptiveLoadBalancingPool",
                    # reference.conf: 106
                    "balancing-pool" : "akka.routing.BalancingPool",
                    # reference.conf: 109
                    "broadcast-group" : "akka.routing.BroadcastGroup",
                    # reference.conf: 108
                    "broadcast-pool" : "akka.routing.BroadcastPool",
                    # reference.conf: 115
                    "consistent-hashing-group" : "akka.routing.ConsistentHashingGroup",
                    # reference.conf: 114
                    "consistent-hashing-pool" : "akka.routing.ConsistentHashingPool",
                    # reference.conf: 101
                    "from-code" : "akka.routing.NoRouter",
                    # reference.conf: 105
                    "random-group" : "akka.routing.RandomGroup",
                    # reference.conf: 104
                    "random-pool" : "akka.routing.RandomPool",
                    # reference.conf: 103
                    "round-robin-group" : "akka.routing.RoundRobinGroup",
                    # reference.conf: 102
                    "round-robin-pool" : "akka.routing.RoundRobinPool",
                    # reference.conf: 111
                    "scatter-gather-group" : "akka.routing.ScatterGatherFirstCompletedGroup",
                    # reference.conf: 110
                    "scatter-gather-pool" : "akka.routing.ScatterGatherFirstCompletedPool",
                    # reference.conf: 107
                    "smallest-mailbox-pool" : "akka.routing.SmallestMailboxPool",
                    # reference.conf: 113
                    "tail-chopping-group" : "akka.routing.TailChoppingGroup",
                    # reference.conf: 112
                    "tail-chopping-pool" : "akka.routing.TailChoppingPool"
                }
            },
            # reference.conf: 18-456
            # Class to Serializer binding. You only need to specify the name of an
            # interface or abstract base class of the messages. In case of ambiguity it
            # is using the most specific configured class, or giving a warning and
            # choosing the “first” one.
            # 
            # To disable one of the default serializers, assign its class to "none", like
            # "java.io.Serializable" = none
            "serialization-bindings" : {
                # reference.conf: 457
                "[B" : "bytes",
                # reference.conf: 26
                # Since com.google.protobuf.Message does not extend Serializable but
                # GeneratedMessage does, need to use the more specific one here in order
                # to avoid ambiguity
                "akka.actor.ActorSelectionMessage" : "akka-containers",
                # reference.conf: 232
                "akka.cluster.ClusterMessage" : "akka-cluster",
                # reference.conf: 41
                "akka.contrib.pattern.DistributedPubSubMessage" : "akka-pubsub",
                # reference.conf: 21
                "akka.persistence.serialization.Message" : "akka-persistence-message",
                # reference.conf: 20
                "akka.persistence.serialization.Snapshot" : "akka-persistence-snapshot",
                # reference.conf: 28
                "akka.remote.DaemonMsgCreate" : "daemon-create",
                # reference.conf: 27
                "com.google.protobuf.GeneratedMessage" : "proto",
                # reference.conf: 458
                "java.io.Serializable" : "java"
            },
            # reference.conf: 87
            # Serializes and deserializes creators (in Props) to ensure that they can be
            # sent over the network, this is only intended for testing. Purely local deployments
            # as marked with deploy.scope == LocalScope are exempt from verification.
            "serialize-creators" : "off",
            # reference.conf: 82
            # Serializes and deserializes (non-primitive) messages to ensure immutability,
            # this is only intended for testing.
            "serialize-messages" : "off",
            # reference.conf: 12-444
            # Entries for pluggable serializers and their bindings.
            "serializers" : {
                # reference.conf: 228
                "akka-cluster" : "akka.cluster.protobuf.ClusterMessageSerializer",
                # reference.conf: 16
                "akka-containers" : "akka.remote.serialization.MessageContainerSerializer",
                # reference.conf: 15
                "akka-persistence-message" : "akka.persistence.serialization.MessageSerializer",
                # reference.conf: 14
                "akka-persistence-snapshot" : "akka.persistence.serialization.SnapshotSerializer",
                # reference.conf: 38
                "akka-pubsub" : "akka.contrib.pattern.protobuf.DistributedPubSubMessageSerializer",
                # reference.conf: 446
                "bytes" : "akka.serialization.ByteArraySerializer",
                # reference.conf: 18
                "daemon-create" : "akka.remote.serialization.DaemonMsgCreateSerializer",
                # reference.conf: 445
                "java" : "akka.serialization.JavaSerializer",
                # reference.conf: 17
                "proto" : "akka.remote.serialization.ProtobufSerializer"
            },
            # reference.conf: 94
            "typed" : {
                # reference.conf: 96
                # Default timeout for typed actor methods with non-void return type
                "timeout" : "5s"
            },
            # reference.conf: 92
            # Timeout for send operations to top-level actors which are in the process
            # of being started. This is only relevant if using a bounded mailbox or the
            # CallingThreadDispatcher for a top-level actor.
            "unstarted-push-timeout" : "10s"
        },
        # reference.conf: 10
        "cluster" : {
            # reference.conf: 33
            # deprecated in 2.3, use 'auto-down-unreachable-after' instead
            "auto-down" : "off",
            # reference.conf: 30
            # Should the 'leader' in the cluster be allowed to automatically mark
            # unreachable nodes as DOWN after a configured time of unreachability?
            # Using auto-down implies that two separate clusters will automatically be
            # formed in case of network partition.
            # Disable with "off" or specify a duration to enable auto-down.
            "auto-down-unreachable-after" : "off",
            # reference.conf: 103
            # Settings for the Phi accrual failure detector (http://ddg.jaist.ac.jp/pub/HDY+04.pdf
            # [Hayashibara et al]) used by the cluster subsystem to detect unreachable
            # members.
            "failure-detector" : {
                # reference.conf: 136
                # Number of potentially lost/delayed heartbeats that will be
                # accepted before considering it to be an anomaly.
                # This margin is important to be able to survive sudden, occasional,
                # pauses in heartbeat arrivals, due to for example garbage collect or
                # network drop.
                "acceptable-heartbeat-pause" : "3 s",
                # reference.conf: 145
                # After the heartbeat request has been sent the first failure detection
                # will start after this period, even though no heartbeat mesage has
                # been received.
                "expected-response-after" : "5 s",
                # reference.conf: 112
                # How often keep-alive heartbeat messages should be sent to each connection.
                "heartbeat-interval" : "1 s",
                # reference.conf: 109
                # FQCN of the failure detector implementation.
                # It must implement akka.remote.FailureDetector and have
                # a public constructor with a com.typesafe.config.Config and
                # akka.actor.EventStream parameter.
                "implementation-class" : "akka.remote.PhiAccrualFailureDetector",
                # reference.conf: 123
                # Number of the samples of inter-heartbeat arrival times to adaptively
                # calculate the failure timeout for connections.
                "max-sample-size" : 1000,
                # reference.conf: 129
                # Minimum standard deviation to use for the normal distribution in
                # AccrualFailureDetector. Too low standard deviation might result in
                # too much sensitivity for sudden, but normal, deviations in heartbeat
                # inter arrival times.
                "min-std-deviation" : "100 ms",
                # reference.conf: 140
                # Number of member nodes that each member will send heartbeat messages to,
                # i.e. each node will be monitored by this number of other nodes.
                "monitored-by-nr-of-members" : 5,
                # reference.conf: 119
                # Defines the failure detector threshold.
                # A low threshold is prone to generate many wrong suspicions but ensures
                # a quick detection in the event of a real crash. Conversely, a high
                # threshold generates fewer mistakes but needs more time to detect
                # actual crashes.
                "threshold" : 8
            },
            # reference.conf: 94
            # Gossip to random node with newer or older state information, if any with
            # this probability. Otherwise Gossip to any random live node.
            # Probability value is between 0.0 and 1.0. 0.0 means never, 1.0 means always.
            "gossip-different-view-probability" : 0.8,
            # reference.conf: 69
            # how often should the node send out gossip information?
            "gossip-interval" : "1s",
            # reference.conf: 72
            # discard incoming gossip messages if not handled within this duration
            "gossip-time-to-live" : "2s",
            # reference.conf: 62
            "jmx" : {
                # reference.conf: 62
                # Enable or disable JMX MBeans for management of the cluster
                "enabled" : "on"
            },
            # reference.conf: 75
            # how often should the leader perform maintenance tasks?
            "leader-actions-interval" : "1s",
            # reference.conf: 59
            # Enable/disable info level logging of cluster events
            "log-info" : "on",
            # reference.conf: 149
            "metrics" : {
                # reference.conf: 162
                # How often metrics are sampled on a node.
                # Shorter interval will collect the metrics more often.
                "collect-interval" : "3s",
                # reference.conf: 158
                # FQCN of the metrics collector implementation.
                # It must implement akka.cluster.MetricsCollector and
                # have public constructor with akka.actor.ActorSystem parameter.
                # The default SigarMetricsCollector uses JMX and Hyperic SIGAR, if SIGAR
                # is on the classpath, otherwise only JMX.
                "collector-class" : "akka.cluster.SigarMetricsCollector",
                # reference.conf: 151
                # Enable or disable metrics collector for load-balancing nodes.
                "enabled" : "on",
                # reference.conf: 165
                # How often a node publishes metrics information.
                "gossip-interval" : "3s",
                # reference.conf: 174
                # How quickly the exponential weighting of past data is decayed compared to
                # new data. Set lower to increase the bias toward newer values.
                # The relevance of each data sample is halved for every passing half-life
                # duration, i.e. after 4 times the half-life, a data sample’s relevance is
                # reduced to 6% of its original relevance. The initial relevance of a data
                # sample is given by 1 – 0.5 ^ (collect-interval / half-life).
                # See http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
                "moving-average-half-life" : "12s"
            },
            # reference.conf: 56
            # Minimum required number of members before the leader changes member status
            # of 'Joining' members to 'Up'. Typically used together with
            # 'Cluster.registerOnMemberUp' to defer some action, such as starting actors,
            # until the cluster has reached a certain size.
            "min-nr-of-members" : 1,
            # reference.conf: 66
            # how long should the node wait before starting the periodic tasks
            # maintenance tasks?
            "periodic-tasks-initial-delay" : "1s",
            # reference.conf: 84
            # How often the current internal stats should be published.
            # A value of 0s can be used to always publish the stats, when it happens.
            # Disable with "off".
            "publish-stats-interval" : "off",
            # reference.conf: 98
            # Reduced the above probability when the number of nodes in the cluster
            # greater than this value.
            "reduce-gossip-different-view-probability" : 400,
            # reference.conf: 23
            # If a join request fails it will be retried after this period.
            # Disable join retry by specifying "off".
            "retry-unsuccessful-join-after" : "10s",
            # reference.conf: 41
            "role" : {},
            # reference.conf: 39
            # The roles of this member. List of strings, e.g. roles = ["A", "B"].
            # The roles are part of the membership information and can be used by
            # routers or other services to distribute work to certain member types,
            # e.g. front-end and back-end nodes.
            "roles" : [],
            # reference.conf: 181
            # If the tick-duration of the default scheduler is longer than the
            # tick-duration configured here a dedicated scheduler will be used for
            # periodic tasks of the cluster, otherwise the default scheduler is used.
            # See akka.scheduler settings for more details.
            "scheduler" : {
                # reference.conf: 182
                "tick-duration" : "33ms",
                # reference.conf: 183
                "ticks-per-wheel" : 512
            },
            # reference.conf: 19
            # how long to wait for one of the seed nodes to reply to initial join request
            "seed-node-timeout" : "5s",
            # reference.conf: 16
            # Initial contact points of the cluster.
            # The nodes to join automatically at startup.
            # Comma separated full URIs defined by a string on the form of
            # "akka.tcp://system@hostname:port"
            # Leave as empty if the node is supposed to be joined manually.
            "seed-nodes" : [],
            # reference.conf: 79
            # how often should the node move nodes, marked as unreachable by the failure
            # detector, out of the membership ring?
            "unreachable-nodes-reaper-interval" : "1s",
            # reference.conf: 89
            # The id of the dispatcher to use for cluster actors. If not specified
            # default dispatcher is used.
            # If specified you need to define the settings of the actual dispatcher.
            "use-dispatcher" : ""
        },
        # reference.conf: 10-77
        "contrib" : {
            # reference.conf: 10-77
            "cluster" : {
                # reference.conf: 66
                # //#cluster-client-mailbox-config
                "client" : {
                    # reference.conf: 67
                    "mailbox" : {
                        # reference.conf: 68
                        "mailbox-type" : "akka.dispatch.UnboundedDequeBasedMailbox",
                        # reference.conf: 69
                        "stash-capacity" : 1000
                    }
                },
                # reference.conf: 10
                # //#pub-sub-ext-config
                # Settings for the DistributedPubSubExtension
                "pub-sub" : {
                    # reference.conf: 23
                    # How often the DistributedPubSubMediator should send out gossip information
                    "gossip-interval" : "1s",
                    # reference.conf: 30
                    # Maximum number of elements to transfer in one message when synchronizing the registries.
                    # Next chunk will be transferred in next round of gossip.
                    "max-delta-elements" : 3000,
                    # reference.conf: 12
                    # Actor name of the mediator actor, /user/distributedPubSubMediator
                    "name" : "distributedPubSubMediator",
                    # reference.conf: 26
                    # Removed entries are pruned after this duration
                    "removed-time-to-live" : "120s",
                    # reference.conf: 16
                    # Start the mediator on members tagged with this role.
                    # All members are used if undefined or empty.
                    "role" : "",
                    # reference.conf: 20
                    # The routing logic to use for 'Send'
                    # Possible values: random, round-robin, broadcast
                    "routing-logic" : "random"
                },
                # reference.conf: 48
                # //#receptionist-ext-config
                # Settings for the ClusterReceptionistExtension
                "receptionist" : {
                    # reference.conf: 50
                    # Actor name of the ClusterReceptionist actor, /user/receptionist
                    "name" : "receptionist",
                    # reference.conf: 57
                    # The receptionist will send this number of contact points to the client
                    "number-of-contacts" : 3,
                    # reference.conf: 61
                    # The actor that tunnel response messages to the client will be stopped
                    # after this time of inactivity.
                    "response-tunnel-receive-timeout" : "30s",
                    # reference.conf: 54
                    # Start the receptionist on members tagged with this role.
                    # All members are used if undefined or empty.
                    "role" : ""
                },
                # reference.conf: 77
                # //#sharding-ext-config
                # Settings for the ClusterShardingExtension
                "sharding" : {
                    # reference.conf: 93
                    # Maximum number of messages that are buffered by a ShardRegion actor.
                    "buffer-size" : 100000,
                    # reference.conf: 83
                    # If the coordinator can't store state changes it will be stopped
                    # and started again after this duration.
                    "coordinator-failure-backoff" : "10 s",
                    # reference.conf: 80
                    # The extension creates a top level actor with this name in top level user scope,
                    # e.g. '/user/sharding'
                    "guardian-name" : "sharding",
                    # reference.conf: 95
                    # Timeout of the shard rebalancing process.
                    "handoff-timeout" : "60 s",
                    # reference.conf: 102
                    # Setting for the default shard allocation strategy
                    "least-shard-allocation-strategy" : {
                        # reference.conf: 107
                        # The number of ongoing rebalancing processes is limited to this number.
                        "max-simultaneous-rebalance" : 3,
                        # reference.conf: 105
                        # Threshold of how large the difference between most and least number of
                        # allocated shards must be to begin the rebalancing.
                        "rebalance-threshold" : 10
                    },
                    # reference.conf: 97
                    # Rebalance check is performed periodically with this interval.
                    "rebalance-interval" : "10 s",
                    # reference.conf: 91
                    # The ShardRegion retries registration and shard location requests to the
                    # ShardCoordinator with this interval if it does not reply.
                    "retry-interval" : "2 s",
                    # reference.conf: 88
                    # Start the coordinator singleton manager on members tagged with this role.
                    # All members are used if undefined or empty.
                    # ShardRegion actor is started in proxy only mode on nodes that are not tagged
                    # with this role.
                    "role" : "",
                    # reference.conf: 100
                    # How often the coordinator saves persistent snapshots, which are
                    # used to reduce recovery times
                    "snapshot-interval" : "3600 s"
                }
            }
        },
        # reference.conf: 56
        # Toggles whether threads created by this ActorSystem should be daemons or not
        "daemonic" : "off",
        # reference.conf: 53
        # List FQCN of extensions which shall be loaded at actor system startup.
        # Should be on the format: 'extensions = ["foo", "bar"]' etc.
        # See the Akka Documentation for more info about Extensions
        "extensions" : [],
        # reference.conf: 13
        # Home directory of Akka, modules in the deploy directory will be loaded
        "home" : "",
        # reference.conf: 511
        "io" : {
            # reference.conf: 515
            # By default the select loops run on dedicated threads, hence using a
            # PinnedDispatcher
            "pinned-dispatcher" : {
                # reference.conf: 517
                "executor" : "thread-pool-executor",
                # reference.conf: 518
                "thread-pool-executor" : {
                    # reference.conf: 518
                    "allow-core-pool-timeout" : "off"
                },
                # reference.conf: 516
                "type" : "PinnedDispatcher"
            },
            # reference.conf: 521
            "tcp" : {
                # reference.conf: 543
                # The maximum number of connection that are accepted in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "batch-accept-limit" : 10,
                # reference.conf: 551
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf: 547
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf: 581
                # Fully qualified config path which holds the dispatcher configuration
                # on which file IO tasks are scheduled
                "file-io-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 589
                # The maximum number of bytes (or "unlimited") to transfer in one batch
                # when using `WriteFile` command which uses `FileChannel.transferTo` to
                # pipe files to a TCP socket. On some OS like Linux `FileChannel.transferTo`
                # may block for a long time when network IO is faster than file IO.
                # Decreasing the value may improve fairness while increasing may improve
                # throughput.
                "file-io-transferTo-limit" : "512 KiB",
                # reference.conf: 594
                # The number of times to retry the `finishConnect` call after being notified about
                # OP_CONNECT. Retries are needed if the OP_CONNECT notification doesn't imply that
                # `finishConnect` will succeed, which is the case on Android.
                "finish-connect-retries" : 5,
                # reference.conf: 577
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 533
                # Maximum number of open channels supported by this TCP module; there is
                # no intrinsic general limit, this setting is meant to enable DoS
                # protection by limiting the number of concurrently connected clients.
                # Also note that this is a "soft" limit; in certain cases the implementation
                # will accept a few connections more or a few less than the number configured
                # here. Must be an integer > 0 or "unlimited".
                "max-channels" : 256000,
                # reference.conf: 560
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                "max-received-message-size" : "unlimited",
                # reference.conf: 525
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf: 555
                # The duration a connection actor waits for a `Register` message from
                # its commander before aborting the connection.
                "register-timeout" : "5s",
                # reference.conf: 538
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf: 569
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf: 565
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf: 603
                # On Windows connection aborts are not reliably detected unless an OP_READ is
                # registered on the selector _after_ the connection has been reset. This
                # workaround enables an OP_CONNECT which forces the abort to be visible on Windows.
                # Enabling this setting on other platforms than Windows will cause various failures
                # and undefined behavior.
                # Possible values of this key are on, off and auto where auto will enable the
                # workaround if Windows is detected automatically.
                "windows-connection-abort-workaround-enabled" : "auto",
                # reference.conf: 573
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf: 606
            "udp" : {
                # reference.conf: 642
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf: 638
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf: 664
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 615
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf: 610
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf: 634
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf: 647
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                "received-message-size-limit" : "unlimited",
                # reference.conf: 624
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf: 629
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf: 656
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf: 652
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf: 660
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf: 667
            "udp-connected" : {
                # reference.conf: 703
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf: 699
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf: 725
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 676
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf: 671
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf: 695
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf: 708
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                "received-message-size-limit" : "unlimited",
                # reference.conf: 685
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf: 690
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf: 717
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf: 713
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf: 721
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            }
        },
        # reference.conf: 60
        # JVM shutdown, System.exit(-1), in case of a fatal error,
        # such as OutOfMemoryError
        "jvm-exit-on-fatal-error" : "on",
        # application.conf: 22
        # Akka
        # ======= #
        "log-config-on-start" : "on",
        # reference.conf: 43
        # Log at info level when messages are sent to dead letters.
        # Possible values:
        # on: all dead letters are logged
        # off: no logging of dead letters
        # n: positive integer, number of dead letters that will be logged
        "log-dead-letters" : 10,
        # reference.conf: 48
        # Possibility to turn off logging of dead letters while the actor system
        # is shutting down. Logging is only done when enabled by 'log-dead-letters'
        # setting.
        "log-dead-letters-during-shutdown" : "on",
        # reference.conf: 22
        # Loggers are created and registered synchronously during ActorSystem
        # start-up, and since they are actors, this timeout is used to bound the
        # waiting time
        "logger-startup-timeout" : "5s",
        # application.conf: 25
        "loggers" : [
            # application.conf: 25
            "akka.event.slf4j.Slf4jLogger"
        ],
        # application.conf: 26
        "loglevel" : "DEBUG",
        # reference.conf: 25
        "persistence" : {
            # reference.conf: 146
            "at-least-once-delivery" : {
                # reference.conf: 156
                # Maximum number of unconfirmed messages that an actor with AtLeastOnceDelivery is
                # allowed to hold in memory.
                "max-unconfirmed-messages" : 100000,
                # reference.conf: 148
                # Interval between redelivery attempts
                "redeliver-interval" : "5s",
                # reference.conf: 152
                # After this number of delivery attempts a `ReliableRedelivery.UnconfirmedWarning`
                # message will be sent to the actor.
                "warn-after-number-of-unconfirmed-attempts" : 5
            },
            # reference.conf: 159
            "dispatchers" : {
                # reference.conf: 160
                "default-plugin-dispatcher" : {
                    # reference.conf: 162
                    "executor" : "thread-pool-executor",
                    # reference.conf: 161
                    "type" : "PinnedDispatcher"
                },
                # reference.conf: 164
                "default-replay-dispatcher" : {
                    # reference.conf: 166
                    "executor" : "fork-join-executor",
                    # reference.conf: 167
                    "fork-join-executor" : {
                        # reference.conf: 169
                        "parallelism-max" : 8,
                        # reference.conf: 168
                        "parallelism-min" : 2
                    },
                    # reference.conf: 165
                    "type" : "Dispatcher"
                },
                # reference.conf: 172
                "default-stream-dispatcher" : {
                    # reference.conf: 174
                    "executor" : "fork-join-executor",
                    # reference.conf: 175
                    "fork-join-executor" : {
                        # reference.conf: 177
                        "parallelism-max" : 8,
                        # reference.conf: 176
                        "parallelism-min" : 2
                    },
                    # reference.conf: 173
                    "type" : "Dispatcher"
                }
            },
            # reference.conf: 27
            "journal" : {
                # reference.conf: 42
                # In-memory journal plugin.
                "inmem" : {
                    # reference.conf: 45
                    # Class name of the plugin.
                    "class" : "akka.persistence.journal.inmem.InmemJournal",
                    # reference.conf: 48
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.actor.default-dispatcher"
                },
                # reference.conf: 52
                # LevelDB journal plugin.
                "leveldb" : {
                    # reference.conf: 70
                    # Verify checksum on read.
                    "checksum" : "off",
                    # reference.conf: 55
                    # Class name of the plugin.
                    "class" : "akka.persistence.journal.leveldb.LeveldbJournal",
                    # reference.conf: 64
                    # Storage location of LevelDB files.
                    "dir" : "journal",
                    # reference.conf: 67
                    # Use fsync on write
                    "fsync" : "on",
                    # reference.conf: 73
                    # Native LevelDB (via JNI) or LevelDB Java port
                    "native" : "on",
                    # reference.conf: 58
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher",
                    # reference.conf: 61
                    # Dispatcher for message replay.
                    "replay-dispatcher" : "akka.persistence.dispatchers.default-replay-dispatcher"
                },
                # reference.conf: 77
                # Shared LevelDB journal plugin (for testing only).
                "leveldb-shared" : {
                    # reference.conf: 80
                    # Class name of the plugin.
                    "class" : "akka.persistence.journal.leveldb.SharedLeveldbJournal",
                    # reference.conf: 83
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.actor.default-dispatcher",
                    # reference.conf: 88
                    "store" : {
                        # reference.conf: 103
                        # Verify checksum on read.
                        "checksum" : "off",
                        # reference.conf: 97
                        # Storage location of LevelDB files.
                        "dir" : "journal",
                        # reference.conf: 100
                        # Use fsync on write
                        "fsync" : "on",
                        # reference.conf: 106
                        # Native LevelDB (via JNI) or LevelDB Java port
                        "native" : "on",
                        # reference.conf: 94
                        # Dispatcher for message replay.
                        "replay-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher",
                        # reference.conf: 91
                        # Dispatcher for shared store actor.
                        "store-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher"
                    },
                    # reference.conf: 86
                    # timeout for async journal operations
                    "timeout" : "10s"
                },
                # reference.conf: 33
                # Maximum size of a confirmation batch written to the journal.
                "max-confirmation-batch-size" : 10000,
                # reference.conf: 36
                # Maximum size of a deletion batch written to the journal.
                "max-deletion-batch-size" : 10000,
                # reference.conf: 30
                # Maximum size of a persistent message batch written to the journal.
                "max-message-batch-size" : 200,
                # reference.conf: 39
                # Path to the journal plugin to be used
                "plugin" : "akka.persistence.journal.leveldb"
            },
            # reference.conf: 111
            "snapshot-store" : {
                # reference.conf: 117
                # Local filesystem snapshot store plugin.
                "local" : {
                    # reference.conf: 120
                    # Class name of the plugin.
                    "class" : "akka.persistence.snapshot.local.LocalSnapshotStore",
                    # reference.conf: 129
                    # Storage location of snapshot files.
                    "dir" : "snapshots",
                    # reference.conf: 123
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher",
                    # reference.conf: 126
                    # Dispatcher for streaming snapshot IO.
                    "stream-dispatcher" : "akka.persistence.dispatchers.default-stream-dispatcher"
                },
                # reference.conf: 114
                # Path to the snapshot store plugin to be used
                "plugin" : "akka.persistence.snapshot-store.local"
            },
            # reference.conf: 133
            "view" : {
                # reference.conf: 136
                # Automated incremental view update.
                "auto-update" : "on",
                # reference.conf: 139
                # Interval between incremental updates
                "auto-update-interval" : "5s",
                # reference.conf: 143
                # Maximum number of messages to replay per incremental view update. Set to
                # -1 for no upper limit.
                "auto-update-replay-max" : -1
            }
        },
        # merge of String: 1,reference.conf: 58
        "remote" : {
            # reference.conf: 287
            # Transport drivers can be augmented with adapters by adding their
            # name to the applied-adapters setting in the configuration of a
            # transport. The available adapters should be configured in this
            # section by providing a name, and the fully qualified name of
            # their corresponding implementation. The class given here
            # must implement akka.akka.remote.transport.TransportAdapterProvider
            # and have public constructor without parameters.
            "adapters" : {
                # reference.conf: 288
                "gremlin" : "akka.remote.transport.FailureInjectorProvider",
                # reference.conf: 289
                "trttl" : "akka.remote.transport.ThrottlerProvider"
            },
            # reference.conf: 83
            # Controls the backoff interval after a refused write is reattempted.
            # (Transports may refuse writes if their internal buffer is full)
            "backoff-interval" : "5 ms",
            # reference.conf: 484
            "backoff-remote-dispatcher" : {
                # reference.conf: 486
                "executor" : "fork-join-executor",
                # reference.conf: 487
                "fork-join-executor" : {
                    # reference.conf: 490
                    "parallelism-max" : 2,
                    # reference.conf: 489
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 2
                },
                # reference.conf: 485
                "type" : "Dispatcher"
            },
            # reference.conf: 86
            # Acknowledgment timeout of management commands sent to the transport stack.
            "command-ack-timeout" : "30 s",
            # reference.conf: 474
            "default-remote-dispatcher" : {
                # reference.conf: 476
                "executor" : "fork-join-executor",
                # reference.conf: 477
                "fork-join-executor" : {
                    # reference.conf: 480
                    "parallelism-max" : 2,
                    # reference.conf: 479
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 2
                },
                # reference.conf: 475
                "type" : "Dispatcher"
            },
            # reference.conf: 278
            # List of the transport drivers that will be loaded by the remoting.
            # A list of fully qualified config paths must be provided where
            # the given configuration path contains a transport-class key
            # pointing to an implementation class of the Transport interface.
            # If multiple transports are provided, the address of the first
            # one will be used as a default address.
            "enabled-transports" : [
                # reference.conf: 278
                "akka.remote.netty.tcp"
            ],
            # reference.conf: 76
            # Before shutting down the drivers, the remoting subsystem attempts to flush
            # all pending writes. This setting controls the maximum time the remoting is
            # willing to wait before moving on to shut down the drivers.
            "flush-wait-on-shutdown" : "2 s",
            # reference.conf: 467
            "gremlin" : {
                # reference.conf: 469
                # Enable debug logging of the failure injector transport adapter
                "debug" : "off"
            },
            # reference.conf: 268
            # WARNING: this setting should not be not changed unless all of its consequences
            # are properly understood which assumes experience with remoting internals
            # or expert advice.
            # This setting defines the time after redelivery attempts of internal management
            # signals are stopped to a remote system that has been not confirmed to be alive by
            # this system before.
            "initial-system-message-delivery-timeout" : "3 m",
            # reference.conf: 148
            # Log warning if the number of messages in the backoff buffer in the endpoint
            # writer exceeds this limit. It can be disabled by setting the value to off.
            "log-buffer-size-exceeding" : 50000,
            # reference.conf: 144
            # Logging of message types with payload size in bytes larger than
            # this value. Maximum detected size per message type is logged once,
            # with an increase threshold of 10%.
            # By default this feature is turned off. Activate it by setting the property to
            # a value in bytes, such as 1000b. Note that for all messages larger than this
            # limit there will be extra performance and scalability cost.
            "log-frame-size-exceeding" : "off",
            # reference.conf: 123
            # If this is "on", Akka will log all inbound messages at DEBUG level,
            # if off then they are not logged
            "log-received-messages" : "off",
            # reference.conf: 136
            # Sets the log granularity level at which Akka logs remoting events. This setting
            # can take the values OFF, ERROR, WARNING, INFO, DEBUG, or ON. For compatibility
            # reasons the setting "on" will default to "debug" level. Please note that the effective
            # logging level is still determined by the global logging level of the actor system:
            # for example debug level remoting events will be only logged if the system
            # is running with debug level logging.
            # Failures to deserialize received messages also fall under this flag.
            "log-remote-lifecycle-events" : "on",
            # reference.conf: 127
            # If this is "on", Akka will log all outbound messages at DEBUG level,
            # if off then they are not logged
            "log-sent-messages" : "off",
            # merge of String: 1,reference.conf: 294-413
            "netty" : {
                # reference.conf: 294-413
                "ssl" : {
                    # reference.conf: 306
                    # Transport drivers can be augmented with adapters by adding their
                    # name to the applied-adapters list. The last adapter in the
                    # list is the adapter immediately above the driver, while
                    # the first one is the top of the stack below the standard
                    # Akka protocol
                    "applied-adapters" : [],
                    # reference.conf: 359
                    # Sets the size of the connection backlog
                    "backlog" : 4096,
                    # reference.conf: 390
                    # Used to configure the number of I/O worker threads on client sockets
                    "client-socket-worker-pool" : {
                        # reference.conf: 398
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 401
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 392
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 324
                    # Sets the connectTimeoutMillis of all outbound connections,
                    # i.e. how long a connect may take until it is timed out
                    "connection-timeout" : "15 s",
                    # reference.conf: 416
                    # Enable SSL/TLS encryption.
                    # This must be enabled on both the client and server to work.
                    "enable-ssl" : true,
                    # reference.conf: 317
                    # The hostname or ip to bind the remoting to,
                    # InetAddress.getLocalHost.getHostAddress is used if empty
                    "hostname" : "",
                    # reference.conf: 356
                    # Maximum message size the transport will accept, but at least
                    # 32000 bytes.
                    # Please note that UDP does not support arbitrary large datagrams,
                    # so this setting has to be chosen carefully when using UDP.
                    # Both send-buffer-size and receive-buffer-size settings has to
                    # be adjusted to be able to buffer messages of maximum size.
                    "maximum-frame-size" : "128000b",
                    # reference.conf: 313
                    # The default remote server port clients should connect to.
                    # Default is 2552 (AKKA), use 0 if you want a random available port
                    # This port needs to be unique for each actor system on the same machine.
                    "port" : 2552,
                    # reference.conf: 348
                    # Sets the receive buffer size of the Sockets,
                    # set to 0b for platform default
                    "receive-buffer-size" : "256000b",
                    # reference.conf: 418
                    "security" : {
                        # reference.conf: 446
                        # Example: ["TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"]
                        # You need to install the JCE Unlimited Strength Jurisdiction Policy
                        # Files to use AES 256.
                        # More info here:
                        # http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEProvider
                        "enabled-algorithms" : [
                            # reference.conf: 446
                            "TLS_RSA_WITH_AES_128_CBC_SHA"
                        ],
                        # reference.conf: 426
                        # This password is used for decrypting the key
                        "key-password" : "changeme",
                        # reference.conf: 420
                        # This is the Java Key Store used by the server connection
                        "key-store" : "keystore",
                        # reference.conf: 423
                        # This password is used for decrypting the key store
                        "key-store-password" : "changeme",
                        # reference.conf: 439
                        # Protocol to use for SSL encryption, choose from:
                        # Java 6 & 7:
                        #   'SSLv3', 'TLSv1'
                        # Java 7:
                        #   'TLSv1.1', 'TLSv1.2'
                        "protocol" : "TLSv1",
                        # reference.conf: 461
                        # There are three options, in increasing order of security:
                        # "" or SecureRandom => (default)
                        # "SHA1PRNG" => Can be slow because of blocking issues on Linux
                        # "AES128CounterSecureRNG" => fastest startup and based on AES encryption
                        # algorithm
                        # "AES256CounterSecureRNG"
                        # The following use one of 3 possible seed sources, depending on
                        # availability: /dev/random, random.org and SecureRandom (provided by Java)
                        # "AES128CounterInetRNG"
                        # "AES256CounterInetRNG" (Install JCE Unlimited Strength Jurisdiction
                        # Policy Files first)
                        # Setting a value here may require you to supply the appropriate cipher
                        # suite (see enabled-algorithms section above)
                        "random-number-generator" : "",
                        # reference.conf: 429
                        # This is the Java Key Store used by the client connection
                        "trust-store" : "truststore",
                        # reference.conf: 432
                        # This password is used for decrypting the trust store
                        "trust-store-password" : "changeme"
                    },
                    # reference.conf: 344
                    # Sets the send buffer size of the Sockets,
                    # set to 0b for platform default
                    "send-buffer-size" : "256000b",
                    # reference.conf: 375
                    # Used to configure the number of I/O worker threads on server sockets
                    "server-socket-worker-pool" : {
                        # reference.conf: 383
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 386
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 377
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 365
                    # Enables TCP Keepalive, subject to the O/S kernel’s configuration
                    "tcp-keepalive" : "on",
                    # reference.conf: 362
                    # Enables the TCP_NODELAY flag, i.e. disables Nagle’s algorithm
                    "tcp-nodelay" : "on",
                    # reference.conf: 372
                    # Enables SO_REUSEADDR, which determines when an ActorSystem can open
                    # the specified listen port (the meaning differs between *nix and Windows)
                    # Valid values are "on", "off" and "off-for-windows"
                    # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
                    # "off-for-windows" of course means that it's "on" for all other platforms
                    "tcp-reuse-addr" : "off-for-windows",
                    # reference.conf: 299
                    # The class given here must implement the akka.remote.transport.Transport
                    # interface and offer a public constructor which takes two arguments:
                    #  1) akka.actor.ExtendedActorSystem
                    #  2) com.typesafe.config.Config
                    "transport-class" : "akka.remote.transport.netty.NettyTransport",
                    # reference.conf: 308
                    "transport-protocol" : "tcp",
                    # reference.conf: 332
                    # If set to "<id.of.dispatcher>" then the specified dispatcher
                    # will be used to accept inbound connections, and perform IO. If "" then
                    # dedicated threads will be used.
                    # Please note that the Netty driver only uses this configuration and does
                    # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
                    # configured manually to point to the same dispatcher if needed.
                    "use-dispatcher-for-io" : "",
                    # reference.conf: 336
                    # Sets the high water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-high-water-mark" : "0b",
                    # reference.conf: 340
                    # Sets the low water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-low-water-mark" : "0b"
                },
                # merge of String: 1,reference.conf: 294
                "tcp" : {
                    # reference.conf: 306
                    # Transport drivers can be augmented with adapters by adding their
                    # name to the applied-adapters list. The last adapter in the
                    # list is the adapter immediately above the driver, while
                    # the first one is the top of the stack below the standard
                    # Akka protocol
                    "applied-adapters" : [],
                    # reference.conf: 359
                    # Sets the size of the connection backlog
                    "backlog" : 4096,
                    # reference.conf: 390
                    # Used to configure the number of I/O worker threads on client sockets
                    "client-socket-worker-pool" : {
                        # reference.conf: 398
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 401
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 392
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 324
                    # Sets the connectTimeoutMillis of all outbound connections,
                    # i.e. how long a connect may take until it is timed out
                    "connection-timeout" : "15 s",
                    # reference.conf: 320
                    # Enables SSL support on this transport
                    "enable-ssl" : false,
                    # reference.conf: 317
                    # The hostname or ip to bind the remoting to,
                    # InetAddress.getLocalHost.getHostAddress is used if empty
                    "hostname" : "",
                    # reference.conf: 356
                    # Maximum message size the transport will accept, but at least
                    # 32000 bytes.
                    # Please note that UDP does not support arbitrary large datagrams,
                    # so this setting has to be chosen carefully when using UDP.
                    # Both send-buffer-size and receive-buffer-size settings has to
                    # be adjusted to be able to buffer messages of maximum size.
                    "maximum-frame-size" : "128000b",
                    # String: 1
                    "port" : 4001,
                    # reference.conf: 348
                    # Sets the receive buffer size of the Sockets,
                    # set to 0b for platform default
                    "receive-buffer-size" : "256000b",
                    # reference.conf: 344
                    # Sets the send buffer size of the Sockets,
                    # set to 0b for platform default
                    "send-buffer-size" : "256000b",
                    # reference.conf: 375
                    # Used to configure the number of I/O worker threads on server sockets
                    "server-socket-worker-pool" : {
                        # reference.conf: 383
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 386
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 377
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 365
                    # Enables TCP Keepalive, subject to the O/S kernel’s configuration
                    "tcp-keepalive" : "on",
                    # reference.conf: 362
                    # Enables the TCP_NODELAY flag, i.e. disables Nagle’s algorithm
                    "tcp-nodelay" : "on",
                    # reference.conf: 372
                    # Enables SO_REUSEADDR, which determines when an ActorSystem can open
                    # the specified listen port (the meaning differs between *nix and Windows)
                    # Valid values are "on", "off" and "off-for-windows"
                    # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
                    # "off-for-windows" of course means that it's "on" for all other platforms
                    "tcp-reuse-addr" : "off-for-windows",
                    # reference.conf: 299
                    # The class given here must implement the akka.remote.transport.Transport
                    # interface and offer a public constructor which takes two arguments:
                    #  1) akka.actor.ExtendedActorSystem
                    #  2) com.typesafe.config.Config
                    "transport-class" : "akka.remote.transport.netty.NettyTransport",
                    # reference.conf: 308
                    "transport-protocol" : "tcp",
                    # reference.conf: 332
                    # If set to "<id.of.dispatcher>" then the specified dispatcher
                    # will be used to accept inbound connections, and perform IO. If "" then
                    # dedicated threads will be used.
                    # Please note that the Netty driver only uses this configuration and does
                    # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
                    # configured manually to point to the same dispatcher if needed.
                    "use-dispatcher-for-io" : "",
                    # reference.conf: 336
                    # Sets the high water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-high-water-mark" : "0b",
                    # reference.conf: 340
                    # Sets the low water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-low-water-mark" : "0b"
                },
                # reference.conf: 294-408
                "udp" : {
                    # reference.conf: 306
                    # Transport drivers can be augmented with adapters by adding their
                    # name to the applied-adapters list. The last adapter in the
                    # list is the adapter immediately above the driver, while
                    # the first one is the top of the stack below the standard
                    # Akka protocol
                    "applied-adapters" : [],
                    # reference.conf: 359
                    # Sets the size of the connection backlog
                    "backlog" : 4096,
                    # reference.conf: 390
                    # Used to configure the number of I/O worker threads on client sockets
                    "client-socket-worker-pool" : {
                        # reference.conf: 398
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 401
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 392
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 324
                    # Sets the connectTimeoutMillis of all outbound connections,
                    # i.e. how long a connect may take until it is timed out
                    "connection-timeout" : "15 s",
                    # reference.conf: 320
                    # Enables SSL support on this transport
                    "enable-ssl" : false,
                    # reference.conf: 317
                    # The hostname or ip to bind the remoting to,
                    # InetAddress.getLocalHost.getHostAddress is used if empty
                    "hostname" : "",
                    # reference.conf: 356
                    # Maximum message size the transport will accept, but at least
                    # 32000 bytes.
                    # Please note that UDP does not support arbitrary large datagrams,
                    # so this setting has to be chosen carefully when using UDP.
                    # Both send-buffer-size and receive-buffer-size settings has to
                    # be adjusted to be able to buffer messages of maximum size.
                    "maximum-frame-size" : "128000b",
                    # reference.conf: 313
                    # The default remote server port clients should connect to.
                    # Default is 2552 (AKKA), use 0 if you want a random available port
                    # This port needs to be unique for each actor system on the same machine.
                    "port" : 2552,
                    # reference.conf: 348
                    # Sets the receive buffer size of the Sockets,
                    # set to 0b for platform default
                    "receive-buffer-size" : "256000b",
                    # reference.conf: 344
                    # Sets the send buffer size of the Sockets,
                    # set to 0b for platform default
                    "send-buffer-size" : "256000b",
                    # reference.conf: 375
                    # Used to configure the number of I/O worker threads on server sockets
                    "server-socket-worker-pool" : {
                        # reference.conf: 383
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 386
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 377
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 365
                    # Enables TCP Keepalive, subject to the O/S kernel’s configuration
                    "tcp-keepalive" : "on",
                    # reference.conf: 362
                    # Enables the TCP_NODELAY flag, i.e. disables Nagle’s algorithm
                    "tcp-nodelay" : "on",
                    # reference.conf: 372
                    # Enables SO_REUSEADDR, which determines when an ActorSystem can open
                    # the specified listen port (the meaning differs between *nix and Windows)
                    # Valid values are "on", "off" and "off-for-windows"
                    # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
                    # "off-for-windows" of course means that it's "on" for all other platforms
                    "tcp-reuse-addr" : "off-for-windows",
                    # reference.conf: 299
                    # The class given here must implement the akka.remote.transport.Transport
                    # interface and offer a public constructor which takes two arguments:
                    #  1) akka.actor.ExtendedActorSystem
                    #  2) com.typesafe.config.Config
                    "transport-class" : "akka.remote.transport.netty.NettyTransport",
                    # reference.conf: 409
                    "transport-protocol" : "udp",
                    # reference.conf: 332
                    # If set to "<id.of.dispatcher>" then the specified dispatcher
                    # will be used to accept inbound connections, and perform IO. If "" then
                    # dedicated threads will be used.
                    # Please note that the Netty driver only uses this configuration and does
                    # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
                    # configured manually to point to the same dispatcher if needed.
                    "use-dispatcher-for-io" : "",
                    # reference.conf: 336
                    # Sets the high water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-high-water-mark" : "0b",
                    # reference.conf: 340
                    # Sets the low water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-low-water-mark" : "0b"
                }
            },
            # reference.conf: 240
            # After catastrophic communication failures that result in the loss of system
            # messages or after the remote DeathWatch triggers the remote system gets
            # quarantined to prevent inconsistent behavior.
            # This setting controls how long the Quarantine marker will be kept around
            # before being removed to avoid long-term memory leaks.
            # WARNING: DO NOT change this to a small value to re-enable communication with
            # quarantined nodes. Such feature is not supported and any behavior between
            # the affected systems after lifting the quarantine is undefined.
            "prune-quarantine-marker-after" : "5 d",
            # reference.conf: 112
            # Should the remote server require that its peers share the same
            # secure-cookie (defined in the 'remote' section)? Secure cookies are passed
            # between during the initial handshake. Connections are refused if the initial
            # message contains a mismatching cookie or the cookie is missing.
            "require-cookie" : "off",
            # reference.conf: 260
            # This setting defines the time after internal management signals
            # between actors (used for DeathWatch and supervision) that have not been
            # explicitly acknowledged or negatively acknowledged are resent.
            # Messages that were negatively acknowledged are always immediately
            # resent.
            "resend-interval" : "2 s",
            # reference.conf: 230
            # After failed to establish an outbound connection, the remoting will mark the
            # address as failed. This configuration option controls how much time should
            # be elapsed before reattempting a new connection. While the address is
            # gated, all messages sent to the address are delivered to dead-letters.
            # Since this setting limits the rate of reconnects setting it to a
            # very short interval (i.e. less than a second) may result in a storm of
            # reconnect attempts.
            "retry-gate-closed-for" : "5 s",
            # reference.conf: 117
            # Generate your own with the script availbale in
            # '$AKKA_HOME/scripts/generate_config_with_secure_cookie.sh' or using
            # 'akka.util.Crypt.generateSecureCookie'
            "secure-cookie" : "",
            # reference.conf: 71
            # Timout after which the graceful shutdown of the remoting subsystem is
            # considered to be failed. After the timeout the remoting system is
            # forcefully shut down. Increase this value if your transport drivers
            # (see the enabled-transports section) need longer time to stop properly.
            "shutdown-timeout" : "10 s",
            # reference.conf: 65
            # Timeout after which the startup of the remoting subsystem is considered
            # to be failed. Increase this value if your transport drivers (see the
            # enabled-transports section) need longer time to be loaded.
            "startup-timeout" : "10 s",
            # reference.conf: 253
            # This setting defines the maximum idle time after an individual
            # acknowledgement for system messages is sent. System message delivery
            # is guaranteed by explicit acknowledgement messages. These acks are
            # piggybacked on ordinary traffic messages. If no traffic is detected
            # during the time period configured here, the remoting will send out
            # an individual ack.
            "system-message-ack-piggyback-timeout" : "0.3 s",
            # reference.conf: 245
            # This setting defines the maximum number of unacknowledged system messages
            # allowed for a remote system. If this limit is reached the remote system is
            # declared to be dead and its UID marked as tainted.
            "system-message-buffer-size" : 1000,
            # reference.conf: 155
            # Settings for the failure detector to monitor connections.
            # For TCP it is not important to have fast failure detection, since
            # most connection failures are captured by TCP itself. 
            "transport-failure-detector" : {
                # reference.conf: 171
                # Number of potentially lost/delayed heartbeats that will be
                # accepted before considering it to be an anomaly.
                # A margin to the `heartbeat-interval` is important to be able to survive sudden,
                # occasional, pauses in heartbeat arrivals, due to for example garbage collect or
                # network drop.
                "acceptable-heartbeat-pause" : "20 s",
                # reference.conf: 164
                # How often keep-alive heartbeat messages should be sent to each connection.
                "heartbeat-interval" : "4 s",
                # reference.conf: 161
                # FQCN of the failure detector implementation.
                # It must implement akka.remote.FailureDetector and have
                # a public constructor with a com.typesafe.config.Config and
                # akka.actor.EventStream parameter.
                "implementation-class" : "akka.remote.DeadlineFailureDetector"
            },
            # reference.conf: 106
            # When 'untrusted-mode=on' inbound actor selections are by default discarded.
            # Actors with paths defined in this white list are granted permission to receive actor
            # selections messages. 
            # E.g. trusted-selection-paths = ["/user/receptionist", "/user/namingService"]   
            "trusted-selection-paths" : [],
            # reference.conf: 100
            # Enable untrusted mode for full security of server managed actors, prevents
            # system messages to be send by clients, e.g. messages like 'Create',
            # 'Suspend', 'Resume', 'Terminate', 'Supervise', 'Link' etc.
            "untrusted-mode" : "off",
            # reference.conf: 93
            # If set to a nonempty string remoting will use the given dispatcher for
            # its internal actors otherwise the default dispatcher is used. Please note
            # that since remoting can load arbitrary 3rd party drivers (see
            # "enabled-transport" and "adapters" entries) it is not guaranteed that
            # every module will respect this setting.
            "use-dispatcher" : "akka.remote.default-remote-dispatcher",
            # reference.conf: 79
            # Reuse inbound connections for outbound messages
            "use-passive-connections" : "on",
            # reference.conf: 176
            # Settings for the Phi accrual failure detector (http://ddg.jaist.ac.jp/pub/HDY+04.pdf
            # [Hayashibara et al]) used for remote death watch.
            "watch-failure-detector" : {
                # reference.conf: 209
                # Number of potentially lost/delayed heartbeats that will be
                # accepted before considering it to be an anomaly.
                # This margin is important to be able to survive sudden, occasional,
                # pauses in heartbeat arrivals, due to for example garbage collect or
                # network drop.
                "acceptable-heartbeat-pause" : "10 s",
                # reference.conf: 219
                # After the heartbeat request has been sent the first failure detection
                # will start after this period, even though no heartbeat mesage has
                # been received.
                "expected-response-after" : "3 s",
                # reference.conf: 185
                # How often keep-alive heartbeat messages should be sent to each connection.
                "heartbeat-interval" : "1 s",
                # reference.conf: 182
                # FQCN of the failure detector implementation.
                # It must implement akka.remote.FailureDetector and have
                # a public constructor with a com.typesafe.config.Config and
                # akka.actor.EventStream parameter.
                "implementation-class" : "akka.remote.PhiAccrualFailureDetector",
                # reference.conf: 196
                # Number of the samples of inter-heartbeat arrival times to adaptively
                # calculate the failure timeout for connections.
                "max-sample-size" : 200,
                # reference.conf: 202
                # Minimum standard deviation to use for the normal distribution in
                # AccrualFailureDetector. Too low standard deviation might result in
                # too much sensitivity for sudden, but normal, deviations in heartbeat
                # inter arrival times.
                "min-std-deviation" : "100 ms",
                # reference.conf: 192
                # Defines the failure detector threshold.
                # A low threshold is prone to generate many wrong suspicions but ensures
                # a quick detection in the event of a real crash. Conversely, a high
                # threshold generates fewer mistakes but needs more time to detect
                # actual crashes.
                "threshold" : 10,
                # reference.conf: 214
                # How often to check for nodes marked as unreachable by the failure
                # detector
                "unreachable-nodes-reaper-interval" : "1s"
            }
        },
        # reference.conf: 476
        # Used to set the behavior of the scheduler.
        # Changing the default values may change the system behavior drastically so make
        # sure you know what you're doing! See the Scheduler section of the Akka
        # Documentation for more details.
        "scheduler" : {
            # reference.conf: 502
            # This setting selects the timer implementation which shall be loaded at
            # system start-up.
            # The class given here must implement the akka.actor.Scheduler interface
            # and offer a public constructor which takes three arguments:
            #  1) com.typesafe.config.Config
            #  2) akka.event.LoggingAdapter
            #  3) java.util.concurrent.ThreadFactory
            "implementation" : "akka.actor.LightArrayRevolverScheduler",
            # reference.conf: 508
            # When shutting down the scheduler, there will typically be a thread which
            # needs to be stopped, and this timeout determines how long to wait for
            # that to happen. In case of timeout the shutdown of the actor system will
            # proceed without running possibly still enqueued tasks.
            "shutdown-timeout" : "5s",
            # reference.conf: 486
            # The LightArrayRevolverScheduler is used as the default scheduler in the
            # system. It does not execute the scheduled tasks on exact time, but on every
            # tick, it will run everything that is (over)due. You can increase or decrease
            # the accuracy of the execution timing by specifying smaller or larger tick
            # duration. If you are scheduling a lot of tasks you should consider increasing
            # the ticks per wheel.
            # Note that it might take up to 1 tick to stop the Timer, so setting the
            # tick-duration to a high value will make shutting down the actor system
            # take longer.
            "tick-duration" : "10ms",
            # reference.conf: 493
            # The timer uses a circular wheel of buckets to store the timer tasks.
            # This should be set such that the majority of scheduled timeouts (for high
            # scheduling frequency) will be shorter than one rotation of the wheel
            # (ticks-per-wheel * ticks-duration)
            # THIS MUST BE A POWER OF TWO!
            "ticks-per-wheel" : 512
        },
        # reference.conf: 32
        # Log level for the very basic logger activated during ActorSystem startup.
        # This logger prints the log messages to stdout (System.out).
        # Options: OFF, ERROR, WARNING, INFO, DEBUG
        "stdout-loglevel" : "WARNING",
        # reference.conf: 9
        "test" : {
            # reference.conf: 25
            "calling-thread-dispatcher" : {
                # reference.conf: 26
                "type" : "akka.testkit.CallingThreadDispatcherConfigurator"
            },
            # reference.conf: 23
            # The timeout that is added as an implicit by DefaultTimeout trait
            "default-timeout" : "5s",
            # reference.conf: 16
            # duration of EventFilter.intercept waits after the block is finished until
            # all required messages are received
            "filter-leeway" : "3s",
            # reference.conf: 20
            # duration to wait in expectMsg and friends outside of within() block
            # by default
            "single-expect-default" : "3s",
            # reference.conf: 12
            # factor by which to scale timeouts during tests, e.g. to account for shared
            # build system load
            "timefactor" : 1
        },
        # reference.conf: 9
        "testconductor" : {
            # reference.conf: 13
            # Timeout for joining a barrier: this is the maximum time any participants
            # waits for everybody else to join a named barrier.
            "barrier-timeout" : "30s",
            # reference.conf: 28
            # Number of connect attempts to be made to the conductor controller
            "client-reconnects" : 10,
            # reference.conf: 25
            # amount of time for the ClientFSM to wait for the connection to the conductor
            # to be successful
            "connect-timeout" : "20s",
            # reference.conf: 33
            "netty" : {
                # reference.conf: 50
                # (I&O) Used to configure the number of I/O worker threads on client sockets
                "client-socket-worker-pool" : {
                    # reference.conf: 58
                    # The pool size factor is used to determine thread pool size
                    # using the following formula: ceil(available processors * factor).
                    # Resulting size is then bounded by the pool-size-min and
                    # pool-size-max values.
                    "pool-size-factor" : 1,
                    # reference.conf: 61
                    # Max number of threads to cap factor-based number to
                    "pool-size-max" : 2,
                    # reference.conf: 52
                    # Min number of threads to cap factor-based number to
                    "pool-size-min" : 1
                },
                # reference.conf: 35
                # (I&O) Used to configure the number of I/O worker threads on server sockets
                "server-socket-worker-pool" : {
                    # reference.conf: 43
                    # The pool size factor is used to determine thread pool size
                    # using the following formula: ceil(available processors * factor).
                    # Resulting size is then bounded by the pool-size-min and
                    # pool-size-max values.
                    "pool-size-factor" : 1,
                    # reference.conf: 46
                    # Max number of threads to cap factor-based number to
                    "pool-size-max" : 2,
                    # reference.conf: 37
                    # Min number of threads to cap factor-based number to
                    "pool-size-min" : 1
                }
            },
            # reference.conf: 21
            # Threshold for packet size in time unit above which the failure injector will
            # split the packet and deliver in smaller portions; do not give value smaller
            # than HashedWheelTimer resolution (would not make sense)
            "packet-split-threshold" : "100ms",
            # reference.conf: 16
            # Timeout for interrogation of TestConductor’s Controller actor
            "query-timeout" : "5s",
            # reference.conf: 31
            # minimum time interval which is to be inserted between reconnect attempts
            "reconnect-backoff" : "1s"
        },
        # reference.conf: 10
        # Akka version, checked against the runtime version of Akka.
        "version" : "2.3.9"
    },
    # application.conf: 3
    "application" : {
        # application.conf: 3
        # The application languages
        # ========================= #
        "langs" : "en"
    },
    # system properties
    "awt" : {
        # system properties
        "toolkit" : "sun.awt.X11.XToolkit"
    },
    # system properties
    "file" : {
        # system properties
        "encoding" : {
            # system properties
            "pkg" : "sun.io"
        },
        # system properties
        "separator" : "/"
    },
    # system properties
    "java" : {
        # system properties
        "awt" : {
            # system properties
            "graphicsenv" : "sun.awt.X11GraphicsEnvironment",
            # system properties
            "printerjob" : "sun.print.PSPrinterJob"
        },
        # system properties
        "class" : {
            # system properties
            "path" : "/home/yaoyj11/project/exo-geni/safe/super-safe/safe-server/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-lang/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-cache/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-logic/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-runtime/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-styla/target/scala-2.11/classes:/home/yaoyj11/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.11.7.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.7.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.11.7.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang.modules/scala-xml_2.11/bundles/scala-xml_2.11-1.0.4.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.11/bundles/scala-parser-combinators_2.11-1.0.4.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-caching_2.11/bundles/spray-caching_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-util_2.11/bundles/spray-util_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/com.googlecode.concurrentlinkedhashmap/concurrentlinkedhashmap-lru/jars/concurrentlinkedhashmap-lru-1.4.2.jar:/home/yaoyj11/.ivy2/cache/com.google.guava/guava/bundles/guava-19.0.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.scala-logging/scala-logging_2.11/jars/scala-logging_2.11-3.1.0.jar:/home/yaoyj11/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.7.jar:/home/yaoyj11/.ivy2/cache/net.openhft/collections/bundles/collections-3.2.1.jar:/home/yaoyj11/.ivy2/cache/com.intellij/annotations/jars/annotations-12.0.jar:/home/yaoyj11/.ivy2/cache/net.openhft/lang/bundles/lang-6.4.5.jar:/home/yaoyj11/.ivy2/cache/net.openhft/compiler/bundles/compiler-2.2.0.jar:/home/yaoyj11/.ivy2/cache/org.kohsuke.jetbrains/annotations/jars/annotations-9.0.jar:/home/yaoyj11/.ivy2/cache/net.openhft/affinity/bundles/affinity-2.1.0.jar:/home/yaoyj11/.ivy2/cache/net.java.dev.jna/jna/jars/jna-4.1.0.jar:/home/yaoyj11/.ivy2/cache/net.java.dev.jna/jna-platform/jars/jna-platform-4.1.0.jar:/home/yaoyj11/.ivy2/cache/junit/junit/jars/junit-4.10.jar:/home/yaoyj11/.ivy2/cache/org.hamcrest/hamcrest-core/jars/hamcrest-core-1.1.jar:/home/yaoyj11/.ivy2/cache/org.scalatest/scalatest_2.11/bundles/scalatest_2.11-2.2.1.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-remote_2.11/jars/akka-remote_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-actor_2.11/jars/akka-actor_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe/config/bundles/config-1.2.1.jar:/home/yaoyj11/.ivy2/cache/com.google.protobuf/protobuf-java/bundles/protobuf-java-2.5.0.jar:/home/yaoyj11/.ivy2/cache/org.uncommons.maths/uncommons-maths/jars/uncommons-maths-1.2.2a.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-contrib_2.11/jars/akka-contrib_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-cluster_2.11/jars/akka-cluster_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-persistence-experimental_2.11/jars/akka-persistence-experimental_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/org.iq80.leveldb/leveldb/jars/leveldb-0.5.jar:/home/yaoyj11/.ivy2/cache/org.iq80.leveldb/leveldb-api/jars/leveldb-api-0.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-all/bundles/leveldbjni-all-1.7.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni/jars/leveldbjni-1.7.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.hawtjni/hawtjni-runtime/jars/hawtjni-runtime-1.8.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-osx/jars/leveldbjni-osx-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-linux32/jars/leveldbjni-linux32-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-linux64/jars/leveldbjni-linux64-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-win32/jars/leveldbjni-win32-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-win64/jars/leveldbjni-win64-1.5.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-slf4j_2.11/jars/akka-slf4j_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-testkit_2.11/jars/akka-testkit_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcpg-jdk15on/jars/bcpg-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/com.ning/async-http-client/jars/async-http-client-1.8.7.jar:/home/yaoyj11/.ivy2/cache/io.netty/netty/bundles/netty-3.9.0.Final.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-can_2.11/bundles/spray-can_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-io_2.11/bundles/spray-io_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-http_2.11/bundles/spray-http_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/org.parboiled/parboiled-scala_2.11/jars/parboiled-scala_2.11-1.1.7.jar:/home/yaoyj11/.ivy2/cache/org.parboiled/parboiled-core/jars/parboiled-core-1.1.7.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-client_2.11/bundles/spray-client_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-httpx_2.11/bundles/spray-httpx_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/org.jvnet.mimepull/mimepull/jars/mimepull-1.9.5.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-json_2.11/bundles/spray-json_2.11-1.3.1.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-routing_2.11/bundles/spray-routing_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/com.chuusai/shapeless_2.11/jars/shapeless_2.11-1.2.4.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-testkit_2.11/jars/spray-testkit_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/commons-net/commons-net/jars/commons-net-3.4.jar:/home/yaoyj11/.ivy2/cache/jline/jline/jars/jline-2.12.jar:/home/yaoyj11/.ivy2/cache/com.github.nscala-time/nscala-time_2.11/jars/nscala-time_2.11-1.2.0.jar:/home/yaoyj11/.ivy2/cache/org.joda/joda-convert/jars/joda-convert-1.2.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-multi-node-testkit_2.11/jars/akka-multi-node-testkit_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/commons-codec/commons-codec/jars/commons-codec-1.10.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpclient/jars/httpclient-4.5.2.jar:/home/yaoyj11/.ivy2/cache/commons-logging/commons-logging/jars/commons-logging-1.2.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpasyncclient/jars/httpasyncclient-4.1.2.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpcore/jars/httpcore-4.4.5.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpcore-nio/jars/httpcore-nio-4.4.5.jar:/home/yaoyj11/.ivy2/cache/commons-validator/commons-validator/jars/commons-validator-1.5.1.jar:/home/yaoyj11/.ivy2/cache/commons-beanutils/commons-beanutils/jars/commons-beanutils-1.9.2.jar:/home/yaoyj11/.ivy2/cache/commons-collections/commons-collections/jars/commons-collections-3.2.2.jar:/home/yaoyj11/.ivy2/cache/commons-digester/commons-digester/jars/commons-digester-1.8.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.cassandra/cassandra-all/jars/cassandra-all-3.10.jar:/home/yaoyj11/.ivy2/cache/org.xerial.snappy/snappy-java/bundles/snappy-java-1.1.1.7.jar:/home/yaoyj11/.ivy2/cache/net.jpountz.lz4/lz4/jars/lz4-1.3.0.jar:/home/yaoyj11/.ivy2/cache/com.ning/compress-lzf/bundles/compress-lzf-0.8.4.jar:/home/yaoyj11/.ivy2/cache/commons-cli/commons-cli/jars/commons-cli-1.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.commons/commons-lang3/jars/commons-lang3-3.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.commons/commons-math3/jars/commons-math3-3.2.jar:/home/yaoyj11/.ivy2/cache/org.antlr/antlr/jars/antlr-3.5.2.jar:/home/yaoyj11/.ivy2/cache/org.antlr/antlr-runtime/jars/antlr-runtime-3.5.2.jar:/home/yaoyj11/.ivy2/cache/org.antlr/ST4/jars/ST4-4.0.8.jar:/home/yaoyj11/.ivy2/cache/org.slf4j/log4j-over-slf4j/jars/log4j-over-slf4j-1.7.7.jar:/home/yaoyj11/.ivy2/cache/org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.7.jar:/home/yaoyj11/.ivy2/cache/org.codehaus.jackson/jackson-core-asl/jars/jackson-core-asl-1.9.2.jar:/home/yaoyj11/.ivy2/cache/org.codehaus.jackson/jackson-mapper-asl/jars/jackson-mapper-asl-1.9.2.jar:/home/yaoyj11/.ivy2/cache/com.googlecode.json-simple/json-simple/jars/json-simple-1.1.jar:/home/yaoyj11/.ivy2/cache/com.boundary/high-scale-lib/jars/high-scale-lib-1.0.6.jar:/home/yaoyj11/.ivy2/cache/org.yaml/snakeyaml/bundles/snakeyaml-1.11.jar:/home/yaoyj11/.ivy2/cache/org.mindrot/jbcrypt/jars/jbcrypt-0.3m.jar:/home/yaoyj11/.ivy2/cache/io.dropwizard.metrics/metrics-core/bundles/metrics-core-3.1.0.jar:/home/yaoyj11/.ivy2/cache/io.dropwizard.metrics/metrics-jvm/bundles/metrics-jvm-3.1.0.jar:/home/yaoyj11/.ivy2/cache/com.addthis.metrics/reporter-config3/jars/reporter-config3-3.0.3.jar:/home/yaoyj11/.ivy2/cache/com.addthis.metrics/reporter-config-base/jars/reporter-config-base-3.0.3.jar:/home/yaoyj11/.ivy2/cache/org.hibernate/hibernate-validator/jars/hibernate-validator-4.3.0.Final.jar:/home/yaoyj11/.ivy2/cache/javax.validation/validation-api/jars/validation-api-1.0.0.GA.jar:/home/yaoyj11/.ivy2/cache/org.jboss.logging/jboss-logging/jars/jboss-logging-3.1.0.CR2.jar:/home/yaoyj11/.ivy2/cache/com.thinkaurelius.thrift/thrift-server/jars/thrift-server-0.3.7.jar:/home/yaoyj11/.ivy2/cache/com.lmax/disruptor/jars/disruptor-3.0.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.thrift/libthrift/jars/libthrift-0.9.2.jar:/home/yaoyj11/.ivy2/cache/com.clearspring.analytics/stream/jars/stream-2.5.2.jar:/home/yaoyj11/.ivy2/cache/it.unimi.dsi/fastutil/jars/fastutil-6.5.7.jar:/home/yaoyj11/.ivy2/cache/ch.qos.logback/logback-core/jars/logback-core-1.1.3.jar:/home/yaoyj11/.ivy2/cache/ch.qos.logback/logback-classic/jars/logback-classic-1.1.3.jar:/home/yaoyj11/.ivy2/cache/org.apache.cassandra/cassandra-thrift/jars/cassandra-thrift-3.10.jar:/home/yaoyj11/.ivy2/cache/com.carrotsearch/hppc/jars/hppc-0.5.4.jar:/home/yaoyj11/.ivy2/cache/de.jflex/jflex/jars/jflex-1.6.0.jar:/home/yaoyj11/.ivy2/cache/org.apache.ant/ant/jars/ant-1.7.0.jar:/home/yaoyj11/.ivy2/cache/org.apache.ant/ant-launcher/jars/ant-launcher-1.7.0.jar:/home/yaoyj11/.ivy2/cache/com.github.rholder/snowball-stemmer/jars/snowball-stemmer-1.3.0.581.1.jar:/home/yaoyj11/.ivy2/cache/com.googlecode.concurrent-trees/concurrent-trees/jars/concurrent-trees-2.4.0.jar:/home/yaoyj11/.ivy2/cache/com.github.jbellis/jamm/jars/jamm-0.3.0.jar:/home/yaoyj11/.ivy2/cache/io.netty/netty-all/jars/netty-all-4.0.39.Final.jar:/home/yaoyj11/.ivy2/cache/joda-time/joda-time/jars/joda-time-2.4.jar:/home/yaoyj11/.ivy2/cache/org.fusesource/sigar/jars/sigar-1.6.4.jar:/home/yaoyj11/.ivy2/cache/org.eclipse.jdt.core.compiler/ecj/jars/ecj-4.4.2.jar:/home/yaoyj11/.ivy2/cache/org.caffinitas.ohc/ohc-core/jars/ohc-core-0.4.4.jar:/home/yaoyj11/.ivy2/cache/com.github.ben-manes.caffeine/caffeine/jars/caffeine-2.2.6.jar:/home/yaoyj11/.ivy2/cache/org.jctools/jctools-core/jars/jctools-core-1.2.1.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang.modules/scala-async_2.11/bundles/scala-async_2.11-0.9.1.jar",
            # system properties
            "version" : "52.0"
        },
        # system properties
        "endorsed" : {
            # system properties
            "dirs" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"
        },
        # system properties
        "ext" : {
            # system properties
            "dirs" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"
        },
        # system properties
        "home" : "/usr/lib/jvm/java-8-openjdk-amd64/jre",
        # system properties
        "io" : {
            # system properties
            "tmpdir" : "/tmp"
        },
        # system properties
        "library" : {
            # system properties
            "path" : "/usr/local/lib::/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"
        },
        # system properties
        "runtime" : {
            # system properties
            "name" : "OpenJDK Runtime Environment",
            # system properties
            "version" : "1.8.0_03-Ubuntu-8u77-b03-3ubuntu3-b03"
        },
        # system properties
        "specification" : {
            # system properties
            "name" : "Java Platform API Specification",
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "1.8"
        },
        # system properties
        "vendor" : {
            # system properties
            "url" : {
                # system properties
                "bug" : "http://bugreport.sun.com/bugreport/"
            }
        },
        # system properties
        "version" : "1.8.0_03-Ubuntu",
        # system properties
        "vm" : {
            # system properties
            "info" : "mixed mode",
            # system properties
            "name" : "OpenJDK 64-Bit Server VM",
            # system properties
            "specification" : {
                # system properties
                "name" : "Java Virtual Machine Specification",
                # system properties
                "vendor" : "Oracle Corporation",
                # system properties
                "version" : "1.8"
            },
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "25.03-b03"
        }
    },
    # system properties
    "line" : {
        # system properties
        "separator" : "\n"
    },
    # system properties
    "os" : {
        # system properties
        "arch" : "amd64",
        # system properties
        "name" : "Linux",
        # system properties
        "version" : "4.4.0-21-generic"
    },
    # system properties
    "path" : {
        # system properties
        "separator" : ":"
    },
    # merge of String: 2,application.conf: 119-166
    "safe" : {
        # application.conf: 161
        # Configuration for multi-principal programming
        "multiprincipal" : {
            # application.conf: 163
            # dir of the access keys
            "accessKeyDir" : "src/main/resources/access-keys/",
            # application.conf: 162
            # dir of the keys of the multiple principals 
            "keyPairDir" : "src/main/resources/multi-principal-keys/"
        },
        # application.conf: 154-166
        "safesets" : {
            # application.conf: 154
            "cache" : {
                # application.conf: 157
                # in simple client mode, not many concurrent requests are made
                "concurrency" : 2,
                # application.conf: 155
                # 2^16 * 1kB ~ 64MB
                "initialCapacity" : 65536,
                # application.conf: 156
                # reblance after reaching this limit
                "loadFactor" : "0.75f"
            },
            # application.conf: 167
            "requestTimeout" : "30s",
            # application.conf: 182
            # storeURI = "http://152.3.145.36:808/types/safesets/buckets/safe/keys"
            "storeURI" : "https://152.3.145.36:8098/types/safesets/buckets/safe/keys"
        },
        # merge of String: 2,application.conf: 120
        "service" : {
            # application.conf: 130
            "ask-timeout" : "251s",
            # application.conf: 135
            "branchingFactor" : 0.5,
            # application.conf: 133
            "cacheSize" : 4048576,
            # application.conf: 136
            "dirName" : "/home/vamsi/safeliteBenchmark/data",
            # application.conf: 142
            "fetchPolicy" : "test",
            # application.conf: 123
            # interface = localhost
            # interface = 152.3.144.16
            "interface" : "152.3.136.36",
            # application.conf: 146
            "numSlices" : 256,
            # String: 2
            "port" : 7777,
            # application.conf: 140
            "prefetchPolicy" : "preloadAndMaterialize",
            # application.conf: 131
            "requestTimeout" : "30s",
            # application.conf: 145
            # fetchPolicy = buildFromView
            # fetchPolicy = fetchFromView
            "userSize" : 16
        }
    },
    # application.conf: 42-53
    "safelang" : {
        # application.conf: 63
        "akkaTimeout" : "30s",
        # application.conf: 60
        "compilePath" : "compiledTarget",
        # application.conf: 61
        "credentialPath" : "credentialTarget",
        # application.conf: 57
        "intraQueryParallelism" : false,
        # application.conf: 49
        "jvmCompilerPath" : ".",
        # application.conf: 67
        "localSafeSets" : false,
        # application.conf: 75
        "logicEngine" : "styla",
        # application.conf: 54
        "loglevel" : "OFF",
        # application.conf: 85
        "metastore" : {
            # application.conf: 87
            "protocol" : "http",
            # application.conf: 88
            "serverID" : "",
            # application.conf: 86
            "url" : "http://152.3.145.36:8098/types/safesets/buckets/safe/keys"
        },
        # application.conf: 68
        "minContextRefreshTimeInMillis" : 1000,
        # application.conf: 71
        "perfCollectorOn" : false,
        # application.conf: 62
        "resultCache" : false,
        # application.conf: 66
        # For use of local safesets
        "safeSetsDir" : "src/main/resources/local-safesets/",
        # application.conf: 58
        "saysOperator" : true,
        # application.conf: 59
        "self" : "Self",
        # application.conf: 79
        # selfCertifyingSetToken=true
        "selfCertifyingSetToken" : false,
        # application.conf: 48
        "selfId" : "SelfId",
        # application.conf: 69
        "slangPerfFile" : "slangPerf",
        # application.conf: 81
        "ssl" : {
            # application.conf: 82
            "keystorepath" : "src/main/resources/ssl-keystores/clientkeystore.pkcs12"
        }
    },
    # application.conf: 103
    "safelog" : {
        # application.conf: 105
        "maxDepth" : 1111111,
        # application.conf: 104
        "saysOperator" : false
    },
    # application.conf: 108
    "saferuntime" : {
        # application.conf: 109
        "jvmCompilerPath" : "."
    },
    # application.conf: 112
    "safestyla" : {
        # application.conf: 113
        "indexing" : "primary",
        # application.conf: 115
        # indexing = tertiary  # for speaksfor
        "libraryOn" : true
    },
    # merge of application.conf: 36-87,reference.conf: 8
    "spray" : {
        # merge of application.conf: 36-42,reference.conf: 8
        "can" : {
            # merge of application.conf: 43,reference.conf: 189
            "client" : {
                # reference.conf: 239
                # Enables/disables an alternative request streaming mode that doesn't
                # use `Transfer-Encoding: chunked` but rather renders the individual
                # MessageChunks coming in from the application as parts of the original
                # request entity.
                # Enabling this mode causes all requests to require an explicit `Content-Length`
                # header for streaming requests.
                # Note that chunkless-streaming is implicitly enabled when streaming
                # HTTP/1.0 requests since they don't support `Transfer-Encoding: chunked`.
                "chunkless-streaming" : "off",
                # reference.conf: 254
                # The time period within which the TCP connecting process must be completed.
                # Set to `infinite` to disable.
                "connecting-timeout" : "10s",
                # application.conf: 45
                "idle-timeout" : "501s",
                # reference.conf: 250
                # For HTTPS connections this setting specified the maximum number of
                # bytes that are encrypted in one go. Large requests are broken down in
                # chunks of this size so as to already begin sending before the request has
                # been encrypted entirely.
                "max-encryption-chunk-size" : "1m",
                # reference.conf: 320
                # The (default) configuration of the HTTP message parser for the server and
                # the client.
                # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
                # overridden in `application.conf` to change the parser settings for client and server
                # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
                # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
                # where these settings are copied to.
                "parsing" : {
                    # reference.conf: 357
                    # limits for the number of different values per header type that the
                    # header cache will hold
                    "header-cache" : {
                        # reference.conf: 359
                        "Content-MD5" : 0,
                        # reference.conf: 360
                        "Date" : 0,
                        # reference.conf: 361
                        "If-Match" : 0,
                        # reference.conf: 362
                        "If-Modified-Since" : 0,
                        # reference.conf: 363
                        "If-None-Match" : 0,
                        # reference.conf: 364
                        "If-Range" : 0,
                        # reference.conf: 365
                        "If-Unmodified-Since" : 0,
                        # reference.conf: 366
                        "User-Agent" : 32,
                        # reference.conf: 358
                        "default" : 12
                    },
                    # reference.conf: 353
                    # Enables/disables the logging of warning messages in case an incoming
                    # message (request or response) contains an HTTP header which cannot be
                    # parsed into its high-level model class due to incompatible syntax.
                    # Note that, independently of this settings, spray will accept messages
                    # with such headers as long as the message as a whole would still be legal
                    # under the HTTP specification even without this header.
                    # If a header cannot be parsed into a high-level model instance it will be
                    # provided as a `RawHeader`.
                    "illegal-header-warnings" : "on",
                    # reference.conf: 372
                    # Sets the size starting from which incoming http-messages will be delivered
                    # in chunks regardless of whether chunking is actually used on the wire.
                    # Set to infinite to disable auto chunking.
                    "incoming-auto-chunking-threshold-size" : "infinite",
                    # reference.conf: 328
                    "max-chunk-ext-length" : 256,
                    # reference.conf: 329
                    "max-chunk-size" : "1m",
                    # reference.conf: 327
                    "max-content-length" : "8m",
                    # reference.conf: 326
                    "max-header-count" : 64,
                    # reference.conf: 324
                    "max-header-name-length" : 64,
                    # reference.conf: 325
                    "max-header-value-length" : "8k",
                    # reference.conf: 323
                    "max-response-reason-length" : 64,
                    # reference.conf: 322
                    # The limits for the various parts of the HTTP message parser.
                    "max-uri-length" : "2k",
                    # reference.conf: 377
                    # Enables/disables inclusion of an SSL-Session-Info header in parsed
                    # messages over SSL transports (i.e., HttpRequest on server side and
                    # HttpResponse on client side).
                    "ssl-session-info-header" : "off",
                    # reference.conf: 343
                    # Sets the strictness mode for parsing request target URIs.
                    # The following values are defined:
                    # 
                    # `strict`: RFC3986-compliant URIs are required,
                    #     a 400 response is triggered on violations
                    # 
                    # `relaxed`: all visible 7-Bit ASCII chars are allowed
                    # 
                    # `relaxed-with-raw-query`: like `relaxed` but additionally
                    #     the URI query is not parsed, but delivered as one raw string
                    #     as the `key` value of a single Query structure element.
                    # 
                    "uri-parsing-mode" : "strict"
                },
                # reference.conf: 258
                # The proxy configurations to be used for requests with the specified
                # scheme.
                "proxy" : {
                    # reference.conf: 269
                    # Proxy settings for unencrypted HTTP requests
                    # Set to 'none' to always connect directly, 'default' to use the system
                    # settings as described in http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html
                    # or specify the proxy host, port and non proxy hosts as demonstrated
                    # in the following example:
                    # http {
                    #   host = myproxy.com
                    #   port = 8080
                    #   non-proxy-hosts = ["*.direct-access.net"]
                    # }
                    "http" : "default",
                    # reference.conf: 272
                    # Proxy settings for HTTPS requests (currently unsupported)
                    "https" : "default"
                },
                # reference.conf: 219
                # the "granularity" of timeout checking for both idle connections timeouts
                # as well as request timeouts, should rarely be needed to modify.
                # If set to `infinite` request and connection timeout checking is disabled.
                "reaping-cycle" : "250 ms",
                # reference.conf: 244
                # The initial size if the buffer to render the request headers in.
                # Can be used for fine-tuning request rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "request-header-size-hint" : 512,
                # application.conf: 44
                "request-timeout" : "500s",
                # reference.conf: 229
                # If this setting is non-zero the HTTP client connections automatically
                # aggregate incoming response chunks into full HttpResponses before
                # dispatching them to the application.
                # If the size of the aggregated response surpasses the specified limit the
                # HTTP client connection is closed and an error returned.
                # Set to zero to disable automatic request chunk aggregation and have
                # ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be
                # dispatched to the application.
                "response-chunk-aggregation-limit" : "1m",
                # reference.conf: 276
                # Enables more verbose DEBUG logging for debugging SSL related issues.
                "ssl-tracing" : "off",
                # reference.conf: 12-194
                # Always contains the deployed version of spray.
                # Referenced, for example, from the `spray.can.server.server-header` setting.
                "user-agent-header" : "spray-can/1.3.3"
            },
            # reference.conf: 398
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for HttpServerConnection and HttpClientConnection actors.
            "connection-dispatcher" : "akka.actor.default-dispatcher",
            # merge of application.conf: 48,reference.conf: 282
            "host-connector" : {
                # reference.conf: 189
                "client" : {
                    # reference.conf: 239
                    # Enables/disables an alternative request streaming mode that doesn't
                    # use `Transfer-Encoding: chunked` but rather renders the individual
                    # MessageChunks coming in from the application as parts of the original
                    # request entity.
                    # Enabling this mode causes all requests to require an explicit `Content-Length`
                    # header for streaming requests.
                    # Note that chunkless-streaming is implicitly enabled when streaming
                    # HTTP/1.0 requests since they don't support `Transfer-Encoding: chunked`.
                    "chunkless-streaming" : "off",
                    # reference.conf: 254
                    # The time period within which the TCP connecting process must be completed.
                    # Set to `infinite` to disable.
                    "connecting-timeout" : "10s",
                    # reference.conf: 198
                    # The time after which an idle connection will be automatically closed.
                    # Set to `infinite` to completely disable idle timeouts.
                    "idle-timeout" : "60 s",
                    # reference.conf: 250
                    # For HTTPS connections this setting specified the maximum number of
                    # bytes that are encrypted in one go. Large requests are broken down in
                    # chunks of this size so as to already begin sending before the request has
                    # been encrypted entirely.
                    "max-encryption-chunk-size" : "1m",
                    # reference.conf: 320
                    # The (default) configuration of the HTTP message parser for the server and
                    # the client.
                    # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
                    # overridden in `application.conf` to change the parser settings for client and server
                    # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
                    # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
                    # where these settings are copied to.
                    "parsing" : {
                        # reference.conf: 357
                        # limits for the number of different values per header type that the
                        # header cache will hold
                        "header-cache" : {
                            # reference.conf: 359
                            "Content-MD5" : 0,
                            # reference.conf: 360
                            "Date" : 0,
                            # reference.conf: 361
                            "If-Match" : 0,
                            # reference.conf: 362
                            "If-Modified-Since" : 0,
                            # reference.conf: 363
                            "If-None-Match" : 0,
                            # reference.conf: 364
                            "If-Range" : 0,
                            # reference.conf: 365
                            "If-Unmodified-Since" : 0,
                            # reference.conf: 366
                            "User-Agent" : 32,
                            # reference.conf: 358
                            "default" : 12
                        },
                        # reference.conf: 353
                        # Enables/disables the logging of warning messages in case an incoming
                        # message (request or response) contains an HTTP header which cannot be
                        # parsed into its high-level model class due to incompatible syntax.
                        # Note that, independently of this settings, spray will accept messages
                        # with such headers as long as the message as a whole would still be legal
                        # under the HTTP specification even without this header.
                        # If a header cannot be parsed into a high-level model instance it will be
                        # provided as a `RawHeader`.
                        "illegal-header-warnings" : "on",
                        # reference.conf: 372
                        # Sets the size starting from which incoming http-messages will be delivered
                        # in chunks regardless of whether chunking is actually used on the wire.
                        # Set to infinite to disable auto chunking.
                        "incoming-auto-chunking-threshold-size" : "infinite",
                        # reference.conf: 328
                        "max-chunk-ext-length" : 256,
                        # reference.conf: 329
                        "max-chunk-size" : "1m",
                        # reference.conf: 327
                        "max-content-length" : "8m",
                        # reference.conf: 326
                        "max-header-count" : 64,
                        # reference.conf: 324
                        "max-header-name-length" : 64,
                        # reference.conf: 325
                        "max-header-value-length" : "8k",
                        # reference.conf: 323
                        "max-response-reason-length" : 64,
                        # reference.conf: 322
                        # The limits for the various parts of the HTTP message parser.
                        "max-uri-length" : "2k",
                        # reference.conf: 377
                        # Enables/disables inclusion of an SSL-Session-Info header in parsed
                        # messages over SSL transports (i.e., HttpRequest on server side and
                        # HttpResponse on client side).
                        "ssl-session-info-header" : "off",
                        # reference.conf: 343
                        # Sets the strictness mode for parsing request target URIs.
                        # The following values are defined:
                        # 
                        # `strict`: RFC3986-compliant URIs are required,
                        #     a 400 response is triggered on violations
                        # 
                        # `relaxed`: all visible 7-Bit ASCII chars are allowed
                        # 
                        # `relaxed-with-raw-query`: like `relaxed` but additionally
                        #     the URI query is not parsed, but delivered as one raw string
                        #     as the `key` value of a single Query structure element.
                        # 
                        "uri-parsing-mode" : "strict"
                    },
                    # reference.conf: 258
                    # The proxy configurations to be used for requests with the specified
                    # scheme.
                    "proxy" : {
                        # reference.conf: 269
                        # Proxy settings for unencrypted HTTP requests
                        # Set to 'none' to always connect directly, 'default' to use the system
                        # settings as described in http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html
                        # or specify the proxy host, port and non proxy hosts as demonstrated
                        # in the following example:
                        # http {
                        #   host = myproxy.com
                        #   port = 8080
                        #   non-proxy-hosts = ["*.direct-access.net"]
                        # }
                        "http" : "default",
                        # reference.conf: 272
                        # Proxy settings for HTTPS requests (currently unsupported)
                        "https" : "default"
                    },
                    # reference.conf: 219
                    # the "granularity" of timeout checking for both idle connections timeouts
                    # as well as request timeouts, should rarely be needed to modify.
                    # If set to `infinite` request and connection timeout checking is disabled.
                    "reaping-cycle" : "250 ms",
                    # reference.conf: 244
                    # The initial size if the buffer to render the request headers in.
                    # Can be used for fine-tuning request rendering performance but probably
                    # doesn't have to be fiddled with in most applications.
                    "request-header-size-hint" : 512,
                    # reference.conf: 214
                    # The max time period that a client connection will be waiting for a response
                    # before triggering a request timeout. The timer for this logic is not started
                    # until the connection is actually in a state to receive the response, which
                    # may be quite some time after the request has been received from the
                    # application!
                    # There are two main reasons to delay the start of the request timeout timer:
                    # 1. On the host-level API with pipelining disabled:
                    #    If the request cannot be sent immediately because all connections are
                    #    currently busy with earlier requests it has to be queued until a
                    #    connection becomes available.
                    # 2. With pipelining enabled:
                    #    The request timeout timer starts only once the response for the
                    #    preceding request on the connection has arrived.
                    # Set to `infinite` to completely disable request timeouts.
                    "request-timeout" : "20 s",
                    # reference.conf: 229
                    # If this setting is non-zero the HTTP client connections automatically
                    # aggregate incoming response chunks into full HttpResponses before
                    # dispatching them to the application.
                    # If the size of the aggregated response surpasses the specified limit the
                    # HTTP client connection is closed and an error returned.
                    # Set to zero to disable automatic request chunk aggregation and have
                    # ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be
                    # dispatched to the application.
                    "response-chunk-aggregation-limit" : "1m",
                    # reference.conf: 276
                    # Enables more verbose DEBUG logging for debugging SSL related issues.
                    "ssl-tracing" : "off",
                    # reference.conf: 12-194
                    # Always contains the deployed version of spray.
                    # Referenced, for example, from the `spray.can.server.server-header` setting.
                    "user-agent-header" : "spray-can/1.3.3"
                },
                # reference.conf: 307
                # The time after which an idle `HttpHostConnector` (without open
                # connections) will automatically terminate itself.
                # Set to `infinite` to completely disable idle timeouts.
                "idle-timeout" : "30 s",
                # application.conf: 49
                "max-connections" : 10000,
                # reference.conf: 297
                # Configures redirection following.
                # If set to zero redirection responses will not be followed, i.e. they'll be returned to the user as is.
                # If set to a value > zero redirection responses will be followed up to the given number of times.
                # If the redirection chain is longer than the configured value the first redirection response that is
                # is not followed anymore is returned to the user as is.
                "max-redirects" : 0,
                # reference.conf: 290
                # The maximum number of times an `HttpHostConnector` attempts to repeat
                # failed requests (if the request can be safely retried) before
                # giving up and returning an error.
                "max-retries" : 5,
                # reference.conf: 302
                # If this setting is enabled, the `HttpHostConnector` pipelines requests
                # across connections, otherwise only one single request can be "open"
                # on a particular HTTP connection.
                "pipelining" : "off"
            },
            # reference.conf: 390
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for the HttpHostConnector actors.
            "host-connector-dispatcher" : "akka.actor.default-dispatcher",
            # reference.conf: 394
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for HttpListener actors.
            "listener-dispatcher" : "akka.actor.default-dispatcher",
            # reference.conf: 382
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for the HttpManager.
            "manager-dispatcher" : "akka.actor.default-dispatcher",
            # reference.conf: 320
            # The (default) configuration of the HTTP message parser for the server and
            # the client.
            # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
            # overridden in `application.conf` to change the parser settings for client and server
            # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
            # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
            # where these settings are copied to.
            "parsing" : {
                # reference.conf: 357
                # limits for the number of different values per header type that the
                # header cache will hold
                "header-cache" : {
                    # reference.conf: 359
                    "Content-MD5" : 0,
                    # reference.conf: 360
                    "Date" : 0,
                    # reference.conf: 361
                    "If-Match" : 0,
                    # reference.conf: 362
                    "If-Modified-Since" : 0,
                    # reference.conf: 363
                    "If-None-Match" : 0,
                    # reference.conf: 364
                    "If-Range" : 0,
                    # reference.conf: 365
                    "If-Unmodified-Since" : 0,
                    # reference.conf: 366
                    "User-Agent" : 32,
                    # reference.conf: 358
                    "default" : 12
                },
                # reference.conf: 353
                # Enables/disables the logging of warning messages in case an incoming
                # message (request or response) contains an HTTP header which cannot be
                # parsed into its high-level model class due to incompatible syntax.
                # Note that, independently of this settings, spray will accept messages
                # with such headers as long as the message as a whole would still be legal
                # under the HTTP specification even without this header.
                # If a header cannot be parsed into a high-level model instance it will be
                # provided as a `RawHeader`.
                "illegal-header-warnings" : "on",
                # reference.conf: 372
                # Sets the size starting from which incoming http-messages will be delivered
                # in chunks regardless of whether chunking is actually used on the wire.
                # Set to infinite to disable auto chunking.
                "incoming-auto-chunking-threshold-size" : "infinite",
                # reference.conf: 328
                "max-chunk-ext-length" : 256,
                # reference.conf: 329
                "max-chunk-size" : "1m",
                # reference.conf: 327
                "max-content-length" : "8m",
                # reference.conf: 326
                "max-header-count" : 64,
                # reference.conf: 324
                "max-header-name-length" : 64,
                # reference.conf: 325
                "max-header-value-length" : "8k",
                # reference.conf: 323
                "max-response-reason-length" : 64,
                # reference.conf: 322
                # The limits for the various parts of the HTTP message parser.
                "max-uri-length" : "2k",
                # reference.conf: 377
                # Enables/disables inclusion of an SSL-Session-Info header in parsed
                # messages over SSL transports (i.e., HttpRequest on server side and
                # HttpResponse on client side).
                "ssl-session-info-header" : "off",
                # reference.conf: 343
                # Sets the strictness mode for parsing request target URIs.
                # The following values are defined:
                # 
                # `strict`: RFC3986-compliant URIs are required,
                #     a 400 response is triggered on violations
                # 
                # `relaxed`: all visible 7-Bit ASCII chars are allowed
                # 
                # `relaxed-with-raw-query`: like `relaxed` but additionally
                #     the URI query is not parsed, but delivered as one raw string
                #     as the `key` value of a single Query structure element.
                # 
                "uri-parsing-mode" : "strict"
            },
            # merge of application.conf: 36,reference.conf: 10
            "server" : {
                # reference.conf: 168
                # Enables/disables automatic back-pressure handling by write buffering and
                # receive throttling
                "automatic-back-pressure-handling" : "on",
                # reference.conf: 170
                "back-pressure" : {
                    # reference.conf: 174
                    # The reciprocal rate of requested Acks per NoAcks. E.g. the default value
                    # '10' means that every 10th write request is acknowledged. This affects the
                    # number of writes each connection has to buffer even in absence of back-pressure.
                    "noack-rate" : 10,
                    # reference.conf: 179
                    # The lower limit the write queue size has to shrink to before reads are resumed.
                    # Use 'infinite' to disable the low-watermark so that reading is resumed instantly
                    # after the next successful write.
                    "reading-low-watermark" : "infinite"
                },
                # reference.conf: 136
                # The time period within which the TCP binding process must be completed.
                # Set to `infinite` to disable.
                "bind-timeout" : "1s",
                # reference.conf: 55
                # The period during which a service must respond to a `ChunkedRequestStart` message
                # with a `RegisterChunkHandler` message. During the registration period reading from
                # the network is suspended. It is still possible that some chunks have already been
                # received which will be buffered until the registration is received or the timeout is
                # triggered. If the timeout is triggered the connection is immediately aborted.
                "chunkhandler-registration-timeout" : "500 ms",
                # reference.conf: 98
                # Enables/disables an alternative response streaming mode that doesn't
                # use `Transfer-Encoding: chunked` but rather renders the individual
                # MessageChunks coming in from the application as parts of the original
                # response entity.
                # Enabling this mode causes all connections to be closed after a streaming
                # response has been finished since there is no other way to signal the
                # response end to the client.
                # Note that chunkless-streaming is implicitly enabled when streaming
                # responses to HTTP/1.0 clients (since they don't support
                # `Transfer-Encoding: chunked`)
                "chunkless-streaming" : "off",
                # reference.conf: 164
                # If this setting is empty the server only accepts requests that carry a
                # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
                # Set to a non-empty value to be used in lieu of a missing or empty `Host`
                # header to make the server accept such requests.
                # Note that the server will never accept HTTP/1.1 request without a `Host`
                # header, i.e. this setting only affects HTTP/1.1 requests with an empty
                # `Host` header as well as HTTP/1.0 requests.
                # Examples: `www.spray.io` or `example.com:8080`
                "default-host-header" : "",
                # application.conf: 38
                "idle-timeout" : "501s",
                # application.conf: 39
                "max-connections" : 100000,
                # reference.conf: 132
                # For HTTPS connections this setting specified the maximum number of
                # bytes that are encrypted in one go. Large responses are broken down in
                # chunks of this size so as to already begin sending before the response has
                # been encrypted entirely.
                "max-encryption-chunk-size" : "1m",
                # reference.conf: 320
                # The (default) configuration of the HTTP message parser for the server and
                # the client.
                # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
                # overridden in `application.conf` to change the parser settings for client and server
                # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
                # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
                # where these settings are copied to.
                "parsing" : {
                    # reference.conf: 357
                    # limits for the number of different values per header type that the
                    # header cache will hold
                    "header-cache" : {
                        # reference.conf: 359
                        "Content-MD5" : 0,
                        # reference.conf: 360
                        "Date" : 0,
                        # reference.conf: 361
                        "If-Match" : 0,
                        # reference.conf: 362
                        "If-Modified-Since" : 0,
                        # reference.conf: 363
                        "If-None-Match" : 0,
                        # reference.conf: 364
                        "If-Range" : 0,
                        # reference.conf: 365
                        "If-Unmodified-Since" : 0,
                        # reference.conf: 366
                        "User-Agent" : 32,
                        # reference.conf: 358
                        "default" : 12
                    },
                    # reference.conf: 353
                    # Enables/disables the logging of warning messages in case an incoming
                    # message (request or response) contains an HTTP header which cannot be
                    # parsed into its high-level model class due to incompatible syntax.
                    # Note that, independently of this settings, spray will accept messages
                    # with such headers as long as the message as a whole would still be legal
                    # under the HTTP specification even without this header.
                    # If a header cannot be parsed into a high-level model instance it will be
                    # provided as a `RawHeader`.
                    "illegal-header-warnings" : "on",
                    # reference.conf: 372
                    # Sets the size starting from which incoming http-messages will be delivered
                    # in chunks regardless of whether chunking is actually used on the wire.
                    # Set to infinite to disable auto chunking.
                    "incoming-auto-chunking-threshold-size" : "infinite",
                    # reference.conf: 328
                    "max-chunk-ext-length" : 256,
                    # reference.conf: 329
                    "max-chunk-size" : "1m",
                    # reference.conf: 327
                    "max-content-length" : "8m",
                    # reference.conf: 326
                    "max-header-count" : 64,
                    # reference.conf: 324
                    "max-header-name-length" : 64,
                    # reference.conf: 325
                    "max-header-value-length" : "8k",
                    # reference.conf: 323
                    "max-response-reason-length" : 64,
                    # reference.conf: 322
                    # The limits for the various parts of the HTTP message parser.
                    "max-uri-length" : "2k",
                    # reference.conf: 377
                    # Enables/disables inclusion of an SSL-Session-Info header in parsed
                    # messages over SSL transports (i.e., HttpRequest on server side and
                    # HttpResponse on client side).
                    "ssl-session-info-header" : "off",
                    # reference.conf: 343
                    # Sets the strictness mode for parsing request target URIs.
                    # The following values are defined:
                    # 
                    # `strict`: RFC3986-compliant URIs are required,
                    #     a 400 response is triggered on violations
                    # 
                    # `relaxed`: all visible 7-Bit ASCII chars are allowed
                    # 
                    # `relaxed-with-raw-query`: like `relaxed` but additionally
                    #     the URI query is not parsed, but delivered as one raw string
                    #     as the `key` value of a single Query structure element.
                    # 
                    "uri-parsing-mode" : "strict"
                },
                # reference.conf: 154
                # The time after which a connection is aborted (RST) after a parsing error
                # occurred. The timeout prevents a connection which is already known to be
                # erroneous from receiving evermore data even if all of the data will be ignored.
                # However, in case of a connection abortion the client usually doesn't properly
                # receive the error response. This timeout is a trade-off which allows the client
                # some time to finish its request and receive a proper error response before the
                # connection is forcibly closed to free resources.
                "parsing-error-abort-timeout" : "2s",
                # reference.conf: 33
                # The maximum number of requests that are accepted (and dispatched to
                # the application) on one single connection before the first request
                # has to be completed.
                # Incoming requests that would cause the pipelining limit to be exceeded
                # are not read from the connections socket so as to build up "back-pressure"
                # to the client via TCP flow control.
                # A setting of 1 disables HTTP pipelining, since only one request per
                # connection can be "open" (i.e. being processed by the application) at any
                # time. Set to higher values to enable HTTP pipelining.
                # Set to 'disabled' for completely disabling pipelining limits
                # (not recommended on public-facing servers due to risk of DoS attacks).
                # This value must be > 0 and <= 128.
                "pipelining-limit" : 1,
                # reference.conf: 78
                # Enables/disables the addition of a `Raw-Request-URI` header holding the
                # original raw request URI as the client has sent it.
                "raw-request-uri-header" : "off",
                # reference.conf: 65
                # The "granularity" of timeout checking for both idle connections timeouts
                # as well as request timeouts, should rarely be needed to modify.
                # If set to `infinite` request and connection timeout checking is disabled.
                "reaping-cycle" : "250 ms",
                # reference.conf: 145
                # The time period within which a connection handler must have been
                # registered after the bind handler has received a `Connected` event.
                # Set to `infinite` to disable.
                "registration-timeout" : "1s",
                # reference.conf: 74
                # Enables/disables the addition of a `Remote-Address` header
                # holding the clients (remote) IP address.
                "remote-address-header" : "off",
                # reference.conf: 121
                # If this setting is non-zero the HTTP server automatically aggregates
                # incoming request chunks into full HttpRequests before dispatching them to
                # the application. If the size of the aggregated requests surpasses the
                # specified limit the server responds with a `413 Request Entity Too Large`
                # error response before closing the connection.
                # Set to zero to disable automatic request chunk aggregation and have
                # ChunkedRequestStart, MessageChunk and ChunkedMessageEnd messages be
                # dispatched to the handler.
                "request-chunk-aggregation-limit" : "1m",
                # application.conf: 37
                "request-timeout" : "500s",
                # reference.conf: 126
                # The initial size if the buffer to render the response headers in.
                # Can be used for fine-tuning response rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "response-header-size-hint" : 512,
                # reference.conf: 12-13
                # Always contains the deployed version of spray.
                # Referenced, for example, from the `spray.can.server.server-header` setting.
                "server-header" : "spray-can/1.3.3",
                # reference.conf: 19
                # Enables/disables SSL encryption.
                # If enabled the server uses the implicit `ServerSSLEngineProvider` member
                # of the `Bind` command to create `SSLEngine` instances for the underlying
                # IO connection.
                "ssl-encryption" : "off",
                # reference.conf: 183
                # Enables more verbose DEBUG logging for debugging SSL related issues.
                "ssl-tracing" : "off",
                # reference.conf: 70
                # Enables/disables support for statistics collection and querying.
                # Even though stats keeping overhead is small,
                # for maximum performance switch off when not needed.
                "stats-support" : "on",
                # reference.conf: 60
                # The path of the actor to send `spray.http.Timedout` messages to.
                # If empty all `Timedout` messages will go to the "regular" request
                # handling actor.
                "timeout-handler" : "",
                # reference.conf: 48
                # After a `Timedout` message has been sent to the timeout handler and the
                # request still hasn't been completed after the time period set here
                # the server will complete the request itself with an error response.
                # Set to `infinite` to disable timeout timeouts.
                "timeout-timeout" : "2 s",
                # reference.conf: 86
                # Enables/disables automatic handling of HEAD requests.
                # If this setting is enabled the server dispatches HEAD requests as GET
                # requests to the application and automatically strips off all message
                # bodies from outgoing responses.
                # Note that, even when this setting is off the server will never send
                # out message bodies on responses to HEAD requests.
                "transparent-head-requests" : "on",
                # reference.conf: 140
                # The time period within which the TCP unbinding process must be completed.
                # Set to `infinite` to disable.
                "unbind-timeout" : "1s",
                # reference.conf: 111
                # Enables/disables the logging of the full (potentially multiple line)
                # error message to the server logs.
                # If disabled only a single line will be logged.
                "verbose-error-logging" : "off",
                # reference.conf: 106
                # Enables/disables the returning of more detailed error messages to
                # the client in the error response.
                # Should be disabled for browser-facing APIs due to the risk of XSS attacks
                # and (probably) enabled for internal or non-browser APIs.
                # Note that spray will always produce log messages containing the full
                # error details.
                "verbose-error-messages" : "off"
            },
            # reference.conf: 386
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for the HttpClientSettingsGroup actors.
            "settings-group-dispatcher" : "akka.actor.default-dispatcher"
        },
        # application.conf: 87
        "client" : {
            # application.conf: 90
            # the maximum number of parallel connections that an HttpConduit
            # is allowed to establish to a host, must be greater than zero
            "max-connections" : 100000
        },
        # reference.conf: 8
        "routing" : {
            # reference.conf: 22
            # the size of an individual chunk when streaming file content
            "file-chunking-chunk-size" : "128k",
            # reference.conf: 19
            # the minimal file size triggering file content streaming
            # set to zero to disable automatic file-chunking in the FileAndResourceDirectives
            "file-chunking-threshold-size" : "128k",
            # reference.conf: 25
            # Enables/disables ETag and `If-Modified-Since` support for FileAndResourceDirectives
            "file-get-conditional" : "on",
            # reference.conf: 38
            # the maximum size between two requested ranges.
            # Ranges with less space in between will be coalesced.
            "range-coalescing-threshold" : 80,
            # reference.conf: 42
            # the maximum number of allowed ranges per request.
            # Requests with more ranges will be rejected due to DOS suspicion.
            "range-count-limit" : 16,
            # reference.conf: 28
            # Enables/disables the rendering of the "rendered by" footer in directory listings
            "render-vanity-footer" : "yes",
            # reference.conf: 32
            # a config section holding plain-text user/password entries
            # for the default FromConfigUserPassAuthenticator
            "users" : {},
            # reference.conf: 15
            # Enables/disables the returning of more detailed error messages to the
            # client in the error response
            # Should be disabled for browser-facing APIs due to the risk of XSS attacks
            # and (probably) enabled for internal or non-browser APIs
            # (Note that spray will always produce log messages containing the full error details)
            "verbose-error-messages" : "off"
        },
        # reference.conf: 12
        # Always contains the deployed version of spray.
        # Referenced, for example, from the `spray.can.server.server-header` setting.
        "version" : "1.3.3"
    },
    # system properties
    "sun" : {
        # system properties
        "arch" : {
            # system properties
            "data" : {
                # system properties
                "model" : "64"
            }
        },
        # system properties
        "boot" : {
            # system properties
            "class" : {
                # system properties
                "path" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes"
            },
            # system properties
            "library" : {
                # system properties
                "path" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64"
            }
        },
        # system properties
        "cpu" : {
            # system properties
            "endian" : "little",
            # system properties
            "isalist" : ""
        },
        # system properties
        "io" : {
            # system properties
            "unicode" : {
                # system properties
                "encoding" : "UnicodeLittle"
            }
        },
        # system properties
        "java" : {
            # system properties
            "command" : "safe.server.BootService -f /home/yaoyj11/project/exo-geni/safe/super-safe/safe-apps/safe-network/exo-geni/stitch-routing.slang -r safeService -kd src/main/resources/key",
            # system properties
            "launcher" : "SUN_STANDARD"
        },
        # system properties
        "jnu" : {
            # system properties
            "encoding" : "UTF-8"
        },
        # system properties
        "management" : {
            # system properties
            "compiler" : "HotSpot 64-Bit Tiered Compilers"
        },
        # system properties
        "os" : {
            # system properties
            "patch" : {
                # system properties
                "level" : "unknown"
            }
        }
    },
    # system properties
    "user" : {
        # system properties
        "country" : "US",
        # system properties
        "dir" : "/home/yaoyj11/project/exo-geni/safe/super-safe/safe-server",
        # system properties
        "home" : "/home/yaoyj11",
        # system properties
        "language" : "en",
        # system properties
        "name" : "yaoyj11",
        # system properties
        "timezone" : ""
    }
}

HTTP service: 152.3.136.36:7777
2017-06-152 13:51:30.659 [main] [34mINFO [0;39m [36mBootService$[0;39m [32m{safe.server.BootService$ startRestService}[0;39m - HTTP service: 152.3.136.36:7777
2017-06-152 13:51:30.708 [Safelang-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSlf4jLogger[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1 applyOrElse}[0;39m - Slf4jLogger started
2017-06-152 13:51:30.713 [Safelang-akka.actor.default-dispatcher-5] [34mINFO [0;39m [36mActorSystemImpl[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - {
    # merge of application.conf: 22-24,reference.conf: 7-77
    "akka" : {
        # merge of application.conf: 29,reference.conf: 10-226
        # Protobuf serializer for cluster DistributedPubSubMeditor messages
        # Protobuf serializer for cluster messages
        # Protobuf serialization for persistent messages
        "actor" : {
            # reference.conf: 74
            # Timeout for ActorSystem.actorOf
            "creation-timeout" : "20s",
            # merge of application.conf: 29,reference.conf: 418
            "debug" : {
                # application.conf: 31
                "autoreceive" : "on",
                # reference.conf: 434
                # enable DEBUG logging of subscription changes on the eventStream
                "event-stream" : "off",
                # reference.conf: 431
                # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
                "fsm" : "off",
                # application.conf: 32
                "lifecycle" : "on",
                # application.conf: 30
                "receive" : "on",
                # reference.conf: 440
                # enable WARN logging of misconfigured routers
                "router-misconfiguration" : "off",
                # reference.conf: 437
                # enable DEBUG logging of unhandled messages
                "unhandled" : "off"
            },
            # reference.conf: 238
            "default-dispatcher" : {
                # reference.conf: 334
                # For BalancingDispatcher: If the balancing dispatcher should attempt to
                # schedule idle actors using the same dispatcher when a message comes in,
                # and the dispatchers ExecutorService is not fully busy already.
                "attempt-teamwork" : "on",
                # reference.conf: 263
                # This will be used if you have set "executor = "default-executor"".
                # If an ActorSystem is created with a given ExecutionContext, this
                # ExecutionContext will be used as the default executor for all
                # dispatchers in the ActorSystem configured with
                # executor = "default-executor". Note that "default-executor"
                # is the default value for executor, and therefore used if not
                # specified otherwise. If no ExecutionContext is given,
                # the executor configured in "fallback" will be used.
                "default-executor" : {
                    # reference.conf: 264
                    "fallback" : "fork-join-executor"
                },
                # reference.conf: 253
                # Which kind of ExecutorService to use for this dispatcher
                # Valid options:
                #  - "default-executor" requires a "default-executor" section
                #  - "fork-join-executor" requires a "fork-join-executor" section
                #  - "thread-pool-executor" requires a "thread-pool-executor" section
                #  - A FQCN of a class extending ExecutorServiceConfigurator
                "executor" : "default-executor",
                # reference.conf: 268
                # This will be used if you have set "executor = "fork-join-executor""
                "fork-join-executor" : {
                    # reference.conf: 275
                    # The parallelism factor is used to determine thread pool size using the
                    # following formula: ceil(available processors * factor). Resulting size
                    # is then bounded by the parallelism-min and parallelism-max values.
                    "parallelism-factor" : 3,
                    # reference.conf: 278
                    # Max number of threads to cap factor-based parallelism number to
                    "parallelism-max" : 64,
                    # reference.conf: 270
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 8
                },
                # reference.conf: 339
                # If this dispatcher requires a specific type of mailbox, specify the
                # fully-qualified class name here; the actually created mailbox will
                # be a subtype of this type. The empty string signifies no requirement.
                "mailbox-requirement" : "",
                # reference.conf: 322
                # How long time the dispatcher will wait for new actors until it shuts down
                "shutdown-timeout" : "1s",
                # reference.conf: 282
                # This will be used if you have set "executor = "thread-pool-executor""
                "thread-pool-executor" : {
                    # reference.conf: 318
                    # Allow core threads to time out
                    "allow-core-timeout" : "on",
                    # reference.conf: 293
                    # The core pool size factor is used to determine thread pool core size
                    # using the following formula: ceil(available processors * factor).
                    # Resulting size is then bounded by the core-pool-size-min and
                    # core-pool-size-max values.
                    "core-pool-size-factor" : 3,
                    # reference.conf: 296
                    # Max number of threads to cap factor-based number to
                    "core-pool-size-max" : 64,
                    # reference.conf: 287
                    # Min number of threads to cap factor-based core number to
                    "core-pool-size-min" : 8,
                    # reference.conf: 284
                    # Keep alive time for threads
                    "keep-alive-time" : "60s",
                    # reference.conf: 304
                    # Max no of threads (if using a bounded task queue) is determined by
                    # calculating: ceil(available processors * factor)
                    "max-pool-size-factor" : 3,
                    # reference.conf: 308
                    # Max number of threads to cap factor-based max number to
                    # (if using a  bounded task queue)
                    "max-pool-size-max" : 64,
                    # reference.conf: 300
                    # Minimum number of threads to cap factor-based max number to
                    # (if using a bounded task queue)
                    "max-pool-size-min" : 8,
                    # reference.conf: 311
                    # Specifies the bounded capacity of the task queue (< 1 == unbounded)
                    "task-queue-size" : -1,
                    # reference.conf: 315
                    # Specifies which type of task queue will be used, can be "array" or
                    # "linked" (default)
                    "task-queue-type" : "linked"
                },
                # reference.conf: 326
                # Throughput defines the number of messages that are processed in a batch
                # before the thread is returned to the pool. Set to 1 for as fair as possible.
                "throughput" : 5,
                # reference.conf: 329
                # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
                "throughput-deadline-time" : "0ms",
                # reference.conf: 245
                # Must be one of the following
                # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
                # MessageDispatcherConfigurator with a public constructor with
                # both com.typesafe.config.Config parameter and
                # akka.dispatch.DispatcherPrerequisites parameters.
                # PinnedDispatcher must be used together with executor=thread-pool-executor.
                "type" : "Dispatcher"
            },
            # reference.conf: 342
            "default-mailbox" : {
                # reference.conf: 353
                # If the mailbox is bounded then it uses this setting to determine its
                # capacity. The provided value must be positive.
                # NOTICE:
                # Up to version 2.1 the mailbox type was determined based on this setting;
                # this is no longer the case, the type must explicitly be a bounded mailbox.
                "mailbox-capacity" : 1000,
                # reference.conf: 358
                # If the mailbox is bounded then this is the timeout for enqueueing
                # in case the mailbox is full. Negative values signify infinite
                # timeout, which should be avoided as it bears the risk of dead-lock.
                "mailbox-push-timeout-time" : "10s",
                # reference.conf: 346
                # FQCN of the MailboxType. The Class of the FQCN must have a public
                # constructor with
                # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
                "mailbox-type" : "akka.dispatch.UnboundedMailbox",
                # reference.conf: 364
                # For Actor with Stash: The default capacity of the stash.
                # If negative (or zero) then an unbounded stash is used (default)
                # If positive then a bounded stash is used and the capacity is set using
                # the property
                "stash-capacity" : -1
            },
            # reference.conf: 31-199
            "deployment" : {
                # reference.conf: 33-199
                # deployment id pattern - on the format: /parent/child etc.
                # Default configuration for routers
                "default" : {
                    # reference.conf: 199
                    "cluster" : {
                        # reference.conf: 215
                        # Defines if routees are allowed to be located on the same node as
                        # the head router actor, or only on remote nodes.
                        # Useful for master-worker scenario where all routees are remote.
                        "allow-local-routees" : "on",
                        # reference.conf: 201
                        # enable cluster aware router that deploys to nodes in the cluster
                        "enabled" : "off",
                        # reference.conf: 210
                        # Maximum number of routees that will be deployed on each cluster
                        # member node.
                        # Note that nr-of-instances defines total number of routees, but
                        # number of routees per node will not be exceeded, i.e. if you
                        # define nr-of-instances = 50 and max-nr-of-instances-per-node = 2
                        # it will deploy 2 routees per new member in the cluster, up to
                        # 25 members.
                        "max-nr-of-instances-per-node" : 1,
                        # reference.conf: 218
                        # Deprecated in 2.3, use routees.paths instead
                        "routees-path" : "",
                        # reference.conf: 221
                        # Use members with specified role, or all members if undefined or empty.
                        "use-role" : ""
                    },
                    # reference.conf: 127
                    # The id of the dispatcher to use for this actor.
                    # If undefined or empty the dispatcher specified in code
                    # (Props.withDispatcher) is used, or default-dispatcher if not
                    # specified at all.
                    "dispatcher" : "",
                    # reference.conf: 135
                    # The id of the mailbox to use for this actor.
                    # If undefined or empty the default mailbox of the configured dispatcher
                    # is used or if there is no mailbox configuration the mailbox specified
                    # in code (Props.withMailbox) is used.
                    # If there is a mailbox defined in the configured dispatcher then that
                    # overrides this setting.
                    "mailbox" : "",
                    # reference.conf: 197
                    # MetricsSelector to use
                    # - available: "mix", "heap", "cpu", "load"
                    # - or: Fully qualified class name of the MetricsSelector class.
                    #       The class must extend akka.cluster.routing.MetricsSelector
                    #       and have a public constructor with com.typesafe.config.Config
                    #       parameter.
                    # - default is "mix"
                    "metrics-selector" : "mix",
                    # reference.conf: 160
                    # number of children to create in case of a router;
                    # this setting is ignored if routees.paths is given
                    "nr-of-instances" : 1,
                    # reference.conf: 37
                    # if this is set to a valid remote address, the named actor will be
                    # deployed at that node e.g. "akka.tcp://sys@host:port"
                    "remote" : "",
                    # reference.conf: 191
                    # Routers with dynamically resizable number of routees; this feature is
                    # enabled by including (parts of) this section in the deployment
                    "resizer" : {
                        # reference.conf: 229
                        # Fraction of routees to be removed when the resizer reaches the
                        # backoffThreshold.
                        # For example, 0.1 would decrease 10% (rounded up), i.e. if current
                        # capacity is 9 it will request an decrease of 1 routee.
                        "backoff-rate" : 0.1,
                        # reference.conf: 223
                        # Minimum fraction of busy routees before backing off.
                        # For example, if this is 0.3, then we'll remove some routees only when
                        # less than 30% of routees are busy, i.e. if current capacity is 10 and
                        # 3 are busy then the capacity is unchanged, but if 2 or less are busy
                        # the capacity is decreased.
                        # Use 0.0 or negative to avoid removal of routees.
                        "backoff-threshold" : 0.3,
                        # reference.conf: 193
                        "enabled" : "off",
                        # reference.conf: 196
                        # The fewest number of routees the router should ever have.
                        "lower-bound" : 1,
                        # reference.conf: 233
                        # Number of messages between resize operation.
                        # Use 1 to resize before each message.
                        "messages-per-resize" : 10,
                        # reference.conf: 210
                        # Threshold used to evaluate if a routee is considered to be busy
                        # (under pressure). Implementation depends on this value (default is 1).
                        # 0:   number of routees currently processing a message.
                        # 1:   number of routees currently processing a message has
                        #      some messages in mailbox.
                        # > 1: number of routees with at least the configured pressure-threshold
                        #      messages in their mailbox. Note that estimating mailbox size of
                        #      default UnboundedMailbox is O(N) operation.
                        "pressure-threshold" : 1,
                        # reference.conf: 215
                        # Percentage to increase capacity whenever all routees are busy.
                        # For example, 0.2 would increase 20% (rounded up), i.e. if current
                        # capacity is 6 it will request an increase of 2 more routees.
                        "rampup-rate" : 0.2,
                        # reference.conf: 200
                        # The most number of routees the router should ever have.
                        # Must be greater than or equal to lower-bound.
                        "upper-bound" : 10
                    },
                    # reference.conf: 173
                    "routees" : {
                        # reference.conf: 177
                        # Alternatively to giving nr-of-instances you can specify the full
                        # paths of those actors which should be routed to. This setting takes
                        # precedence over nr-of-instances
                        "paths" : []
                    },
                    # reference.conf: 156
                    # routing (load-balance) scheme to use
                    # - available: "from-code", "round-robin", "random", "smallest-mailbox",
                    #              "scatter-gather", "broadcast"
                    # - or:        Fully qualified class name of the router class.
                    #              The class must extend akka.routing.CustomRouterConfig and
                    #              have a public constructor with com.typesafe.config.Config
                    #              and optional akka.actor.DynamicAccess parameter.
                    # - default is "from-code";
                    # Whether or not an actor is transformed to a Router is decided in code
                    # only (Props.withRouter). The type of router can be overridden in the
                    # configuration; specifying "from-code" means that the values specified
                    # in the code shall be used.
                    # In case of routing, the actors to be routed to can be specified
                    # in several ways:
                    # - nr-of-instances: will create that many children
                    # - routees.paths: will route messages to these paths using ActorSelection,
                    #   i.e. will not create children
                    # - resizer: dynamically resizable number of routees as specified in
                    #   resizer below
                    "router" : "from-code",
                    # reference.conf: 168
                    "tail-chopping-router" : {
                        # reference.conf: 170
                        # interval is duration between sending message to next routee
                        "interval" : "10 milliseconds"
                    },
                    # reference.conf: 39
                    "target" : {
                        # reference.conf: 51
                        # A list of hostnames and ports for instantiating the children of a
                        # router
                        #   The format should be on "akka.tcp://sys@host:port", where:
                        #    - sys is the remote actor system name
                        #    - hostname can be either hostname or IP address the remote actor
                        #      should connect to
                        #    - port should be the port for the remote server on the other node
                        # The number of actor instances to be spawned is still taken from the
                        # nr-of-instances setting as for local routers; the instances will be
                        # distributed round-robin among the given nodes.
                        "nodes" : []
                    },
                    # reference.conf: 166
                    # number of virtual nodes per node for consistent-hashing router
                    "virtual-nodes-factor" : 10,
                    # reference.conf: 163
                    # within is the timeout used for routers containing future calls
                    "within" : "5 seconds"
                }
            },
            # reference.conf: 462
            # Configuration items which are used by the akka.actor.ActorDSL._ methods
            "dsl" : {
                # reference.conf: 468
                # Default timeout to assume for operations like Inbox.receive et al
                "default-timeout" : "5s",
                # reference.conf: 465
                # Maximum queue size of the actor created by newInbox(); this protects
                # against faulty programs which use select() and consistently miss messages
                "inbox-size" : 1000
            },
            # reference.conf: 71
            # The guardian "/user" will use this class to obtain its supervisorStrategy.
            # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
            # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
            "guardian-supervisor-strategy" : "akka.actor.DefaultSupervisorStrategy",
            # reference.conf: 367
            "mailbox" : {
                # reference.conf: 410
                "bounded-deque-based" : {
                    # reference.conf: 414
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedDequeBasedMailbox"
                },
                # reference.conf: 396
                "bounded-queue-based" : {
                    # reference.conf: 400
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedMailbox"
                },
                # reference.conf: 374
                # Mapping between message queue semantics and mailbox configurations.
                # Used by akka.dispatch.RequiresMessageQueue[T] to enforce different
                # mailbox types on actors.
                # If your Actor implements RequiresMessageQueue[T], then when you create
                # an instance of that actor its mailbox type will be decided by looking
                # up a mailbox configuration via T in this mapping
                "requirements" : {
                    # reference.conf: 384
                    "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.bounded-deque-based",
                    # reference.conf: 378
                    "akka.dispatch.BoundedMessageQueueSemantics" : "akka.actor.mailbox.bounded-queue-based",
                    # reference.conf: 380
                    "akka.dispatch.DequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf: 386
                    "akka.dispatch.MultipleConsumerSemantics" : "akka.actor.mailbox.unbounded-queue-based",
                    # reference.conf: 382
                    "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf: 376
                    "akka.dispatch.UnboundedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-queue-based"
                },
                # reference.conf: 403
                "unbounded-deque-based" : {
                    # reference.conf: 407
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedDequeBasedMailbox"
                },
                # reference.conf: 389
                "unbounded-queue-based" : {
                    # reference.conf: 393
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedMailbox"
                }
            },
            # reference.conf: 66
            # FQCN of the ActorRefProvider to be used; the below is the built-in default,
            # another one is akka.remote.RemoteActorRefProvider in the akka-remote bundle.
            "provider" : "akka.actor.LocalActorRefProvider",
            # reference.conf: 78
            # Frequency with which stopping actors are prodded in case they had to be
            # removed from their parents
            "reaper-interval" : "5s",
            # reference.conf: 100-235
            "router" : {
                # reference.conf: 100-235
                # Mapping between ´deployment.router' short names to fully qualified class names
                "type-mapping" : {
                    # reference.conf: 237
                    "adaptive-group" : "akka.cluster.routing.AdaptiveLoadBalancingGroup",
                    # reference.conf: 236
                    "adaptive-pool" : "akka.cluster.routing.AdaptiveLoadBalancingPool",
                    # reference.conf: 106
                    "balancing-pool" : "akka.routing.BalancingPool",
                    # reference.conf: 109
                    "broadcast-group" : "akka.routing.BroadcastGroup",
                    # reference.conf: 108
                    "broadcast-pool" : "akka.routing.BroadcastPool",
                    # reference.conf: 115
                    "consistent-hashing-group" : "akka.routing.ConsistentHashingGroup",
                    # reference.conf: 114
                    "consistent-hashing-pool" : "akka.routing.ConsistentHashingPool",
                    # reference.conf: 101
                    "from-code" : "akka.routing.NoRouter",
                    # reference.conf: 105
                    "random-group" : "akka.routing.RandomGroup",
                    # reference.conf: 104
                    "random-pool" : "akka.routing.RandomPool",
                    # reference.conf: 103
                    "round-robin-group" : "akka.routing.RoundRobinGroup",
                    # reference.conf: 102
                    "round-robin-pool" : "akka.routing.RoundRobinPool",
                    # reference.conf: 111
                    "scatter-gather-group" : "akka.routing.ScatterGatherFirstCompletedGroup",
                    # reference.conf: 110
                    "scatter-gather-pool" : "akka.routing.ScatterGatherFirstCompletedPool",
                    # reference.conf: 107
                    "smallest-mailbox-pool" : "akka.routing.SmallestMailboxPool",
                    # reference.conf: 113
                    "tail-chopping-group" : "akka.routing.TailChoppingGroup",
                    # reference.conf: 112
                    "tail-chopping-pool" : "akka.routing.TailChoppingPool"
                }
            },
            # reference.conf: 18-456
            # Class to Serializer binding. You only need to specify the name of an
            # interface or abstract base class of the messages. In case of ambiguity it
            # is using the most specific configured class, or giving a warning and
            # choosing the “first” one.
            # 
            # To disable one of the default serializers, assign its class to "none", like
            # "java.io.Serializable" = none
            "serialization-bindings" : {
                # reference.conf: 457
                "[B" : "bytes",
                # reference.conf: 26
                # Since com.google.protobuf.Message does not extend Serializable but
                # GeneratedMessage does, need to use the more specific one here in order
                # to avoid ambiguity
                "akka.actor.ActorSelectionMessage" : "akka-containers",
                # reference.conf: 232
                "akka.cluster.ClusterMessage" : "akka-cluster",
                # reference.conf: 41
                "akka.contrib.pattern.DistributedPubSubMessage" : "akka-pubsub",
                # reference.conf: 21
                "akka.persistence.serialization.Message" : "akka-persistence-message",
                # reference.conf: 20
                "akka.persistence.serialization.Snapshot" : "akka-persistence-snapshot",
                # reference.conf: 28
                "akka.remote.DaemonMsgCreate" : "daemon-create",
                # reference.conf: 27
                "com.google.protobuf.GeneratedMessage" : "proto",
                # reference.conf: 458
                "java.io.Serializable" : "java"
            },
            # reference.conf: 87
            # Serializes and deserializes creators (in Props) to ensure that they can be
            # sent over the network, this is only intended for testing. Purely local deployments
            # as marked with deploy.scope == LocalScope are exempt from verification.
            "serialize-creators" : "off",
            # reference.conf: 82
            # Serializes and deserializes (non-primitive) messages to ensure immutability,
            # this is only intended for testing.
            "serialize-messages" : "off",
            # reference.conf: 12-444
            # Entries for pluggable serializers and their bindings.
            "serializers" : {
                # reference.conf: 228
                "akka-cluster" : "akka.cluster.protobuf.ClusterMessageSerializer",
                # reference.conf: 16
                "akka-containers" : "akka.remote.serialization.MessageContainerSerializer",
                # reference.conf: 15
                "akka-persistence-message" : "akka.persistence.serialization.MessageSerializer",
                # reference.conf: 14
                "akka-persistence-snapshot" : "akka.persistence.serialization.SnapshotSerializer",
                # reference.conf: 38
                "akka-pubsub" : "akka.contrib.pattern.protobuf.DistributedPubSubMessageSerializer",
                # reference.conf: 446
                "bytes" : "akka.serialization.ByteArraySerializer",
                # reference.conf: 18
                "daemon-create" : "akka.remote.serialization.DaemonMsgCreateSerializer",
                # reference.conf: 445
                "java" : "akka.serialization.JavaSerializer",
                # reference.conf: 17
                "proto" : "akka.remote.serialization.ProtobufSerializer"
            },
            # reference.conf: 94
            "typed" : {
                # reference.conf: 96
                # Default timeout for typed actor methods with non-void return type
                "timeout" : "5s"
            },
            # reference.conf: 92
            # Timeout for send operations to top-level actors which are in the process
            # of being started. This is only relevant if using a bounded mailbox or the
            # CallingThreadDispatcher for a top-level actor.
            "unstarted-push-timeout" : "10s"
        },
        # reference.conf: 10
        "cluster" : {
            # reference.conf: 33
            # deprecated in 2.3, use 'auto-down-unreachable-after' instead
            "auto-down" : "off",
            # reference.conf: 30
            # Should the 'leader' in the cluster be allowed to automatically mark
            # unreachable nodes as DOWN after a configured time of unreachability?
            # Using auto-down implies that two separate clusters will automatically be
            # formed in case of network partition.
            # Disable with "off" or specify a duration to enable auto-down.
            "auto-down-unreachable-after" : "off",
            # reference.conf: 103
            # Settings for the Phi accrual failure detector (http://ddg.jaist.ac.jp/pub/HDY+04.pdf
            # [Hayashibara et al]) used by the cluster subsystem to detect unreachable
            # members.
            "failure-detector" : {
                # reference.conf: 136
                # Number of potentially lost/delayed heartbeats that will be
                # accepted before considering it to be an anomaly.
                # This margin is important to be able to survive sudden, occasional,
                # pauses in heartbeat arrivals, due to for example garbage collect or
                # network drop.
                "acceptable-heartbeat-pause" : "3 s",
                # reference.conf: 145
                # After the heartbeat request has been sent the first failure detection
                # will start after this period, even though no heartbeat mesage has
                # been received.
                "expected-response-after" : "5 s",
                # reference.conf: 112
                # How often keep-alive heartbeat messages should be sent to each connection.
                "heartbeat-interval" : "1 s",
                # reference.conf: 109
                # FQCN of the failure detector implementation.
                # It must implement akka.remote.FailureDetector and have
                # a public constructor with a com.typesafe.config.Config and
                # akka.actor.EventStream parameter.
                "implementation-class" : "akka.remote.PhiAccrualFailureDetector",
                # reference.conf: 123
                # Number of the samples of inter-heartbeat arrival times to adaptively
                # calculate the failure timeout for connections.
                "max-sample-size" : 1000,
                # reference.conf: 129
                # Minimum standard deviation to use for the normal distribution in
                # AccrualFailureDetector. Too low standard deviation might result in
                # too much sensitivity for sudden, but normal, deviations in heartbeat
                # inter arrival times.
                "min-std-deviation" : "100 ms",
                # reference.conf: 140
                # Number of member nodes that each member will send heartbeat messages to,
                # i.e. each node will be monitored by this number of other nodes.
                "monitored-by-nr-of-members" : 5,
                # reference.conf: 119
                # Defines the failure detector threshold.
                # A low threshold is prone to generate many wrong suspicions but ensures
                # a quick detection in the event of a real crash. Conversely, a high
                # threshold generates fewer mistakes but needs more time to detect
                # actual crashes.
                "threshold" : 8
            },
            # reference.conf: 94
            # Gossip to random node with newer or older state information, if any with
            # this probability. Otherwise Gossip to any random live node.
            # Probability value is between 0.0 and 1.0. 0.0 means never, 1.0 means always.
            "gossip-different-view-probability" : 0.8,
            # reference.conf: 69
            # how often should the node send out gossip information?
            "gossip-interval" : "1s",
            # reference.conf: 72
            # discard incoming gossip messages if not handled within this duration
            "gossip-time-to-live" : "2s",
            # reference.conf: 62
            "jmx" : {
                # reference.conf: 62
                # Enable or disable JMX MBeans for management of the cluster
                "enabled" : "on"
            },
            # reference.conf: 75
            # how often should the leader perform maintenance tasks?
            "leader-actions-interval" : "1s",
            # reference.conf: 59
            # Enable/disable info level logging of cluster events
            "log-info" : "on",
            # reference.conf: 149
            "metrics" : {
                # reference.conf: 162
                # How often metrics are sampled on a node.
                # Shorter interval will collect the metrics more often.
                "collect-interval" : "3s",
                # reference.conf: 158
                # FQCN of the metrics collector implementation.
                # It must implement akka.cluster.MetricsCollector and
                # have public constructor with akka.actor.ActorSystem parameter.
                # The default SigarMetricsCollector uses JMX and Hyperic SIGAR, if SIGAR
                # is on the classpath, otherwise only JMX.
                "collector-class" : "akka.cluster.SigarMetricsCollector",
                # reference.conf: 151
                # Enable or disable metrics collector for load-balancing nodes.
                "enabled" : "on",
                # reference.conf: 165
                # How often a node publishes metrics information.
                "gossip-interval" : "3s",
                # reference.conf: 174
                # How quickly the exponential weighting of past data is decayed compared to
                # new data. Set lower to increase the bias toward newer values.
                # The relevance of each data sample is halved for every passing half-life
                # duration, i.e. after 4 times the half-life, a data sample’s relevance is
                # reduced to 6% of its original relevance. The initial relevance of a data
                # sample is given by 1 – 0.5 ^ (collect-interval / half-life).
                # See http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
                "moving-average-half-life" : "12s"
            },
            # reference.conf: 56
            # Minimum required number of members before the leader changes member status
            # of 'Joining' members to 'Up'. Typically used together with
            # 'Cluster.registerOnMemberUp' to defer some action, such as starting actors,
            # until the cluster has reached a certain size.
            "min-nr-of-members" : 1,
            # reference.conf: 66
            # how long should the node wait before starting the periodic tasks
            # maintenance tasks?
            "periodic-tasks-initial-delay" : "1s",
            # reference.conf: 84
            # How often the current internal stats should be published.
            # A value of 0s can be used to always publish the stats, when it happens.
            # Disable with "off".
            "publish-stats-interval" : "off",
            # reference.conf: 98
            # Reduced the above probability when the number of nodes in the cluster
            # greater than this value.
            "reduce-gossip-different-view-probability" : 400,
            # reference.conf: 23
            # If a join request fails it will be retried after this period.
            # Disable join retry by specifying "off".
            "retry-unsuccessful-join-after" : "10s",
            # reference.conf: 41
            "role" : {},
            # reference.conf: 39
            # The roles of this member. List of strings, e.g. roles = ["A", "B"].
            # The roles are part of the membership information and can be used by
            # routers or other services to distribute work to certain member types,
            # e.g. front-end and back-end nodes.
            "roles" : [],
            # reference.conf: 181
            # If the tick-duration of the default scheduler is longer than the
            # tick-duration configured here a dedicated scheduler will be used for
            # periodic tasks of the cluster, otherwise the default scheduler is used.
            # See akka.scheduler settings for more details.
            "scheduler" : {
                # reference.conf: 182
                "tick-duration" : "33ms",
                # reference.conf: 183
                "ticks-per-wheel" : 512
            },
            # reference.conf: 19
            # how long to wait for one of the seed nodes to reply to initial join request
            "seed-node-timeout" : "5s",
            # reference.conf: 16
            # Initial contact points of the cluster.
            # The nodes to join automatically at startup.
            # Comma separated full URIs defined by a string on the form of
            # "akka.tcp://system@hostname:port"
            # Leave as empty if the node is supposed to be joined manually.
            "seed-nodes" : [],
            # reference.conf: 79
            # how often should the node move nodes, marked as unreachable by the failure
            # detector, out of the membership ring?
            "unreachable-nodes-reaper-interval" : "1s",
            # reference.conf: 89
            # The id of the dispatcher to use for cluster actors. If not specified
            # default dispatcher is used.
            # If specified you need to define the settings of the actual dispatcher.
            "use-dispatcher" : ""
        },
        # reference.conf: 10-77
        "contrib" : {
            # reference.conf: 10-77
            "cluster" : {
                # reference.conf: 66
                # //#cluster-client-mailbox-config
                "client" : {
                    # reference.conf: 67
                    "mailbox" : {
                        # reference.conf: 68
                        "mailbox-type" : "akka.dispatch.UnboundedDequeBasedMailbox",
                        # reference.conf: 69
                        "stash-capacity" : 1000
                    }
                },
                # reference.conf: 10
                # //#pub-sub-ext-config
                # Settings for the DistributedPubSubExtension
                "pub-sub" : {
                    # reference.conf: 23
                    # How often the DistributedPubSubMediator should send out gossip information
                    "gossip-interval" : "1s",
                    # reference.conf: 30
                    # Maximum number of elements to transfer in one message when synchronizing the registries.
                    # Next chunk will be transferred in next round of gossip.
                    "max-delta-elements" : 3000,
                    # reference.conf: 12
                    # Actor name of the mediator actor, /user/distributedPubSubMediator
                    "name" : "distributedPubSubMediator",
                    # reference.conf: 26
                    # Removed entries are pruned after this duration
                    "removed-time-to-live" : "120s",
                    # reference.conf: 16
                    # Start the mediator on members tagged with this role.
                    # All members are used if undefined or empty.
                    "role" : "",
                    # reference.conf: 20
                    # The routing logic to use for 'Send'
                    # Possible values: random, round-robin, broadcast
                    "routing-logic" : "random"
                },
                # reference.conf: 48
                # //#receptionist-ext-config
                # Settings for the ClusterReceptionistExtension
                "receptionist" : {
                    # reference.conf: 50
                    # Actor name of the ClusterReceptionist actor, /user/receptionist
                    "name" : "receptionist",
                    # reference.conf: 57
                    # The receptionist will send this number of contact points to the client
                    "number-of-contacts" : 3,
                    # reference.conf: 61
                    # The actor that tunnel response messages to the client will be stopped
                    # after this time of inactivity.
                    "response-tunnel-receive-timeout" : "30s",
                    # reference.conf: 54
                    # Start the receptionist on members tagged with this role.
                    # All members are used if undefined or empty.
                    "role" : ""
                },
                # reference.conf: 77
                # //#sharding-ext-config
                # Settings for the ClusterShardingExtension
                "sharding" : {
                    # reference.conf: 93
                    # Maximum number of messages that are buffered by a ShardRegion actor.
                    "buffer-size" : 100000,
                    # reference.conf: 83
                    # If the coordinator can't store state changes it will be stopped
                    # and started again after this duration.
                    "coordinator-failure-backoff" : "10 s",
                    # reference.conf: 80
                    # The extension creates a top level actor with this name in top level user scope,
                    # e.g. '/user/sharding'
                    "guardian-name" : "sharding",
                    # reference.conf: 95
                    # Timeout of the shard rebalancing process.
                    "handoff-timeout" : "60 s",
                    # reference.conf: 102
                    # Setting for the default shard allocation strategy
                    "least-shard-allocation-strategy" : {
                        # reference.conf: 107
                        # The number of ongoing rebalancing processes is limited to this number.
                        "max-simultaneous-rebalance" : 3,
                        # reference.conf: 105
                        # Threshold of how large the difference between most and least number of
                        # allocated shards must be to begin the rebalancing.
                        "rebalance-threshold" : 10
                    },
                    # reference.conf: 97
                    # Rebalance check is performed periodically with this interval.
                    "rebalance-interval" : "10 s",
                    # reference.conf: 91
                    # The ShardRegion retries registration and shard location requests to the
                    # ShardCoordinator with this interval if it does not reply.
                    "retry-interval" : "2 s",
                    # reference.conf: 88
                    # Start the coordinator singleton manager on members tagged with this role.
                    # All members are used if undefined or empty.
                    # ShardRegion actor is started in proxy only mode on nodes that are not tagged
                    # with this role.
                    "role" : "",
                    # reference.conf: 100
                    # How often the coordinator saves persistent snapshots, which are
                    # used to reduce recovery times
                    "snapshot-interval" : "3600 s"
                }
            }
        },
        # reference.conf: 56
        # Toggles whether threads created by this ActorSystem should be daemons or not
        "daemonic" : "off",
        # reference.conf: 53
        # List FQCN of extensions which shall be loaded at actor system startup.
        # Should be on the format: 'extensions = ["foo", "bar"]' etc.
        # See the Akka Documentation for more info about Extensions
        "extensions" : [],
        # reference.conf: 13
        # Home directory of Akka, modules in the deploy directory will be loaded
        "home" : "",
        # reference.conf: 511
        "io" : {
            # reference.conf: 515
            # By default the select loops run on dedicated threads, hence using a
            # PinnedDispatcher
            "pinned-dispatcher" : {
                # reference.conf: 517
                "executor" : "thread-pool-executor",
                # reference.conf: 518
                "thread-pool-executor" : {
                    # reference.conf: 518
                    "allow-core-pool-timeout" : "off"
                },
                # reference.conf: 516
                "type" : "PinnedDispatcher"
            },
            # reference.conf: 521
            "tcp" : {
                # reference.conf: 543
                # The maximum number of connection that are accepted in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "batch-accept-limit" : 10,
                # reference.conf: 551
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf: 547
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf: 581
                # Fully qualified config path which holds the dispatcher configuration
                # on which file IO tasks are scheduled
                "file-io-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 589
                # The maximum number of bytes (or "unlimited") to transfer in one batch
                # when using `WriteFile` command which uses `FileChannel.transferTo` to
                # pipe files to a TCP socket. On some OS like Linux `FileChannel.transferTo`
                # may block for a long time when network IO is faster than file IO.
                # Decreasing the value may improve fairness while increasing may improve
                # throughput.
                "file-io-transferTo-limit" : "512 KiB",
                # reference.conf: 594
                # The number of times to retry the `finishConnect` call after being notified about
                # OP_CONNECT. Retries are needed if the OP_CONNECT notification doesn't imply that
                # `finishConnect` will succeed, which is the case on Android.
                "finish-connect-retries" : 5,
                # reference.conf: 577
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 533
                # Maximum number of open channels supported by this TCP module; there is
                # no intrinsic general limit, this setting is meant to enable DoS
                # protection by limiting the number of concurrently connected clients.
                # Also note that this is a "soft" limit; in certain cases the implementation
                # will accept a few connections more or a few less than the number configured
                # here. Must be an integer > 0 or "unlimited".
                "max-channels" : 256000,
                # reference.conf: 560
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                "max-received-message-size" : "unlimited",
                # reference.conf: 525
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf: 555
                # The duration a connection actor waits for a `Register` message from
                # its commander before aborting the connection.
                "register-timeout" : "5s",
                # reference.conf: 538
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf: 569
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf: 565
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf: 603
                # On Windows connection aborts are not reliably detected unless an OP_READ is
                # registered on the selector _after_ the connection has been reset. This
                # workaround enables an OP_CONNECT which forces the abort to be visible on Windows.
                # Enabling this setting on other platforms than Windows will cause various failures
                # and undefined behavior.
                # Possible values of this key are on, off and auto where auto will enable the
                # workaround if Windows is detected automatically.
                "windows-connection-abort-workaround-enabled" : "auto",
                # reference.conf: 573
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf: 606
            "udp" : {
                # reference.conf: 642
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf: 638
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf: 664
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 615
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf: 610
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf: 634
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf: 647
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                "received-message-size-limit" : "unlimited",
                # reference.conf: 624
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf: 629
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf: 656
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf: 652
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf: 660
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf: 667
            "udp-connected" : {
                # reference.conf: 703
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf: 699
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf: 725
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf: 676
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf: 671
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf: 695
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf: 708
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                "received-message-size-limit" : "unlimited",
                # reference.conf: 685
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf: 690
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf: 717
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf: 713
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf: 721
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            }
        },
        # reference.conf: 60
        # JVM shutdown, System.exit(-1), in case of a fatal error,
        # such as OutOfMemoryError
        "jvm-exit-on-fatal-error" : "on",
        # application.conf: 22
        # Akka
        # ======= #
        "log-config-on-start" : "on",
        # reference.conf: 43
        # Log at info level when messages are sent to dead letters.
        # Possible values:
        # on: all dead letters are logged
        # off: no logging of dead letters
        # n: positive integer, number of dead letters that will be logged
        "log-dead-letters" : 10,
        # reference.conf: 48
        # Possibility to turn off logging of dead letters while the actor system
        # is shutting down. Logging is only done when enabled by 'log-dead-letters'
        # setting.
        "log-dead-letters-during-shutdown" : "on",
        # reference.conf: 22
        # Loggers are created and registered synchronously during ActorSystem
        # start-up, and since they are actors, this timeout is used to bound the
        # waiting time
        "logger-startup-timeout" : "5s",
        # application.conf: 25
        "loggers" : [
            # application.conf: 25
            "akka.event.slf4j.Slf4jLogger"
        ],
        # application.conf: 26
        "loglevel" : "DEBUG",
        # reference.conf: 25
        "persistence" : {
            # reference.conf: 146
            "at-least-once-delivery" : {
                # reference.conf: 156
                # Maximum number of unconfirmed messages that an actor with AtLeastOnceDelivery is
                # allowed to hold in memory.
                "max-unconfirmed-messages" : 100000,
                # reference.conf: 148
                # Interval between redelivery attempts
                "redeliver-interval" : "5s",
                # reference.conf: 152
                # After this number of delivery attempts a `ReliableRedelivery.UnconfirmedWarning`
                # message will be sent to the actor.
                "warn-after-number-of-unconfirmed-attempts" : 5
            },
            # reference.conf: 159
            "dispatchers" : {
                # reference.conf: 160
                "default-plugin-dispatcher" : {
                    # reference.conf: 162
                    "executor" : "thread-pool-executor",
                    # reference.conf: 161
                    "type" : "PinnedDispatcher"
                },
                # reference.conf: 164
                "default-replay-dispatcher" : {
                    # reference.conf: 166
                    "executor" : "fork-join-executor",
                    # reference.conf: 167
                    "fork-join-executor" : {
                        # reference.conf: 169
                        "parallelism-max" : 8,
                        # reference.conf: 168
                        "parallelism-min" : 2
                    },
                    # reference.conf: 165
                    "type" : "Dispatcher"
                },
                # reference.conf: 172
                "default-stream-dispatcher" : {
                    # reference.conf: 174
                    "executor" : "fork-join-executor",
                    # reference.conf: 175
                    "fork-join-executor" : {
                        # reference.conf: 177
                        "parallelism-max" : 8,
                        # reference.conf: 176
                        "parallelism-min" : 2
                    },
                    # reference.conf: 173
                    "type" : "Dispatcher"
                }
            },
            # reference.conf: 27
            "journal" : {
                # reference.conf: 42
                # In-memory journal plugin.
                "inmem" : {
                    # reference.conf: 45
                    # Class name of the plugin.
                    "class" : "akka.persistence.journal.inmem.InmemJournal",
                    # reference.conf: 48
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.actor.default-dispatcher"
                },
                # reference.conf: 52
                # LevelDB journal plugin.
                "leveldb" : {
                    # reference.conf: 70
                    # Verify checksum on read.
                    "checksum" : "off",
                    # reference.conf: 55
                    # Class name of the plugin.
                    "class" : "akka.persistence.journal.leveldb.LeveldbJournal",
                    # reference.conf: 64
                    # Storage location of LevelDB files.
                    "dir" : "journal",
                    # reference.conf: 67
                    # Use fsync on write
                    "fsync" : "on",
                    # reference.conf: 73
                    # Native LevelDB (via JNI) or LevelDB Java port
                    "native" : "on",
                    # reference.conf: 58
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher",
                    # reference.conf: 61
                    # Dispatcher for message replay.
                    "replay-dispatcher" : "akka.persistence.dispatchers.default-replay-dispatcher"
                },
                # reference.conf: 77
                # Shared LevelDB journal plugin (for testing only).
                "leveldb-shared" : {
                    # reference.conf: 80
                    # Class name of the plugin.
                    "class" : "akka.persistence.journal.leveldb.SharedLeveldbJournal",
                    # reference.conf: 83
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.actor.default-dispatcher",
                    # reference.conf: 88
                    "store" : {
                        # reference.conf: 103
                        # Verify checksum on read.
                        "checksum" : "off",
                        # reference.conf: 97
                        # Storage location of LevelDB files.
                        "dir" : "journal",
                        # reference.conf: 100
                        # Use fsync on write
                        "fsync" : "on",
                        # reference.conf: 106
                        # Native LevelDB (via JNI) or LevelDB Java port
                        "native" : "on",
                        # reference.conf: 94
                        # Dispatcher for message replay.
                        "replay-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher",
                        # reference.conf: 91
                        # Dispatcher for shared store actor.
                        "store-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher"
                    },
                    # reference.conf: 86
                    # timeout for async journal operations
                    "timeout" : "10s"
                },
                # reference.conf: 33
                # Maximum size of a confirmation batch written to the journal.
                "max-confirmation-batch-size" : 10000,
                # reference.conf: 36
                # Maximum size of a deletion batch written to the journal.
                "max-deletion-batch-size" : 10000,
                # reference.conf: 30
                # Maximum size of a persistent message batch written to the journal.
                "max-message-batch-size" : 200,
                # reference.conf: 39
                # Path to the journal plugin to be used
                "plugin" : "akka.persistence.journal.leveldb"
            },
            # reference.conf: 111
            "snapshot-store" : {
                # reference.conf: 117
                # Local filesystem snapshot store plugin.
                "local" : {
                    # reference.conf: 120
                    # Class name of the plugin.
                    "class" : "akka.persistence.snapshot.local.LocalSnapshotStore",
                    # reference.conf: 129
                    # Storage location of snapshot files.
                    "dir" : "snapshots",
                    # reference.conf: 123
                    # Dispatcher for the plugin actor.
                    "plugin-dispatcher" : "akka.persistence.dispatchers.default-plugin-dispatcher",
                    # reference.conf: 126
                    # Dispatcher for streaming snapshot IO.
                    "stream-dispatcher" : "akka.persistence.dispatchers.default-stream-dispatcher"
                },
                # reference.conf: 114
                # Path to the snapshot store plugin to be used
                "plugin" : "akka.persistence.snapshot-store.local"
            },
            # reference.conf: 133
            "view" : {
                # reference.conf: 136
                # Automated incremental view update.
                "auto-update" : "on",
                # reference.conf: 139
                # Interval between incremental updates
                "auto-update-interval" : "5s",
                # reference.conf: 143
                # Maximum number of messages to replay per incremental view update. Set to
                # -1 for no upper limit.
                "auto-update-replay-max" : -1
            }
        },
        # reference.conf: 58
        "remote" : {
            # reference.conf: 287
            # Transport drivers can be augmented with adapters by adding their
            # name to the applied-adapters setting in the configuration of a
            # transport. The available adapters should be configured in this
            # section by providing a name, and the fully qualified name of
            # their corresponding implementation. The class given here
            # must implement akka.akka.remote.transport.TransportAdapterProvider
            # and have public constructor without parameters.
            "adapters" : {
                # reference.conf: 288
                "gremlin" : "akka.remote.transport.FailureInjectorProvider",
                # reference.conf: 289
                "trttl" : "akka.remote.transport.ThrottlerProvider"
            },
            # reference.conf: 83
            # Controls the backoff interval after a refused write is reattempted.
            # (Transports may refuse writes if their internal buffer is full)
            "backoff-interval" : "5 ms",
            # reference.conf: 484
            "backoff-remote-dispatcher" : {
                # reference.conf: 486
                "executor" : "fork-join-executor",
                # reference.conf: 487
                "fork-join-executor" : {
                    # reference.conf: 490
                    "parallelism-max" : 2,
                    # reference.conf: 489
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 2
                },
                # reference.conf: 485
                "type" : "Dispatcher"
            },
            # reference.conf: 86
            # Acknowledgment timeout of management commands sent to the transport stack.
            "command-ack-timeout" : "30 s",
            # reference.conf: 474
            "default-remote-dispatcher" : {
                # reference.conf: 476
                "executor" : "fork-join-executor",
                # reference.conf: 477
                "fork-join-executor" : {
                    # reference.conf: 480
                    "parallelism-max" : 2,
                    # reference.conf: 479
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 2
                },
                # reference.conf: 475
                "type" : "Dispatcher"
            },
            # reference.conf: 278
            # List of the transport drivers that will be loaded by the remoting.
            # A list of fully qualified config paths must be provided where
            # the given configuration path contains a transport-class key
            # pointing to an implementation class of the Transport interface.
            # If multiple transports are provided, the address of the first
            # one will be used as a default address.
            "enabled-transports" : [
                # reference.conf: 278
                "akka.remote.netty.tcp"
            ],
            # reference.conf: 76
            # Before shutting down the drivers, the remoting subsystem attempts to flush
            # all pending writes. This setting controls the maximum time the remoting is
            # willing to wait before moving on to shut down the drivers.
            "flush-wait-on-shutdown" : "2 s",
            # reference.conf: 467
            "gremlin" : {
                # reference.conf: 469
                # Enable debug logging of the failure injector transport adapter
                "debug" : "off"
            },
            # reference.conf: 268
            # WARNING: this setting should not be not changed unless all of its consequences
            # are properly understood which assumes experience with remoting internals
            # or expert advice.
            # This setting defines the time after redelivery attempts of internal management
            # signals are stopped to a remote system that has been not confirmed to be alive by
            # this system before.
            "initial-system-message-delivery-timeout" : "3 m",
            # reference.conf: 148
            # Log warning if the number of messages in the backoff buffer in the endpoint
            # writer exceeds this limit. It can be disabled by setting the value to off.
            "log-buffer-size-exceeding" : 50000,
            # reference.conf: 144
            # Logging of message types with payload size in bytes larger than
            # this value. Maximum detected size per message type is logged once,
            # with an increase threshold of 10%.
            # By default this feature is turned off. Activate it by setting the property to
            # a value in bytes, such as 1000b. Note that for all messages larger than this
            # limit there will be extra performance and scalability cost.
            "log-frame-size-exceeding" : "off",
            # reference.conf: 123
            # If this is "on", Akka will log all inbound messages at DEBUG level,
            # if off then they are not logged
            "log-received-messages" : "off",
            # reference.conf: 136
            # Sets the log granularity level at which Akka logs remoting events. This setting
            # can take the values OFF, ERROR, WARNING, INFO, DEBUG, or ON. For compatibility
            # reasons the setting "on" will default to "debug" level. Please note that the effective
            # logging level is still determined by the global logging level of the actor system:
            # for example debug level remoting events will be only logged if the system
            # is running with debug level logging.
            # Failures to deserialize received messages also fall under this flag.
            "log-remote-lifecycle-events" : "on",
            # reference.conf: 127
            # If this is "on", Akka will log all outbound messages at DEBUG level,
            # if off then they are not logged
            "log-sent-messages" : "off",
            # reference.conf: 294-413
            "netty" : {
                # reference.conf: 294-413
                "ssl" : {
                    # reference.conf: 306
                    # Transport drivers can be augmented with adapters by adding their
                    # name to the applied-adapters list. The last adapter in the
                    # list is the adapter immediately above the driver, while
                    # the first one is the top of the stack below the standard
                    # Akka protocol
                    "applied-adapters" : [],
                    # reference.conf: 359
                    # Sets the size of the connection backlog
                    "backlog" : 4096,
                    # reference.conf: 390
                    # Used to configure the number of I/O worker threads on client sockets
                    "client-socket-worker-pool" : {
                        # reference.conf: 398
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 401
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 392
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 324
                    # Sets the connectTimeoutMillis of all outbound connections,
                    # i.e. how long a connect may take until it is timed out
                    "connection-timeout" : "15 s",
                    # reference.conf: 416
                    # Enable SSL/TLS encryption.
                    # This must be enabled on both the client and server to work.
                    "enable-ssl" : true,
                    # reference.conf: 317
                    # The hostname or ip to bind the remoting to,
                    # InetAddress.getLocalHost.getHostAddress is used if empty
                    "hostname" : "",
                    # reference.conf: 356
                    # Maximum message size the transport will accept, but at least
                    # 32000 bytes.
                    # Please note that UDP does not support arbitrary large datagrams,
                    # so this setting has to be chosen carefully when using UDP.
                    # Both send-buffer-size and receive-buffer-size settings has to
                    # be adjusted to be able to buffer messages of maximum size.
                    "maximum-frame-size" : "128000b",
                    # reference.conf: 313
                    # The default remote server port clients should connect to.
                    # Default is 2552 (AKKA), use 0 if you want a random available port
                    # This port needs to be unique for each actor system on the same machine.
                    "port" : 2552,
                    # reference.conf: 348
                    # Sets the receive buffer size of the Sockets,
                    # set to 0b for platform default
                    "receive-buffer-size" : "256000b",
                    # reference.conf: 418
                    "security" : {
                        # reference.conf: 446
                        # Example: ["TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"]
                        # You need to install the JCE Unlimited Strength Jurisdiction Policy
                        # Files to use AES 256.
                        # More info here:
                        # http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEProvider
                        "enabled-algorithms" : [
                            # reference.conf: 446
                            "TLS_RSA_WITH_AES_128_CBC_SHA"
                        ],
                        # reference.conf: 426
                        # This password is used for decrypting the key
                        "key-password" : "changeme",
                        # reference.conf: 420
                        # This is the Java Key Store used by the server connection
                        "key-store" : "keystore",
                        # reference.conf: 423
                        # This password is used for decrypting the key store
                        "key-store-password" : "changeme",
                        # reference.conf: 439
                        # Protocol to use for SSL encryption, choose from:
                        # Java 6 & 7:
                        #   'SSLv3', 'TLSv1'
                        # Java 7:
                        #   'TLSv1.1', 'TLSv1.2'
                        "protocol" : "TLSv1",
                        # reference.conf: 461
                        # There are three options, in increasing order of security:
                        # "" or SecureRandom => (default)
                        # "SHA1PRNG" => Can be slow because of blocking issues on Linux
                        # "AES128CounterSecureRNG" => fastest startup and based on AES encryption
                        # algorithm
                        # "AES256CounterSecureRNG"
                        # The following use one of 3 possible seed sources, depending on
                        # availability: /dev/random, random.org and SecureRandom (provided by Java)
                        # "AES128CounterInetRNG"
                        # "AES256CounterInetRNG" (Install JCE Unlimited Strength Jurisdiction
                        # Policy Files first)
                        # Setting a value here may require you to supply the appropriate cipher
                        # suite (see enabled-algorithms section above)
                        "random-number-generator" : "",
                        # reference.conf: 429
                        # This is the Java Key Store used by the client connection
                        "trust-store" : "truststore",
                        # reference.conf: 432
                        # This password is used for decrypting the trust store
                        "trust-store-password" : "changeme"
                    },
                    # reference.conf: 344
                    # Sets the send buffer size of the Sockets,
                    # set to 0b for platform default
                    "send-buffer-size" : "256000b",
                    # reference.conf: 375
                    # Used to configure the number of I/O worker threads on server sockets
                    "server-socket-worker-pool" : {
                        # reference.conf: 383
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 386
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 377
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 365
                    # Enables TCP Keepalive, subject to the O/S kernel’s configuration
                    "tcp-keepalive" : "on",
                    # reference.conf: 362
                    # Enables the TCP_NODELAY flag, i.e. disables Nagle’s algorithm
                    "tcp-nodelay" : "on",
                    # reference.conf: 372
                    # Enables SO_REUSEADDR, which determines when an ActorSystem can open
                    # the specified listen port (the meaning differs between *nix and Windows)
                    # Valid values are "on", "off" and "off-for-windows"
                    # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
                    # "off-for-windows" of course means that it's "on" for all other platforms
                    "tcp-reuse-addr" : "off-for-windows",
                    # reference.conf: 299
                    # The class given here must implement the akka.remote.transport.Transport
                    # interface and offer a public constructor which takes two arguments:
                    #  1) akka.actor.ExtendedActorSystem
                    #  2) com.typesafe.config.Config
                    "transport-class" : "akka.remote.transport.netty.NettyTransport",
                    # reference.conf: 308
                    "transport-protocol" : "tcp",
                    # reference.conf: 332
                    # If set to "<id.of.dispatcher>" then the specified dispatcher
                    # will be used to accept inbound connections, and perform IO. If "" then
                    # dedicated threads will be used.
                    # Please note that the Netty driver only uses this configuration and does
                    # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
                    # configured manually to point to the same dispatcher if needed.
                    "use-dispatcher-for-io" : "",
                    # reference.conf: 336
                    # Sets the high water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-high-water-mark" : "0b",
                    # reference.conf: 340
                    # Sets the low water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-low-water-mark" : "0b"
                },
                # reference.conf: 294
                "tcp" : {
                    # reference.conf: 306
                    # Transport drivers can be augmented with adapters by adding their
                    # name to the applied-adapters list. The last adapter in the
                    # list is the adapter immediately above the driver, while
                    # the first one is the top of the stack below the standard
                    # Akka protocol
                    "applied-adapters" : [],
                    # reference.conf: 359
                    # Sets the size of the connection backlog
                    "backlog" : 4096,
                    # reference.conf: 390
                    # Used to configure the number of I/O worker threads on client sockets
                    "client-socket-worker-pool" : {
                        # reference.conf: 398
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 401
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 392
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 324
                    # Sets the connectTimeoutMillis of all outbound connections,
                    # i.e. how long a connect may take until it is timed out
                    "connection-timeout" : "15 s",
                    # reference.conf: 320
                    # Enables SSL support on this transport
                    "enable-ssl" : false,
                    # reference.conf: 317
                    # The hostname or ip to bind the remoting to,
                    # InetAddress.getLocalHost.getHostAddress is used if empty
                    "hostname" : "",
                    # reference.conf: 356
                    # Maximum message size the transport will accept, but at least
                    # 32000 bytes.
                    # Please note that UDP does not support arbitrary large datagrams,
                    # so this setting has to be chosen carefully when using UDP.
                    # Both send-buffer-size and receive-buffer-size settings has to
                    # be adjusted to be able to buffer messages of maximum size.
                    "maximum-frame-size" : "128000b",
                    # reference.conf: 313
                    # The default remote server port clients should connect to.
                    # Default is 2552 (AKKA), use 0 if you want a random available port
                    # This port needs to be unique for each actor system on the same machine.
                    "port" : 2552,
                    # reference.conf: 348
                    # Sets the receive buffer size of the Sockets,
                    # set to 0b for platform default
                    "receive-buffer-size" : "256000b",
                    # reference.conf: 344
                    # Sets the send buffer size of the Sockets,
                    # set to 0b for platform default
                    "send-buffer-size" : "256000b",
                    # reference.conf: 375
                    # Used to configure the number of I/O worker threads on server sockets
                    "server-socket-worker-pool" : {
                        # reference.conf: 383
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 386
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 377
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 365
                    # Enables TCP Keepalive, subject to the O/S kernel’s configuration
                    "tcp-keepalive" : "on",
                    # reference.conf: 362
                    # Enables the TCP_NODELAY flag, i.e. disables Nagle’s algorithm
                    "tcp-nodelay" : "on",
                    # reference.conf: 372
                    # Enables SO_REUSEADDR, which determines when an ActorSystem can open
                    # the specified listen port (the meaning differs between *nix and Windows)
                    # Valid values are "on", "off" and "off-for-windows"
                    # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
                    # "off-for-windows" of course means that it's "on" for all other platforms
                    "tcp-reuse-addr" : "off-for-windows",
                    # reference.conf: 299
                    # The class given here must implement the akka.remote.transport.Transport
                    # interface and offer a public constructor which takes two arguments:
                    #  1) akka.actor.ExtendedActorSystem
                    #  2) com.typesafe.config.Config
                    "transport-class" : "akka.remote.transport.netty.NettyTransport",
                    # reference.conf: 308
                    "transport-protocol" : "tcp",
                    # reference.conf: 332
                    # If set to "<id.of.dispatcher>" then the specified dispatcher
                    # will be used to accept inbound connections, and perform IO. If "" then
                    # dedicated threads will be used.
                    # Please note that the Netty driver only uses this configuration and does
                    # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
                    # configured manually to point to the same dispatcher if needed.
                    "use-dispatcher-for-io" : "",
                    # reference.conf: 336
                    # Sets the high water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-high-water-mark" : "0b",
                    # reference.conf: 340
                    # Sets the low water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-low-water-mark" : "0b"
                },
                # reference.conf: 294-408
                "udp" : {
                    # reference.conf: 306
                    # Transport drivers can be augmented with adapters by adding their
                    # name to the applied-adapters list. The last adapter in the
                    # list is the adapter immediately above the driver, while
                    # the first one is the top of the stack below the standard
                    # Akka protocol
                    "applied-adapters" : [],
                    # reference.conf: 359
                    # Sets the size of the connection backlog
                    "backlog" : 4096,
                    # reference.conf: 390
                    # Used to configure the number of I/O worker threads on client sockets
                    "client-socket-worker-pool" : {
                        # reference.conf: 398
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 401
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 392
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 324
                    # Sets the connectTimeoutMillis of all outbound connections,
                    # i.e. how long a connect may take until it is timed out
                    "connection-timeout" : "15 s",
                    # reference.conf: 320
                    # Enables SSL support on this transport
                    "enable-ssl" : false,
                    # reference.conf: 317
                    # The hostname or ip to bind the remoting to,
                    # InetAddress.getLocalHost.getHostAddress is used if empty
                    "hostname" : "",
                    # reference.conf: 356
                    # Maximum message size the transport will accept, but at least
                    # 32000 bytes.
                    # Please note that UDP does not support arbitrary large datagrams,
                    # so this setting has to be chosen carefully when using UDP.
                    # Both send-buffer-size and receive-buffer-size settings has to
                    # be adjusted to be able to buffer messages of maximum size.
                    "maximum-frame-size" : "128000b",
                    # reference.conf: 313
                    # The default remote server port clients should connect to.
                    # Default is 2552 (AKKA), use 0 if you want a random available port
                    # This port needs to be unique for each actor system on the same machine.
                    "port" : 2552,
                    # reference.conf: 348
                    # Sets the receive buffer size of the Sockets,
                    # set to 0b for platform default
                    "receive-buffer-size" : "256000b",
                    # reference.conf: 344
                    # Sets the send buffer size of the Sockets,
                    # set to 0b for platform default
                    "send-buffer-size" : "256000b",
                    # reference.conf: 375
                    # Used to configure the number of I/O worker threads on server sockets
                    "server-socket-worker-pool" : {
                        # reference.conf: 383
                        # The pool size factor is used to determine thread pool size
                        # using the following formula: ceil(available processors * factor).
                        # Resulting size is then bounded by the pool-size-min and
                        # pool-size-max values.
                        "pool-size-factor" : 1,
                        # reference.conf: 386
                        # Max number of threads to cap factor-based number to
                        "pool-size-max" : 2,
                        # reference.conf: 377
                        # Min number of threads to cap factor-based number to
                        "pool-size-min" : 2
                    },
                    # reference.conf: 365
                    # Enables TCP Keepalive, subject to the O/S kernel’s configuration
                    "tcp-keepalive" : "on",
                    # reference.conf: 362
                    # Enables the TCP_NODELAY flag, i.e. disables Nagle’s algorithm
                    "tcp-nodelay" : "on",
                    # reference.conf: 372
                    # Enables SO_REUSEADDR, which determines when an ActorSystem can open
                    # the specified listen port (the meaning differs between *nix and Windows)
                    # Valid values are "on", "off" and "off-for-windows"
                    # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
                    # "off-for-windows" of course means that it's "on" for all other platforms
                    "tcp-reuse-addr" : "off-for-windows",
                    # reference.conf: 299
                    # The class given here must implement the akka.remote.transport.Transport
                    # interface and offer a public constructor which takes two arguments:
                    #  1) akka.actor.ExtendedActorSystem
                    #  2) com.typesafe.config.Config
                    "transport-class" : "akka.remote.transport.netty.NettyTransport",
                    # reference.conf: 409
                    "transport-protocol" : "udp",
                    # reference.conf: 332
                    # If set to "<id.of.dispatcher>" then the specified dispatcher
                    # will be used to accept inbound connections, and perform IO. If "" then
                    # dedicated threads will be used.
                    # Please note that the Netty driver only uses this configuration and does
                    # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
                    # configured manually to point to the same dispatcher if needed.
                    "use-dispatcher-for-io" : "",
                    # reference.conf: 336
                    # Sets the high water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-high-water-mark" : "0b",
                    # reference.conf: 340
                    # Sets the low water mark for the in and outbound sockets,
                    # set to 0b for platform default
                    "write-buffer-low-water-mark" : "0b"
                }
            },
            # reference.conf: 240
            # After catastrophic communication failures that result in the loss of system
            # messages or after the remote DeathWatch triggers the remote system gets
            # quarantined to prevent inconsistent behavior.
            # This setting controls how long the Quarantine marker will be kept around
            # before being removed to avoid long-term memory leaks.
            # WARNING: DO NOT change this to a small value to re-enable communication with
            # quarantined nodes. Such feature is not supported and any behavior between
            # the affected systems after lifting the quarantine is undefined.
            "prune-quarantine-marker-after" : "5 d",
            # reference.conf: 112
            # Should the remote server require that its peers share the same
            # secure-cookie (defined in the 'remote' section)? Secure cookies are passed
            # between during the initial handshake. Connections are refused if the initial
            # message contains a mismatching cookie or the cookie is missing.
            "require-cookie" : "off",
            # reference.conf: 260
            # This setting defines the time after internal management signals
            # between actors (used for DeathWatch and supervision) that have not been
            # explicitly acknowledged or negatively acknowledged are resent.
            # Messages that were negatively acknowledged are always immediately
            # resent.
            "resend-interval" : "2 s",
            # reference.conf: 230
            # After failed to establish an outbound connection, the remoting will mark the
            # address as failed. This configuration option controls how much time should
            # be elapsed before reattempting a new connection. While the address is
            # gated, all messages sent to the address are delivered to dead-letters.
            # Since this setting limits the rate of reconnects setting it to a
            # very short interval (i.e. less than a second) may result in a storm of
            # reconnect attempts.
            "retry-gate-closed-for" : "5 s",
            # reference.conf: 117
            # Generate your own with the script availbale in
            # '$AKKA_HOME/scripts/generate_config_with_secure_cookie.sh' or using
            # 'akka.util.Crypt.generateSecureCookie'
            "secure-cookie" : "",
            # reference.conf: 71
            # Timout after which the graceful shutdown of the remoting subsystem is
            # considered to be failed. After the timeout the remoting system is
            # forcefully shut down. Increase this value if your transport drivers
            # (see the enabled-transports section) need longer time to stop properly.
            "shutdown-timeout" : "10 s",
            # reference.conf: 65
            # Timeout after which the startup of the remoting subsystem is considered
            # to be failed. Increase this value if your transport drivers (see the
            # enabled-transports section) need longer time to be loaded.
            "startup-timeout" : "10 s",
            # reference.conf: 253
            # This setting defines the maximum idle time after an individual
            # acknowledgement for system messages is sent. System message delivery
            # is guaranteed by explicit acknowledgement messages. These acks are
            # piggybacked on ordinary traffic messages. If no traffic is detected
            # during the time period configured here, the remoting will send out
            # an individual ack.
            "system-message-ack-piggyback-timeout" : "0.3 s",
            # reference.conf: 245
            # This setting defines the maximum number of unacknowledged system messages
            # allowed for a remote system. If this limit is reached the remote system is
            # declared to be dead and its UID marked as tainted.
            "system-message-buffer-size" : 1000,
            # reference.conf: 155
            # Settings for the failure detector to monitor connections.
            # For TCP it is not important to have fast failure detection, since
            # most connection failures are captured by TCP itself. 
            "transport-failure-detector" : {
                # reference.conf: 171
                # Number of potentially lost/delayed heartbeats that will be
                # accepted before considering it to be an anomaly.
                # A margin to the `heartbeat-interval` is important to be able to survive sudden,
                # occasional, pauses in heartbeat arrivals, due to for example garbage collect or
                # network drop.
                "acceptable-heartbeat-pause" : "20 s",
                # reference.conf: 164
                # How often keep-alive heartbeat messages should be sent to each connection.
                "heartbeat-interval" : "4 s",
                # reference.conf: 161
                # FQCN of the failure detector implementation.
                # It must implement akka.remote.FailureDetector and have
                # a public constructor with a com.typesafe.config.Config and
                # akka.actor.EventStream parameter.
                "implementation-class" : "akka.remote.DeadlineFailureDetector"
            },
            # reference.conf: 106
            # When 'untrusted-mode=on' inbound actor selections are by default discarded.
            # Actors with paths defined in this white list are granted permission to receive actor
            # selections messages. 
            # E.g. trusted-selection-paths = ["/user/receptionist", "/user/namingService"]   
            "trusted-selection-paths" : [],
            # reference.conf: 100
            # Enable untrusted mode for full security of server managed actors, prevents
            # system messages to be send by clients, e.g. messages like 'Create',
            # 'Suspend', 'Resume', 'Terminate', 'Supervise', 'Link' etc.
            "untrusted-mode" : "off",
            # reference.conf: 93
            # If set to a nonempty string remoting will use the given dispatcher for
            # its internal actors otherwise the default dispatcher is used. Please note
            # that since remoting can load arbitrary 3rd party drivers (see
            # "enabled-transport" and "adapters" entries) it is not guaranteed that
            # every module will respect this setting.
            "use-dispatcher" : "akka.remote.default-remote-dispatcher",
            # reference.conf: 79
            # Reuse inbound connections for outbound messages
            "use-passive-connections" : "on",
            # reference.conf: 176
            # Settings for the Phi accrual failure detector (http://ddg.jaist.ac.jp/pub/HDY+04.pdf
            # [Hayashibara et al]) used for remote death watch.
            "watch-failure-detector" : {
                # reference.conf: 209
                # Number of potentially lost/delayed heartbeats that will be
                # accepted before considering it to be an anomaly.
                # This margin is important to be able to survive sudden, occasional,
                # pauses in heartbeat arrivals, due to for example garbage collect or
                # network drop.
                "acceptable-heartbeat-pause" : "10 s",
                # reference.conf: 219
                # After the heartbeat request has been sent the first failure detection
                # will start after this period, even though no heartbeat mesage has
                # been received.
                "expected-response-after" : "3 s",
                # reference.conf: 185
                # How often keep-alive heartbeat messages should be sent to each connection.
                "heartbeat-interval" : "1 s",
                # reference.conf: 182
                # FQCN of the failure detector implementation.
                # It must implement akka.remote.FailureDetector and have
                # a public constructor with a com.typesafe.config.Config and
                # akka.actor.EventStream parameter.
                "implementation-class" : "akka.remote.PhiAccrualFailureDetector",
                # reference.conf: 196
                # Number of the samples of inter-heartbeat arrival times to adaptively
                # calculate the failure timeout for connections.
                "max-sample-size" : 200,
                # reference.conf: 202
                # Minimum standard deviation to use for the normal distribution in
                # AccrualFailureDetector. Too low standard deviation might result in
                # too much sensitivity for sudden, but normal, deviations in heartbeat
                # inter arrival times.
                "min-std-deviation" : "100 ms",
                # reference.conf: 192
                # Defines the failure detector threshold.
                # A low threshold is prone to generate many wrong suspicions but ensures
                # a quick detection in the event of a real crash. Conversely, a high
                # threshold generates fewer mistakes but needs more time to detect
                # actual crashes.
                "threshold" : 10,
                # reference.conf: 214
                # How often to check for nodes marked as unreachable by the failure
                # detector
                "unreachable-nodes-reaper-interval" : "1s"
            }
        },
        # reference.conf: 476
        # Used to set the behavior of the scheduler.
        # Changing the default values may change the system behavior drastically so make
        # sure you know what you're doing! See the Scheduler section of the Akka
        # Documentation for more details.
        "scheduler" : {
            # reference.conf: 502
            # This setting selects the timer implementation which shall be loaded at
            # system start-up.
            # The class given here must implement the akka.actor.Scheduler interface
            # and offer a public constructor which takes three arguments:
            #  1) com.typesafe.config.Config
            #  2) akka.event.LoggingAdapter
            #  3) java.util.concurrent.ThreadFactory
            "implementation" : "akka.actor.LightArrayRevolverScheduler",
            # reference.conf: 508
            # When shutting down the scheduler, there will typically be a thread which
            # needs to be stopped, and this timeout determines how long to wait for
            # that to happen. In case of timeout the shutdown of the actor system will
            # proceed without running possibly still enqueued tasks.
            "shutdown-timeout" : "5s",
            # reference.conf: 486
            # The LightArrayRevolverScheduler is used as the default scheduler in the
            # system. It does not execute the scheduled tasks on exact time, but on every
            # tick, it will run everything that is (over)due. You can increase or decrease
            # the accuracy of the execution timing by specifying smaller or larger tick
            # duration. If you are scheduling a lot of tasks you should consider increasing
            # the ticks per wheel.
            # Note that it might take up to 1 tick to stop the Timer, so setting the
            # tick-duration to a high value will make shutting down the actor system
            # take longer.
            "tick-duration" : "10ms",
            # reference.conf: 493
            # The timer uses a circular wheel of buckets to store the timer tasks.
            # This should be set such that the majority of scheduled timeouts (for high
            # scheduling frequency) will be shorter than one rotation of the wheel
            # (ticks-per-wheel * ticks-duration)
            # THIS MUST BE A POWER OF TWO!
            "ticks-per-wheel" : 512
        },
        # reference.conf: 32
        # Log level for the very basic logger activated during ActorSystem startup.
        # This logger prints the log messages to stdout (System.out).
        # Options: OFF, ERROR, WARNING, INFO, DEBUG
        "stdout-loglevel" : "WARNING",
        # reference.conf: 9
        "test" : {
            # reference.conf: 25
            "calling-thread-dispatcher" : {
                # reference.conf: 26
                "type" : "akka.testkit.CallingThreadDispatcherConfigurator"
            },
            # reference.conf: 23
            # The timeout that is added as an implicit by DefaultTimeout trait
            "default-timeout" : "5s",
            # reference.conf: 16
            # duration of EventFilter.intercept waits after the block is finished until
            # all required messages are received
            "filter-leeway" : "3s",
            # reference.conf: 20
            # duration to wait in expectMsg and friends outside of within() block
            # by default
            "single-expect-default" : "3s",
            # reference.conf: 12
            # factor by which to scale timeouts during tests, e.g. to account for shared
            # build system load
            "timefactor" : 1
        },
        # reference.conf: 9
        "testconductor" : {
            # reference.conf: 13
            # Timeout for joining a barrier: this is the maximum time any participants
            # waits for everybody else to join a named barrier.
            "barrier-timeout" : "30s",
            # reference.conf: 28
            # Number of connect attempts to be made to the conductor controller
            "client-reconnects" : 10,
            # reference.conf: 25
            # amount of time for the ClientFSM to wait for the connection to the conductor
            # to be successful
            "connect-timeout" : "20s",
            # reference.conf: 33
            "netty" : {
                # reference.conf: 50
                # (I&O) Used to configure the number of I/O worker threads on client sockets
                "client-socket-worker-pool" : {
                    # reference.conf: 58
                    # The pool size factor is used to determine thread pool size
                    # using the following formula: ceil(available processors * factor).
                    # Resulting size is then bounded by the pool-size-min and
                    # pool-size-max values.
                    "pool-size-factor" : 1,
                    # reference.conf: 61
                    # Max number of threads to cap factor-based number to
                    "pool-size-max" : 2,
                    # reference.conf: 52
                    # Min number of threads to cap factor-based number to
                    "pool-size-min" : 1
                },
                # reference.conf: 35
                # (I&O) Used to configure the number of I/O worker threads on server sockets
                "server-socket-worker-pool" : {
                    # reference.conf: 43
                    # The pool size factor is used to determine thread pool size
                    # using the following formula: ceil(available processors * factor).
                    # Resulting size is then bounded by the pool-size-min and
                    # pool-size-max values.
                    "pool-size-factor" : 1,
                    # reference.conf: 46
                    # Max number of threads to cap factor-based number to
                    "pool-size-max" : 2,
                    # reference.conf: 37
                    # Min number of threads to cap factor-based number to
                    "pool-size-min" : 1
                }
            },
            # reference.conf: 21
            # Threshold for packet size in time unit above which the failure injector will
            # split the packet and deliver in smaller portions; do not give value smaller
            # than HashedWheelTimer resolution (would not make sense)
            "packet-split-threshold" : "100ms",
            # reference.conf: 16
            # Timeout for interrogation of TestConductor’s Controller actor
            "query-timeout" : "5s",
            # reference.conf: 31
            # minimum time interval which is to be inserted between reconnect attempts
            "reconnect-backoff" : "1s"
        },
        # reference.conf: 10
        # Akka version, checked against the runtime version of Akka.
        "version" : "2.3.9"
    },
    # application.conf: 3
    "application" : {
        # application.conf: 3
        # The application languages
        # ========================= #
        "langs" : "en"
    },
    # system properties
    "awt" : {
        # system properties
        "toolkit" : "sun.awt.X11.XToolkit"
    },
    # system properties
    "file" : {
        # system properties
        "encoding" : {
            # system properties
            "pkg" : "sun.io"
        },
        # system properties
        "separator" : "/"
    },
    # system properties
    "java" : {
        # system properties
        "awt" : {
            # system properties
            "graphicsenv" : "sun.awt.X11GraphicsEnvironment",
            # system properties
            "printerjob" : "sun.print.PSPrinterJob"
        },
        # system properties
        "class" : {
            # system properties
            "path" : "/home/yaoyj11/project/exo-geni/safe/super-safe/safe-server/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-lang/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-cache/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-logic/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-runtime/target/scala-2.11/classes:/home/yaoyj11/project/exo-geni/safe/super-safe/safe-styla/target/scala-2.11/classes:/home/yaoyj11/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.11.7.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.7.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.11.7.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang.modules/scala-xml_2.11/bundles/scala-xml_2.11-1.0.4.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.11/bundles/scala-parser-combinators_2.11-1.0.4.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-caching_2.11/bundles/spray-caching_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-util_2.11/bundles/spray-util_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/com.googlecode.concurrentlinkedhashmap/concurrentlinkedhashmap-lru/jars/concurrentlinkedhashmap-lru-1.4.2.jar:/home/yaoyj11/.ivy2/cache/com.google.guava/guava/bundles/guava-19.0.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.scala-logging/scala-logging_2.11/jars/scala-logging_2.11-3.1.0.jar:/home/yaoyj11/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.7.jar:/home/yaoyj11/.ivy2/cache/net.openhft/collections/bundles/collections-3.2.1.jar:/home/yaoyj11/.ivy2/cache/com.intellij/annotations/jars/annotations-12.0.jar:/home/yaoyj11/.ivy2/cache/net.openhft/lang/bundles/lang-6.4.5.jar:/home/yaoyj11/.ivy2/cache/net.openhft/compiler/bundles/compiler-2.2.0.jar:/home/yaoyj11/.ivy2/cache/org.kohsuke.jetbrains/annotations/jars/annotations-9.0.jar:/home/yaoyj11/.ivy2/cache/net.openhft/affinity/bundles/affinity-2.1.0.jar:/home/yaoyj11/.ivy2/cache/net.java.dev.jna/jna/jars/jna-4.1.0.jar:/home/yaoyj11/.ivy2/cache/net.java.dev.jna/jna-platform/jars/jna-platform-4.1.0.jar:/home/yaoyj11/.ivy2/cache/junit/junit/jars/junit-4.10.jar:/home/yaoyj11/.ivy2/cache/org.hamcrest/hamcrest-core/jars/hamcrest-core-1.1.jar:/home/yaoyj11/.ivy2/cache/org.scalatest/scalatest_2.11/bundles/scalatest_2.11-2.2.1.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-remote_2.11/jars/akka-remote_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-actor_2.11/jars/akka-actor_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe/config/bundles/config-1.2.1.jar:/home/yaoyj11/.ivy2/cache/com.google.protobuf/protobuf-java/bundles/protobuf-java-2.5.0.jar:/home/yaoyj11/.ivy2/cache/org.uncommons.maths/uncommons-maths/jars/uncommons-maths-1.2.2a.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-contrib_2.11/jars/akka-contrib_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-cluster_2.11/jars/akka-cluster_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-persistence-experimental_2.11/jars/akka-persistence-experimental_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/org.iq80.leveldb/leveldb/jars/leveldb-0.5.jar:/home/yaoyj11/.ivy2/cache/org.iq80.leveldb/leveldb-api/jars/leveldb-api-0.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-all/bundles/leveldbjni-all-1.7.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni/jars/leveldbjni-1.7.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.hawtjni/hawtjni-runtime/jars/hawtjni-runtime-1.8.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-osx/jars/leveldbjni-osx-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-linux32/jars/leveldbjni-linux32-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-linux64/jars/leveldbjni-linux64-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-win32/jars/leveldbjni-win32-1.5.jar:/home/yaoyj11/.ivy2/cache/org.fusesource.leveldbjni/leveldbjni-win64/jars/leveldbjni-win64-1.5.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-slf4j_2.11/jars/akka-slf4j_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-testkit_2.11/jars/akka-testkit_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcmail-jdk15on/jars/bcmail-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcprov-jdk15on/jars/bcprov-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcpkix-jdk15on/jars/bcpkix-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/org.bouncycastle/bcpg-jdk15on/jars/bcpg-jdk15on-1.51.jar:/home/yaoyj11/.ivy2/cache/com.ning/async-http-client/jars/async-http-client-1.8.7.jar:/home/yaoyj11/.ivy2/cache/io.netty/netty/bundles/netty-3.9.0.Final.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-can_2.11/bundles/spray-can_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-io_2.11/bundles/spray-io_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-http_2.11/bundles/spray-http_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/org.parboiled/parboiled-scala_2.11/jars/parboiled-scala_2.11-1.1.7.jar:/home/yaoyj11/.ivy2/cache/org.parboiled/parboiled-core/jars/parboiled-core-1.1.7.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-client_2.11/bundles/spray-client_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-httpx_2.11/bundles/spray-httpx_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/org.jvnet.mimepull/mimepull/jars/mimepull-1.9.5.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-json_2.11/bundles/spray-json_2.11-1.3.1.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-routing_2.11/bundles/spray-routing_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/com.chuusai/shapeless_2.11/jars/shapeless_2.11-1.2.4.jar:/home/yaoyj11/.ivy2/cache/io.spray/spray-testkit_2.11/jars/spray-testkit_2.11-1.3.3.jar:/home/yaoyj11/.ivy2/cache/commons-net/commons-net/jars/commons-net-3.4.jar:/home/yaoyj11/.ivy2/cache/jline/jline/jars/jline-2.12.jar:/home/yaoyj11/.ivy2/cache/com.github.nscala-time/nscala-time_2.11/jars/nscala-time_2.11-1.2.0.jar:/home/yaoyj11/.ivy2/cache/org.joda/joda-convert/jars/joda-convert-1.2.jar:/home/yaoyj11/.ivy2/cache/com.typesafe.akka/akka-multi-node-testkit_2.11/jars/akka-multi-node-testkit_2.11-2.3.9.jar:/home/yaoyj11/.ivy2/cache/commons-codec/commons-codec/jars/commons-codec-1.10.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpclient/jars/httpclient-4.5.2.jar:/home/yaoyj11/.ivy2/cache/commons-logging/commons-logging/jars/commons-logging-1.2.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpasyncclient/jars/httpasyncclient-4.1.2.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpcore/jars/httpcore-4.4.5.jar:/home/yaoyj11/.ivy2/cache/org.apache.httpcomponents/httpcore-nio/jars/httpcore-nio-4.4.5.jar:/home/yaoyj11/.ivy2/cache/commons-validator/commons-validator/jars/commons-validator-1.5.1.jar:/home/yaoyj11/.ivy2/cache/commons-beanutils/commons-beanutils/jars/commons-beanutils-1.9.2.jar:/home/yaoyj11/.ivy2/cache/commons-collections/commons-collections/jars/commons-collections-3.2.2.jar:/home/yaoyj11/.ivy2/cache/commons-digester/commons-digester/jars/commons-digester-1.8.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.cassandra/cassandra-all/jars/cassandra-all-3.10.jar:/home/yaoyj11/.ivy2/cache/org.xerial.snappy/snappy-java/bundles/snappy-java-1.1.1.7.jar:/home/yaoyj11/.ivy2/cache/net.jpountz.lz4/lz4/jars/lz4-1.3.0.jar:/home/yaoyj11/.ivy2/cache/com.ning/compress-lzf/bundles/compress-lzf-0.8.4.jar:/home/yaoyj11/.ivy2/cache/commons-cli/commons-cli/jars/commons-cli-1.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.commons/commons-lang3/jars/commons-lang3-3.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.commons/commons-math3/jars/commons-math3-3.2.jar:/home/yaoyj11/.ivy2/cache/org.antlr/antlr/jars/antlr-3.5.2.jar:/home/yaoyj11/.ivy2/cache/org.antlr/antlr-runtime/jars/antlr-runtime-3.5.2.jar:/home/yaoyj11/.ivy2/cache/org.antlr/ST4/jars/ST4-4.0.8.jar:/home/yaoyj11/.ivy2/cache/org.slf4j/log4j-over-slf4j/jars/log4j-over-slf4j-1.7.7.jar:/home/yaoyj11/.ivy2/cache/org.slf4j/jcl-over-slf4j/jars/jcl-over-slf4j-1.7.7.jar:/home/yaoyj11/.ivy2/cache/org.codehaus.jackson/jackson-core-asl/jars/jackson-core-asl-1.9.2.jar:/home/yaoyj11/.ivy2/cache/org.codehaus.jackson/jackson-mapper-asl/jars/jackson-mapper-asl-1.9.2.jar:/home/yaoyj11/.ivy2/cache/com.googlecode.json-simple/json-simple/jars/json-simple-1.1.jar:/home/yaoyj11/.ivy2/cache/com.boundary/high-scale-lib/jars/high-scale-lib-1.0.6.jar:/home/yaoyj11/.ivy2/cache/org.yaml/snakeyaml/bundles/snakeyaml-1.11.jar:/home/yaoyj11/.ivy2/cache/org.mindrot/jbcrypt/jars/jbcrypt-0.3m.jar:/home/yaoyj11/.ivy2/cache/io.dropwizard.metrics/metrics-core/bundles/metrics-core-3.1.0.jar:/home/yaoyj11/.ivy2/cache/io.dropwizard.metrics/metrics-jvm/bundles/metrics-jvm-3.1.0.jar:/home/yaoyj11/.ivy2/cache/com.addthis.metrics/reporter-config3/jars/reporter-config3-3.0.3.jar:/home/yaoyj11/.ivy2/cache/com.addthis.metrics/reporter-config-base/jars/reporter-config-base-3.0.3.jar:/home/yaoyj11/.ivy2/cache/org.hibernate/hibernate-validator/jars/hibernate-validator-4.3.0.Final.jar:/home/yaoyj11/.ivy2/cache/javax.validation/validation-api/jars/validation-api-1.0.0.GA.jar:/home/yaoyj11/.ivy2/cache/org.jboss.logging/jboss-logging/jars/jboss-logging-3.1.0.CR2.jar:/home/yaoyj11/.ivy2/cache/com.thinkaurelius.thrift/thrift-server/jars/thrift-server-0.3.7.jar:/home/yaoyj11/.ivy2/cache/com.lmax/disruptor/jars/disruptor-3.0.1.jar:/home/yaoyj11/.ivy2/cache/org.apache.thrift/libthrift/jars/libthrift-0.9.2.jar:/home/yaoyj11/.ivy2/cache/com.clearspring.analytics/stream/jars/stream-2.5.2.jar:/home/yaoyj11/.ivy2/cache/it.unimi.dsi/fastutil/jars/fastutil-6.5.7.jar:/home/yaoyj11/.ivy2/cache/ch.qos.logback/logback-core/jars/logback-core-1.1.3.jar:/home/yaoyj11/.ivy2/cache/ch.qos.logback/logback-classic/jars/logback-classic-1.1.3.jar:/home/yaoyj11/.ivy2/cache/org.apache.cassandra/cassandra-thrift/jars/cassandra-thrift-3.10.jar:/home/yaoyj11/.ivy2/cache/com.carrotsearch/hppc/jars/hppc-0.5.4.jar:/home/yaoyj11/.ivy2/cache/de.jflex/jflex/jars/jflex-1.6.0.jar:/home/yaoyj11/.ivy2/cache/org.apache.ant/ant/jars/ant-1.7.0.jar:/home/yaoyj11/.ivy2/cache/org.apache.ant/ant-launcher/jars/ant-launcher-1.7.0.jar:/home/yaoyj11/.ivy2/cache/com.github.rholder/snowball-stemmer/jars/snowball-stemmer-1.3.0.581.1.jar:/home/yaoyj11/.ivy2/cache/com.googlecode.concurrent-trees/concurrent-trees/jars/concurrent-trees-2.4.0.jar:/home/yaoyj11/.ivy2/cache/com.github.jbellis/jamm/jars/jamm-0.3.0.jar:/home/yaoyj11/.ivy2/cache/io.netty/netty-all/jars/netty-all-4.0.39.Final.jar:/home/yaoyj11/.ivy2/cache/joda-time/joda-time/jars/joda-time-2.4.jar:/home/yaoyj11/.ivy2/cache/org.fusesource/sigar/jars/sigar-1.6.4.jar:/home/yaoyj11/.ivy2/cache/org.eclipse.jdt.core.compiler/ecj/jars/ecj-4.4.2.jar:/home/yaoyj11/.ivy2/cache/org.caffinitas.ohc/ohc-core/jars/ohc-core-0.4.4.jar:/home/yaoyj11/.ivy2/cache/com.github.ben-manes.caffeine/caffeine/jars/caffeine-2.2.6.jar:/home/yaoyj11/.ivy2/cache/org.jctools/jctools-core/jars/jctools-core-1.2.1.jar:/home/yaoyj11/.ivy2/cache/org.scala-lang.modules/scala-async_2.11/bundles/scala-async_2.11-0.9.1.jar",
            # system properties
            "version" : "52.0"
        },
        # system properties
        "endorsed" : {
            # system properties
            "dirs" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"
        },
        # system properties
        "ext" : {
            # system properties
            "dirs" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"
        },
        # system properties
        "home" : "/usr/lib/jvm/java-8-openjdk-amd64/jre",
        # system properties
        "io" : {
            # system properties
            "tmpdir" : "/tmp"
        },
        # system properties
        "library" : {
            # system properties
            "path" : "/usr/local/lib::/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"
        },
        # system properties
        "runtime" : {
            # system properties
            "name" : "OpenJDK Runtime Environment",
            # system properties
            "version" : "1.8.0_03-Ubuntu-8u77-b03-3ubuntu3-b03"
        },
        # system properties
        "specification" : {
            # system properties
            "name" : "Java Platform API Specification",
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "1.8"
        },
        # system properties
        "vendor" : {
            # system properties
            "url" : {
                # system properties
                "bug" : "http://bugreport.sun.com/bugreport/"
            }
        },
        # system properties
        "version" : "1.8.0_03-Ubuntu",
        # system properties
        "vm" : {
            # system properties
            "info" : "mixed mode",
            # system properties
            "name" : "OpenJDK 64-Bit Server VM",
            # system properties
            "specification" : {
                # system properties
                "name" : "Java Virtual Machine Specification",
                # system properties
                "vendor" : "Oracle Corporation",
                # system properties
                "version" : "1.8"
            },
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "25.03-b03"
        }
    },
    # system properties
    "line" : {
        # system properties
        "separator" : "\n"
    },
    # system properties
    "os" : {
        # system properties
        "arch" : "amd64",
        # system properties
        "name" : "Linux",
        # system properties
        "version" : "4.4.0-21-generic"
    },
    # system properties
    "path" : {
        # system properties
        "separator" : ":"
    },
    # application.conf: 119-166
    "safe" : {
        # application.conf: 161
        # Configuration for multi-principal programming
        "multiprincipal" : {
            # application.conf: 163
            # dir of the access keys
            "accessKeyDir" : "src/main/resources/access-keys/",
            # application.conf: 162
            # dir of the keys of the multiple principals 
            "keyPairDir" : "src/main/resources/multi-principal-keys/"
        },
        # application.conf: 154-166
        "safesets" : {
            # application.conf: 154
            "cache" : {
                # application.conf: 157
                # in simple client mode, not many concurrent requests are made
                "concurrency" : 2,
                # application.conf: 155
                # 2^16 * 1kB ~ 64MB
                "initialCapacity" : 65536,
                # application.conf: 156
                # reblance after reaching this limit
                "loadFactor" : "0.75f"
            },
            # application.conf: 167
            "requestTimeout" : "30s",
            # application.conf: 182
            # storeURI = "http://152.3.145.36:808/types/safesets/buckets/safe/keys"
            "storeURI" : "https://152.3.145.36:8098/types/safesets/buckets/safe/keys"
        },
        # application.conf: 120
        "service" : {
            # application.conf: 130
            "ask-timeout" : "251s",
            # application.conf: 135
            "branchingFactor" : 0.5,
            # application.conf: 133
            "cacheSize" : 4048576,
            # application.conf: 136
            "dirName" : "/home/vamsi/safeliteBenchmark/data",
            # application.conf: 142
            "fetchPolicy" : "test",
            # application.conf: 123
            # interface = localhost
            # interface = 152.3.144.16
            "interface" : "152.3.136.36",
            # application.conf: 146
            "numSlices" : 256,
            # application.conf: 127
            # port = 11133
            "port" : 7777,
            # application.conf: 140
            "prefetchPolicy" : "preloadAndMaterialize",
            # application.conf: 131
            "requestTimeout" : "30s",
            # application.conf: 145
            # fetchPolicy = buildFromView
            # fetchPolicy = fetchFromView
            "userSize" : 16
        }
    },
    # application.conf: 42-53
    "safelang" : {
        # application.conf: 63
        "akkaTimeout" : "30s",
        # application.conf: 60
        "compilePath" : "compiledTarget",
        # application.conf: 61
        "credentialPath" : "credentialTarget",
        # application.conf: 57
        "intraQueryParallelism" : false,
        # application.conf: 49
        "jvmCompilerPath" : ".",
        # application.conf: 67
        "localSafeSets" : false,
        # application.conf: 75
        "logicEngine" : "styla",
        # application.conf: 54
        "loglevel" : "OFF",
        # application.conf: 85
        "metastore" : {
            # application.conf: 87
            "protocol" : "http",
            # application.conf: 88
            "serverID" : "",
            # application.conf: 86
            "url" : "http://152.3.145.36:8098/types/safesets/buckets/safe/keys"
        },
        # application.conf: 68
        "minContextRefreshTimeInMillis" : 1000,
        # application.conf: 71
        "perfCollectorOn" : false,
        # application.conf: 62
        "resultCache" : false,
        # application.conf: 66
        # For use of local safesets
        "safeSetsDir" : "src/main/resources/local-safesets/",
        # application.conf: 58
        "saysOperator" : true,
        # application.conf: 59
        "self" : "Self",
        # application.conf: 79
        # selfCertifyingSetToken=true
        "selfCertifyingSetToken" : false,
        # application.conf: 48
        "selfId" : "SelfId",
        # application.conf: 69
        "slangPerfFile" : "slangPerf",
        # application.conf: 81
        "ssl" : {
            # application.conf: 82
            "keystorepath" : "src/main/resources/ssl-keystores/clientkeystore.pkcs12"
        }
    },
    # application.conf: 103
    "safelog" : {
        # application.conf: 105
        "maxDepth" : 1111111,
        # application.conf: 104
        "saysOperator" : false
    },
    # application.conf: 108
    "saferuntime" : {
        # application.conf: 109
        "jvmCompilerPath" : "."
    },
    # application.conf: 112
    "safestyla" : {
        # application.conf: 113
        "indexing" : "primary",
        # application.conf: 115
        # indexing = tertiary  # for speaksfor
        "libraryOn" : true
    },
    # merge of application.conf: 36-87,reference.conf: 8
    "spray" : {
        # merge of application.conf: 36-42,reference.conf: 8
        "can" : {
            # merge of application.conf: 43,reference.conf: 189
            "client" : {
                # reference.conf: 239
                # Enables/disables an alternative request streaming mode that doesn't
                # use `Transfer-Encoding: chunked` but rather renders the individual
                # MessageChunks coming in from the application as parts of the original
                # request entity.
                # Enabling this mode causes all requests to require an explicit `Content-Length`
                # header for streaming requests.
                # Note that chunkless-streaming is implicitly enabled when streaming
                # HTTP/1.0 requests since they don't support `Transfer-Encoding: chunked`.
                "chunkless-streaming" : "off",
                # reference.conf: 254
                # The time period within which the TCP connecting process must be completed.
                # Set to `infinite` to disable.
                "connecting-timeout" : "10s",
                # application.conf: 45
                "idle-timeout" : "501s",
                # reference.conf: 250
                # For HTTPS connections this setting specified the maximum number of
                # bytes that are encrypted in one go. Large requests are broken down in
                # chunks of this size so as to already begin sending before the request has
                # been encrypted entirely.
                "max-encryption-chunk-size" : "1m",
                # reference.conf: 320
                # The (default) configuration of the HTTP message parser for the server and
                # the client.
                # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
                # overridden in `application.conf` to change the parser settings for client and server
                # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
                # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
                # where these settings are copied to.
                "parsing" : {
                    # reference.conf: 357
                    # limits for the number of different values per header type that the
                    # header cache will hold
                    "header-cache" : {
                        # reference.conf: 359
                        "Content-MD5" : 0,
                        # reference.conf: 360
                        "Date" : 0,
                        # reference.conf: 361
                        "If-Match" : 0,
                        # reference.conf: 362
                        "If-Modified-Since" : 0,
                        # reference.conf: 363
                        "If-None-Match" : 0,
                        # reference.conf: 364
                        "If-Range" : 0,
                        # reference.conf: 365
                        "If-Unmodified-Since" : 0,
                        # reference.conf: 366
                        "User-Agent" : 32,
                        # reference.conf: 358
                        "default" : 12
                    },
                    # reference.conf: 353
                    # Enables/disables the logging of warning messages in case an incoming
                    # message (request or response) contains an HTTP header which cannot be
                    # parsed into its high-level model class due to incompatible syntax.
                    # Note that, independently of this settings, spray will accept messages
                    # with such headers as long as the message as a whole would still be legal
                    # under the HTTP specification even without this header.
                    # If a header cannot be parsed into a high-level model instance it will be
                    # provided as a `RawHeader`.
                    "illegal-header-warnings" : "on",
                    # reference.conf: 372
                    # Sets the size starting from which incoming http-messages will be delivered
                    # in chunks regardless of whether chunking is actually used on the wire.
                    # Set to infinite to disable auto chunking.
                    "incoming-auto-chunking-threshold-size" : "infinite",
                    # reference.conf: 328
                    "max-chunk-ext-length" : 256,
                    # reference.conf: 329
                    "max-chunk-size" : "1m",
                    # reference.conf: 327
                    "max-content-length" : "8m",
                    # reference.conf: 326
                    "max-header-count" : 64,
                    # reference.conf: 324
                    "max-header-name-length" : 64,
                    # reference.conf: 325
                    "max-header-value-length" : "8k",
                    # reference.conf: 323
                    "max-response-reason-length" : 64,
                    # reference.conf: 322
                    # The limits for the various parts of the HTTP message parser.
                    "max-uri-length" : "2k",
                    # reference.conf: 377
                    # Enables/disables inclusion of an SSL-Session-Info header in parsed
                    # messages over SSL transports (i.e., HttpRequest on server side and
                    # HttpResponse on client side).
                    "ssl-session-info-header" : "off",
                    # reference.conf: 343
                    # Sets the strictness mode for parsing request target URIs.
                    # The following values are defined:
                    # 
                    # `strict`: RFC3986-compliant URIs are required,
                    #     a 400 response is triggered on violations
                    # 
                    # `relaxed`: all visible 7-Bit ASCII chars are allowed
                    # 
                    # `relaxed-with-raw-query`: like `relaxed` but additionally
                    #     the URI query is not parsed, but delivered as one raw string
                    #     as the `key` value of a single Query structure element.
                    # 
                    "uri-parsing-mode" : "strict"
                },
                # reference.conf: 258
                # The proxy configurations to be used for requests with the specified
                # scheme.
                "proxy" : {
                    # reference.conf: 269
                    # Proxy settings for unencrypted HTTP requests
                    # Set to 'none' to always connect directly, 'default' to use the system
                    # settings as described in http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html
                    # or specify the proxy host, port and non proxy hosts as demonstrated
                    # in the following example:
                    # http {
                    #   host = myproxy.com
                    #   port = 8080
                    #   non-proxy-hosts = ["*.direct-access.net"]
                    # }
                    "http" : "default",
                    # reference.conf: 272
                    # Proxy settings for HTTPS requests (currently unsupported)
                    "https" : "default"
                },
                # reference.conf: 219
                # the "granularity" of timeout checking for both idle connections timeouts
                # as well as request timeouts, should rarely be needed to modify.
                # If set to `infinite` request and connection timeout checking is disabled.
                "reaping-cycle" : "250 ms",
                # reference.conf: 244
                # The initial size if the buffer to render the request headers in.
                # Can be used for fine-tuning request rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "request-header-size-hint" : 512,
                # application.conf: 44
                "request-timeout" : "500s",
                # reference.conf: 229
                # If this setting is non-zero the HTTP client connections automatically
                # aggregate incoming response chunks into full HttpResponses before
                # dispatching them to the application.
                # If the size of the aggregated response surpasses the specified limit the
                # HTTP client connection is closed and an error returned.
                # Set to zero to disable automatic request chunk aggregation and have
                # ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be
                # dispatched to the application.
                "response-chunk-aggregation-limit" : "1m",
                # reference.conf: 276
                # Enables more verbose DEBUG logging for debugging SSL related issues.
                "ssl-tracing" : "off",
                # reference.conf: 12-194
                # Always contains the deployed version of spray.
                # Referenced, for example, from the `spray.can.server.server-header` setting.
                "user-agent-header" : "spray-can/1.3.3"
            },
            # reference.conf: 398
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for HttpServerConnection and HttpClientConnection actors.
            "connection-dispatcher" : "akka.actor.default-dispatcher",
            # merge of application.conf: 48,reference.conf: 282
            "host-connector" : {
                # reference.conf: 189
                "client" : {
                    # reference.conf: 239
                    # Enables/disables an alternative request streaming mode that doesn't
                    # use `Transfer-Encoding: chunked` but rather renders the individual
                    # MessageChunks coming in from the application as parts of the original
                    # request entity.
                    # Enabling this mode causes all requests to require an explicit `Content-Length`
                    # header for streaming requests.
                    # Note that chunkless-streaming is implicitly enabled when streaming
                    # HTTP/1.0 requests since they don't support `Transfer-Encoding: chunked`.
                    "chunkless-streaming" : "off",
                    # reference.conf: 254
                    # The time period within which the TCP connecting process must be completed.
                    # Set to `infinite` to disable.
                    "connecting-timeout" : "10s",
                    # reference.conf: 198
                    # The time after which an idle connection will be automatically closed.
                    # Set to `infinite` to completely disable idle timeouts.
                    "idle-timeout" : "60 s",
                    # reference.conf: 250
                    # For HTTPS connections this setting specified the maximum number of
                    # bytes that are encrypted in one go. Large requests are broken down in
                    # chunks of this size so as to already begin sending before the request has
                    # been encrypted entirely.
                    "max-encryption-chunk-size" : "1m",
                    # reference.conf: 320
                    # The (default) configuration of the HTTP message parser for the server and
                    # the client.
                    # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
                    # overridden in `application.conf` to change the parser settings for client and server
                    # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
                    # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
                    # where these settings are copied to.
                    "parsing" : {
                        # reference.conf: 357
                        # limits for the number of different values per header type that the
                        # header cache will hold
                        "header-cache" : {
                            # reference.conf: 359
                            "Content-MD5" : 0,
                            # reference.conf: 360
                            "Date" : 0,
                            # reference.conf: 361
                            "If-Match" : 0,
                            # reference.conf: 362
                            "If-Modified-Since" : 0,
                            # reference.conf: 363
                            "If-None-Match" : 0,
                            # reference.conf: 364
                            "If-Range" : 0,
                            # reference.conf: 365
                            "If-Unmodified-Since" : 0,
                            # reference.conf: 366
                            "User-Agent" : 32,
                            # reference.conf: 358
                            "default" : 12
                        },
                        # reference.conf: 353
                        # Enables/disables the logging of warning messages in case an incoming
                        # message (request or response) contains an HTTP header which cannot be
                        # parsed into its high-level model class due to incompatible syntax.
                        # Note that, independently of this settings, spray will accept messages
                        # with such headers as long as the message as a whole would still be legal
                        # under the HTTP specification even without this header.
                        # If a header cannot be parsed into a high-level model instance it will be
                        # provided as a `RawHeader`.
                        "illegal-header-warnings" : "on",
                        # reference.conf: 372
                        # Sets the size starting from which incoming http-messages will be delivered
                        # in chunks regardless of whether chunking is actually used on the wire.
                        # Set to infinite to disable auto chunking.
                        "incoming-auto-chunking-threshold-size" : "infinite",
                        # reference.conf: 328
                        "max-chunk-ext-length" : 256,
                        # reference.conf: 329
                        "max-chunk-size" : "1m",
                        # reference.conf: 327
                        "max-content-length" : "8m",
                        # reference.conf: 326
                        "max-header-count" : 64,
                        # reference.conf: 324
                        "max-header-name-length" : 64,
                        # reference.conf: 325
                        "max-header-value-length" : "8k",
                        # reference.conf: 323
                        "max-response-reason-length" : 64,
                        # reference.conf: 322
                        # The limits for the various parts of the HTTP message parser.
                        "max-uri-length" : "2k",
                        # reference.conf: 377
                        # Enables/disables inclusion of an SSL-Session-Info header in parsed
                        # messages over SSL transports (i.e., HttpRequest on server side and
                        # HttpResponse on client side).
                        "ssl-session-info-header" : "off",
                        # reference.conf: 343
                        # Sets the strictness mode for parsing request target URIs.
                        # The following values are defined:
                        # 
                        # `strict`: RFC3986-compliant URIs are required,
                        #     a 400 response is triggered on violations
                        # 
                        # `relaxed`: all visible 7-Bit ASCII chars are allowed
                        # 
                        # `relaxed-with-raw-query`: like `relaxed` but additionally
                        #     the URI query is not parsed, but delivered as one raw string
                        #     as the `key` value of a single Query structure element.
                        # 
                        "uri-parsing-mode" : "strict"
                    },
                    # reference.conf: 258
                    # The proxy configurations to be used for requests with the specified
                    # scheme.
                    "proxy" : {
                        # reference.conf: 269
                        # Proxy settings for unencrypted HTTP requests
                        # Set to 'none' to always connect directly, 'default' to use the system
                        # settings as described in http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html
                        # or specify the proxy host, port and non proxy hosts as demonstrated
                        # in the following example:
                        # http {
                        #   host = myproxy.com
                        #   port = 8080
                        #   non-proxy-hosts = ["*.direct-access.net"]
                        # }
                        "http" : "default",
                        # reference.conf: 272
                        # Proxy settings for HTTPS requests (currently unsupported)
                        "https" : "default"
                    },
                    # reference.conf: 219
                    # the "granularity" of timeout checking for both idle connections timeouts
                    # as well as request timeouts, should rarely be needed to modify.
                    # If set to `infinite` request and connection timeout checking is disabled.
                    "reaping-cycle" : "250 ms",
                    # reference.conf: 244
                    # The initial size if the buffer to render the request headers in.
                    # Can be used for fine-tuning request rendering performance but probably
                    # doesn't have to be fiddled with in most applications.
                    "request-header-size-hint" : 512,
                    # reference.conf: 214
                    # The max time period that a client connection will be waiting for a response
                    # before triggering a request timeout. The timer for this logic is not started
                    # until the connection is actually in a state to receive the response, which
                    # may be quite some time after the request has been received from the
                    # application!
                    # There are two main reasons to delay the start of the request timeout timer:
                    # 1. On the host-level API with pipelining disabled:
                    #    If the request cannot be sent immediately because all connections are
                    #    currently busy with earlier requests it has to be queued until a
                    #    connection becomes available.
                    # 2. With pipelining enabled:
                    #    The request timeout timer starts only once the response for the
                    #    preceding request on the connection has arrived.
                    # Set to `infinite` to completely disable request timeouts.
                    "request-timeout" : "20 s",
                    # reference.conf: 229
                    # If this setting is non-zero the HTTP client connections automatically
                    # aggregate incoming response chunks into full HttpResponses before
                    # dispatching them to the application.
                    # If the size of the aggregated response surpasses the specified limit the
                    # HTTP client connection is closed and an error returned.
                    # Set to zero to disable automatic request chunk aggregation and have
                    # ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be
                    # dispatched to the application.
                    "response-chunk-aggregation-limit" : "1m",
                    # reference.conf: 276
                    # Enables more verbose DEBUG logging for debugging SSL related issues.
                    "ssl-tracing" : "off",
                    # reference.conf: 12-194
                    # Always contains the deployed version of spray.
                    # Referenced, for example, from the `spray.can.server.server-header` setting.
                    "user-agent-header" : "spray-can/1.3.3"
                },
                # reference.conf: 307
                # The time after which an idle `HttpHostConnector` (without open
                # connections) will automatically terminate itself.
                # Set to `infinite` to completely disable idle timeouts.
                "idle-timeout" : "30 s",
                # application.conf: 49
                "max-connections" : 10000,
                # reference.conf: 297
                # Configures redirection following.
                # If set to zero redirection responses will not be followed, i.e. they'll be returned to the user as is.
                # If set to a value > zero redirection responses will be followed up to the given number of times.
                # If the redirection chain is longer than the configured value the first redirection response that is
                # is not followed anymore is returned to the user as is.
                "max-redirects" : 0,
                # reference.conf: 290
                # The maximum number of times an `HttpHostConnector` attempts to repeat
                # failed requests (if the request can be safely retried) before
                # giving up and returning an error.
                "max-retries" : 5,
                # reference.conf: 302
                # If this setting is enabled, the `HttpHostConnector` pipelines requests
                # across connections, otherwise only one single request can be "open"
                # on a particular HTTP connection.
                "pipelining" : "off"
            },
            # reference.conf: 390
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for the HttpHostConnector actors.
            "host-connector-dispatcher" : "akka.actor.default-dispatcher",
            # reference.conf: 394
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for HttpListener actors.
            "listener-dispatcher" : "akka.actor.default-dispatcher",
            # reference.conf: 382
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for the HttpManager.
            "manager-dispatcher" : "akka.actor.default-dispatcher",
            # reference.conf: 320
            # The (default) configuration of the HTTP message parser for the server and
            # the client.
            # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
            # overridden in `application.conf` to change the parser settings for client and server
            # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
            # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
            # where these settings are copied to.
            "parsing" : {
                # reference.conf: 357
                # limits for the number of different values per header type that the
                # header cache will hold
                "header-cache" : {
                    # reference.conf: 359
                    "Content-MD5" : 0,
                    # reference.conf: 360
                    "Date" : 0,
                    # reference.conf: 361
                    "If-Match" : 0,
                    # reference.conf: 362
                    "If-Modified-Since" : 0,
                    # reference.conf: 363
                    "If-None-Match" : 0,
                    # reference.conf: 364
                    "If-Range" : 0,
                    # reference.conf: 365
                    "If-Unmodified-Since" : 0,
                    # reference.conf: 366
                    "User-Agent" : 32,
                    # reference.conf: 358
                    "default" : 12
                },
                # reference.conf: 353
                # Enables/disables the logging of warning messages in case an incoming
                # message (request or response) contains an HTTP header which cannot be
                # parsed into its high-level model class due to incompatible syntax.
                # Note that, independently of this settings, spray will accept messages
                # with such headers as long as the message as a whole would still be legal
                # under the HTTP specification even without this header.
                # If a header cannot be parsed into a high-level model instance it will be
                # provided as a `RawHeader`.
                "illegal-header-warnings" : "on",
                # reference.conf: 372
                # Sets the size starting from which incoming http-messages will be delivered
                # in chunks regardless of whether chunking is actually used on the wire.
                # Set to infinite to disable auto chunking.
                "incoming-auto-chunking-threshold-size" : "infinite",
                # reference.conf: 328
                "max-chunk-ext-length" : 256,
                # reference.conf: 329
                "max-chunk-size" : "1m",
                # reference.conf: 327
                "max-content-length" : "8m",
                # reference.conf: 326
                "max-header-count" : 64,
                # reference.conf: 324
                "max-header-name-length" : 64,
                # reference.conf: 325
                "max-header-value-length" : "8k",
                # reference.conf: 323
                "max-response-reason-length" : 64,
                # reference.conf: 322
                # The limits for the various parts of the HTTP message parser.
                "max-uri-length" : "2k",
                # reference.conf: 377
                # Enables/disables inclusion of an SSL-Session-Info header in parsed
                # messages over SSL transports (i.e., HttpRequest on server side and
                # HttpResponse on client side).
                "ssl-session-info-header" : "off",
                # reference.conf: 343
                # Sets the strictness mode for parsing request target URIs.
                # The following values are defined:
                # 
                # `strict`: RFC3986-compliant URIs are required,
                #     a 400 response is triggered on violations
                # 
                # `relaxed`: all visible 7-Bit ASCII chars are allowed
                # 
                # `relaxed-with-raw-query`: like `relaxed` but additionally
                #     the URI query is not parsed, but delivered as one raw string
                #     as the `key` value of a single Query structure element.
                # 
                "uri-parsing-mode" : "strict"
            },
            # merge of application.conf: 36,reference.conf: 10
            "server" : {
                # reference.conf: 168
                # Enables/disables automatic back-pressure handling by write buffering and
                # receive throttling
                "automatic-back-pressure-handling" : "on",
                # reference.conf: 170
                "back-pressure" : {
                    # reference.conf: 174
                    # The reciprocal rate of requested Acks per NoAcks. E.g. the default value
                    # '10' means that every 10th write request is acknowledged. This affects the
                    # number of writes each connection has to buffer even in absence of back-pressure.
                    "noack-rate" : 10,
                    # reference.conf: 179
                    # The lower limit the write queue size has to shrink to before reads are resumed.
                    # Use 'infinite' to disable the low-watermark so that reading is resumed instantly
                    # after the next successful write.
                    "reading-low-watermark" : "infinite"
                },
                # reference.conf: 136
                # The time period within which the TCP binding process must be completed.
                # Set to `infinite` to disable.
                "bind-timeout" : "1s",
                # reference.conf: 55
                # The period during which a service must respond to a `ChunkedRequestStart` message
                # with a `RegisterChunkHandler` message. During the registration period reading from
                # the network is suspended. It is still possible that some chunks have already been
                # received which will be buffered until the registration is received or the timeout is
                # triggered. If the timeout is triggered the connection is immediately aborted.
                "chunkhandler-registration-timeout" : "500 ms",
                # reference.conf: 98
                # Enables/disables an alternative response streaming mode that doesn't
                # use `Transfer-Encoding: chunked` but rather renders the individual
                # MessageChunks coming in from the application as parts of the original
                # response entity.
                # Enabling this mode causes all connections to be closed after a streaming
                # response has been finished since there is no other way to signal the
                # response end to the client.
                # Note that chunkless-streaming is implicitly enabled when streaming
                # responses to HTTP/1.0 clients (since they don't support
                # `Transfer-Encoding: chunked`)
                "chunkless-streaming" : "off",
                # reference.conf: 164
                # If this setting is empty the server only accepts requests that carry a
                # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
                # Set to a non-empty value to be used in lieu of a missing or empty `Host`
                # header to make the server accept such requests.
                # Note that the server will never accept HTTP/1.1 request without a `Host`
                # header, i.e. this setting only affects HTTP/1.1 requests with an empty
                # `Host` header as well as HTTP/1.0 requests.
                # Examples: `www.spray.io` or `example.com:8080`
                "default-host-header" : "",
                # application.conf: 38
                "idle-timeout" : "501s",
                # application.conf: 39
                "max-connections" : 100000,
                # reference.conf: 132
                # For HTTPS connections this setting specified the maximum number of
                # bytes that are encrypted in one go. Large responses are broken down in
                # chunks of this size so as to already begin sending before the response has
                # been encrypted entirely.
                "max-encryption-chunk-size" : "1m",
                # reference.conf: 320
                # The (default) configuration of the HTTP message parser for the server and
                # the client.
                # IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can't be directly
                # overridden in `application.conf` to change the parser settings for client and server
                # altogether (see https://github.com/spray/spray/issues/346). Instead, override the
                # concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`
                # where these settings are copied to.
                "parsing" : {
                    # reference.conf: 357
                    # limits for the number of different values per header type that the
                    # header cache will hold
                    "header-cache" : {
                        # reference.conf: 359
                        "Content-MD5" : 0,
                        # reference.conf: 360
                        "Date" : 0,
                        # reference.conf: 361
                        "If-Match" : 0,
                        # reference.conf: 362
                        "If-Modified-Since" : 0,
                        # reference.conf: 363
                        "If-None-Match" : 0,
                        # reference.conf: 364
                        "If-Range" : 0,
                        # reference.conf: 365
                        "If-Unmodified-Since" : 0,
                        # reference.conf: 366
                        "User-Agent" : 32,
                        # reference.conf: 358
                        "default" : 12
                    },
                    # reference.conf: 353
                    # Enables/disables the logging of warning messages in case an incoming
                    # message (request or response) contains an HTTP header which cannot be
                    # parsed into its high-level model class due to incompatible syntax.
                    # Note that, independently of this settings, spray will accept messages
                    # with such headers as long as the message as a whole would still be legal
                    # under the HTTP specification even without this header.
                    # If a header cannot be parsed into a high-level model instance it will be
                    # provided as a `RawHeader`.
                    "illegal-header-warnings" : "on",
                    # reference.conf: 372
                    # Sets the size starting from which incoming http-messages will be delivered
                    # in chunks regardless of whether chunking is actually used on the wire.
                    # Set to infinite to disable auto chunking.
                    "incoming-auto-chunking-threshold-size" : "infinite",
                    # reference.conf: 328
                    "max-chunk-ext-length" : 256,
                    # reference.conf: 329
                    "max-chunk-size" : "1m",
                    # reference.conf: 327
                    "max-content-length" : "8m",
                    # reference.conf: 326
                    "max-header-count" : 64,
                    # reference.conf: 324
                    "max-header-name-length" : 64,
                    # reference.conf: 325
                    "max-header-value-length" : "8k",
                    # reference.conf: 323
                    "max-response-reason-length" : 64,
                    # reference.conf: 322
                    # The limits for the various parts of the HTTP message parser.
                    "max-uri-length" : "2k",
                    # reference.conf: 377
                    # Enables/disables inclusion of an SSL-Session-Info header in parsed
                    # messages over SSL transports (i.e., HttpRequest on server side and
                    # HttpResponse on client side).
                    "ssl-session-info-header" : "off",
                    # reference.conf: 343
                    # Sets the strictness mode for parsing request target URIs.
                    # The following values are defined:
                    # 
                    # `strict`: RFC3986-compliant URIs are required,
                    #     a 400 response is triggered on violations
                    # 
                    # `relaxed`: all visible 7-Bit ASCII chars are allowed
                    # 
                    # `relaxed-with-raw-query`: like `relaxed` but additionally
                    #     the URI query is not parsed, but delivered as one raw string
                    #     as the `key` value of a single Query structure element.
                    # 
                    "uri-parsing-mode" : "strict"
                },
                # reference.conf: 154
                # The time after which a connection is aborted (RST) after a parsing error
                # occurred. The timeout prevents a connection which is already known to be
                # erroneous from receiving evermore data even if all of the data will be ignored.
                # However, in case of a connection abortion the client usually doesn't properly
                # receive the error response. This timeout is a trade-off which allows the client
                # some time to finish its request and receive a proper error response before the
                # connection is forcibly closed to free resources.
                "parsing-error-abort-timeout" : "2s",
                # reference.conf: 33
                # The maximum number of requests that are accepted (and dispatched to
                # the application) on one single connection before the first request
                # has to be completed.
                # Incoming requests that would cause the pipelining limit to be exceeded
                # are not read from the connections socket so as to build up "back-pressure"
                # to the client via TCP flow control.
                # A setting of 1 disables HTTP pipelining, since only one request per
                # connection can be "open" (i.e. being processed by the application) at any
                # time. Set to higher values to enable HTTP pipelining.
                # Set to 'disabled' for completely disabling pipelining limits
                # (not recommended on public-facing servers due to risk of DoS attacks).
                # This value must be > 0 and <= 128.
                "pipelining-limit" : 1,
                # reference.conf: 78
                # Enables/disables the addition of a `Raw-Request-URI` header holding the
                # original raw request URI as the client has sent it.
                "raw-request-uri-header" : "off",
                # reference.conf: 65
                # The "granularity" of timeout checking for both idle connections timeouts
                # as well as request timeouts, should rarely be needed to modify.
                # If set to `infinite` request and connection timeout checking is disabled.
                "reaping-cycle" : "250 ms",
                # reference.conf: 145
                # The time period within which a connection handler must have been
                # registered after the bind handler has received a `Connected` event.
                # Set to `infinite` to disable.
                "registration-timeout" : "1s",
                # reference.conf: 74
                # Enables/disables the addition of a `Remote-Address` header
                # holding the clients (remote) IP address.
                "remote-address-header" : "off",
                # reference.conf: 121
                # If this setting is non-zero the HTTP server automatically aggregates
                # incoming request chunks into full HttpRequests before dispatching them to
                # the application. If the size of the aggregated requests surpasses the
                # specified limit the server responds with a `413 Request Entity Too Large`
                # error response before closing the connection.
                # Set to zero to disable automatic request chunk aggregation and have
                # ChunkedRequestStart, MessageChunk and ChunkedMessageEnd messages be
                # dispatched to the handler.
                "request-chunk-aggregation-limit" : "1m",
                # application.conf: 37
                "request-timeout" : "500s",
                # reference.conf: 126
                # The initial size if the buffer to render the response headers in.
                # Can be used for fine-tuning response rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "response-header-size-hint" : 512,
                # reference.conf: 12-13
                # Always contains the deployed version of spray.
                # Referenced, for example, from the `spray.can.server.server-header` setting.
                "server-header" : "spray-can/1.3.3",
                # reference.conf: 19
                # Enables/disables SSL encryption.
                # If enabled the server uses the implicit `ServerSSLEngineProvider` member
                # of the `Bind` command to create `SSLEngine` instances for the underlying
                # IO connection.
                "ssl-encryption" : "off",
                # reference.conf: 183
                # Enables more verbose DEBUG logging for debugging SSL related issues.
                "ssl-tracing" : "off",
                # reference.conf: 70
                # Enables/disables support for statistics collection and querying.
                # Even though stats keeping overhead is small,
                # for maximum performance switch off when not needed.
                "stats-support" : "on",
                # reference.conf: 60
                # The path of the actor to send `spray.http.Timedout` messages to.
                # If empty all `Timedout` messages will go to the "regular" request
                # handling actor.
                "timeout-handler" : "",
                # reference.conf: 48
                # After a `Timedout` message has been sent to the timeout handler and the
                # request still hasn't been completed after the time period set here
                # the server will complete the request itself with an error response.
                # Set to `infinite` to disable timeout timeouts.
                "timeout-timeout" : "2 s",
                # reference.conf: 86
                # Enables/disables automatic handling of HEAD requests.
                # If this setting is enabled the server dispatches HEAD requests as GET
                # requests to the application and automatically strips off all message
                # bodies from outgoing responses.
                # Note that, even when this setting is off the server will never send
                # out message bodies on responses to HEAD requests.
                "transparent-head-requests" : "on",
                # reference.conf: 140
                # The time period within which the TCP unbinding process must be completed.
                # Set to `infinite` to disable.
                "unbind-timeout" : "1s",
                # reference.conf: 111
                # Enables/disables the logging of the full (potentially multiple line)
                # error message to the server logs.
                # If disabled only a single line will be logged.
                "verbose-error-logging" : "off",
                # reference.conf: 106
                # Enables/disables the returning of more detailed error messages to
                # the client in the error response.
                # Should be disabled for browser-facing APIs due to the risk of XSS attacks
                # and (probably) enabled for internal or non-browser APIs.
                # Note that spray will always produce log messages containing the full
                # error details.
                "verbose-error-messages" : "off"
            },
            # reference.conf: 386
            # Fully qualified config path which holds the dispatcher configuration
            # to be used for the HttpClientSettingsGroup actors.
            "settings-group-dispatcher" : "akka.actor.default-dispatcher"
        },
        # application.conf: 87
        "client" : {
            # application.conf: 90
            # the maximum number of parallel connections that an HttpConduit
            # is allowed to establish to a host, must be greater than zero
            "max-connections" : 100000
        },
        # reference.conf: 8
        "routing" : {
            # reference.conf: 22
            # the size of an individual chunk when streaming file content
            "file-chunking-chunk-size" : "128k",
            # reference.conf: 19
            # the minimal file size triggering file content streaming
            # set to zero to disable automatic file-chunking in the FileAndResourceDirectives
            "file-chunking-threshold-size" : "128k",
            # reference.conf: 25
            # Enables/disables ETag and `If-Modified-Since` support for FileAndResourceDirectives
            "file-get-conditional" : "on",
            # reference.conf: 38
            # the maximum size between two requested ranges.
            # Ranges with less space in between will be coalesced.
            "range-coalescing-threshold" : 80,
            # reference.conf: 42
            # the maximum number of allowed ranges per request.
            # Requests with more ranges will be rejected due to DOS suspicion.
            "range-count-limit" : 16,
            # reference.conf: 28
            # Enables/disables the rendering of the "rendered by" footer in directory listings
            "render-vanity-footer" : "yes",
            # reference.conf: 32
            # a config section holding plain-text user/password entries
            # for the default FromConfigUserPassAuthenticator
            "users" : {},
            # reference.conf: 15
            # Enables/disables the returning of more detailed error messages to the
            # client in the error response
            # Should be disabled for browser-facing APIs due to the risk of XSS attacks
            # and (probably) enabled for internal or non-browser APIs
            # (Note that spray will always produce log messages containing the full error details)
            "verbose-error-messages" : "off"
        },
        # reference.conf: 12
        # Always contains the deployed version of spray.
        # Referenced, for example, from the `spray.can.server.server-header` setting.
        "version" : "1.3.3"
    },
    # system properties
    "sun" : {
        # system properties
        "arch" : {
            # system properties
            "data" : {
                # system properties
                "model" : "64"
            }
        },
        # system properties
        "boot" : {
            # system properties
            "class" : {
                # system properties
                "path" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes"
            },
            # system properties
            "library" : {
                # system properties
                "path" : "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64"
            }
        },
        # system properties
        "cpu" : {
            # system properties
            "endian" : "little",
            # system properties
            "isalist" : ""
        },
        # system properties
        "io" : {
            # system properties
            "unicode" : {
                # system properties
                "encoding" : "UnicodeLittle"
            }
        },
        # system properties
        "java" : {
            # system properties
            "command" : "safe.server.BootService -f /home/yaoyj11/project/exo-geni/safe/super-safe/safe-apps/safe-network/exo-geni/stitch-routing.slang -r safeService -kd src/main/resources/key",
            # system properties
            "launcher" : "SUN_STANDARD"
        },
        # system properties
        "jnu" : {
            # system properties
            "encoding" : "UTF-8"
        },
        # system properties
        "management" : {
            # system properties
            "compiler" : "HotSpot 64-Bit Tiered Compilers"
        },
        # system properties
        "os" : {
            # system properties
            "patch" : {
                # system properties
                "level" : "unknown"
            }
        }
    },
    # system properties
    "user" : {
        # system properties
        "country" : "US",
        # system properties
        "dir" : "/home/yaoyj11/project/exo-geni/safe/super-safe/safe-server",
        # system properties
        "home" : "/home/yaoyj11",
        # system properties
        "language" : "en",
        # system properties
        "name" : "yaoyj11",
        # system properties
        "timezone" : ""
    }
}

2017-06-152 13:51:31.205 [SafeSystem-akka.actor.default-dispatcher-5] [34mINFO [0;39m [36mHttpListener[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - Bound to /152.3.136.36:7777
2017-06-152 13:51:31.206 [SafeSystem-akka.actor.default-dispatcher-8] [34mINFO [0;39m [36mDeadLetterActorRef[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - Message [akka.io.Tcp$Bound] from Actor[akka://SafeSystem/user/IO-HTTP/listener-0#317945585] to Actor[akka://SafeSystem/deadLetters] was not delivered. [1] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
[KeyPairManager] load key pairs from src/main/resources/key
[KeyPairManager] number of key pairs: 6
2017-06-152 13:51:31.668 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.util.KeyPairManager$class loadKeyPairs}[0;39m - All principals:
2017-06-152 13:51:31.710 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.util.KeyPairManager$$anonfun$loadKeyPairs$1 apply}[0;39m - key_p3: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:51:31.711 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.util.KeyPairManager$$anonfun$loadKeyPairs$1 apply}[0;39m - key_p6: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:31.712 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.util.KeyPairManager$$anonfun$loadKeyPairs$1 apply}[0;39m - key_p2: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:31.713 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.util.KeyPairManager$$anonfun$loadKeyPairs$1 apply}[0;39m - key_p1: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:51:31.714 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.util.KeyPairManager$$anonfun$loadKeyPairs$1 apply}[0;39m - key_p4: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:51:31.715 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.util.KeyPairManager$$anonfun$loadKeyPairs$1 apply}[0;39m - key_p5: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
[SafelangManager] maximumEnvcontexts: 2147483647
============parse file===========
/home/yaoyj11/project/exo-geni/safe/super-safe/safe-apps/safe-network/exo-geni/stitch-routing.slang
=================================
[slangParser]: build indices: defenv0  nil
[slangParser] stmts  SetVersion :- defenv(SetVersion, 'set29').
[slangParser]: build indices: defenv0  nil
[slangParser] stmts  PolicyVersion :- defenv(PolicyVersion, 'policy23').
[slangParser]: build indices: defenv0  nil
[slangParser] stmts  RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').


=== [Safelang/StylaParser]  parse using styla ===
principal($SelfKey) :- spec("identity set for $CN").
  
============================================

[slangParser]: build indices: defcon0  makeMyIdentitySet1
[slangParser] stmts  makeMyIdentitySet(?CN) :- spec('Construct the identity set for self'), defcon(makeMyIdentitySet(?CN), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey,?CN,?Self; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)).
[slangParser]: build indices: defpost0  postIdSet1
[slangParser] stmts  postIdSet(?CN) :- defpost(postIdSet(?CN), [makeMyIdentitySet(?CN)]).


=== [Safelang/StylaParser]  parse using styla ===
link($Self).
    label("subject($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  makeMySubjectSet0
[slangParser] stmts  makeMySubjectSet() :- spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self,?SetVersion,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)).


=== [Safelang/StylaParser]  parse using styla ===
link($Token).
    label("subject($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  addTokenToSubjectSet1
[slangParser] stmts  addTokenToSubjectSet(?Token) :- spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet(?Token), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)).
[slangParser]: build indices: defpost0  postSubjectSet0
[slangParser] stmts  postSubjectSet() :- defpost(postSubjectSet(), [makeMySubjectSet()]).
[slangParser]: build indices: defpost0  updateSubjectSet1
[slangParser] stmts  updateSubjectSet(?Token) :- defpost(updateSubjectSet(?Token), [addTokenToSubjectSet(?Token)]).


=== [Safelang/StylaParser]  parse using styla ===
allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-
      endorsePA(?PA),
      ?PA: endorse(?Bob),
      ?Bob: stitch(?BobSlice,?ReservID, ?Slice, ?Node).

    label("stitch policy($PolicyVersion)").
  
============================================

[slangParser]: build indices: defcon0  stitchPolicy0
[slangParser] stmts  stitchPolicy() :- spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)).
[slangParser]: build indices: defpost0  postStitchPolicy0
[slangParser] stmts  postStitchPolicy() :- defpost(postStitchPolicy(), [stitchPolicy()]).


=== [Safelang/StylaParser]  parse using styla ===
stitch($MySliceName,$ReserveID,$Slice,$Node).
    label("stitch request($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  stitchRequest4
[slangParser] stmts  stitchRequest(?MySliceName, ?ReserveID, ?Slice, ?Node) :- spec('customer post a sttich request'), defcon(stitchRequest(?MySliceName, ?ReserveID, ?Slice, ?Node), SetTerm(id = StrLit(afqWNJTU1xgEbQDhvJrJQQ); argRefs = StrLit($MySliceName),StrLit($ReserveID),StrLit($Slice),StrLit($Node),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?MySliceName,?ReserveID,?Slice,?Node,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch request(,_1721146446,))))), Map($MySliceName -> $_1576389546, $ReserveID -> $_2209007774, $Slice -> $_2213640632, $Node -> $_1089890226, $SetVersion -> _1721146446))), StrLit(stitch4) -> Set(StyStmt(List(stitch($_1576389546,$_2209007774,$_2213640632,$_1089890226)), Map($MySliceName -> $_1576389546, $ReserveID -> $_2209007774, $Slice -> $_2213640632, $Node -> $_1089890226, $SetVersion -> _1721146446)))),None)).
[slangParser]: build indices: defpost0  postStitchRequest4
[slangParser] stmts  postStitchRequest(?MySliceName, ?ReservID, ?Slice, ?Node) :- defpost(postStitchRequest(?MySliceName, ?ReservID, ?Slice, ?Node), [stitchRequest(?MySliceName, ?ReservID, ?Slice, ?Node)]).


=== [Safelang/StylaParser]  parse using styla ===
endorse($Member).
    label('endorse project member($SetVersion)').
  
============================================

[slangParser]: build indices: defcon0  endorsePM1
[slangParser] stmts  endorsePM(?Member) :- spec('Endorse a project member'), defcon(endorsePM(?Member), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Member,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)).
[slangParser]: build indices: defpost0  postEndorsePM1
[slangParser] stmts  postEndorsePM(?Member) :- defpost(postEndorsePM(?Member), [endorsePM(?Member)]).


=== [Safelang/StylaParser]  parse using styla ===
endorsePA($PA).
    label("my project authorization($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  endorsePA1
[slangParser] stmts  endorsePA(?PA) :- spec('carrierSlice states PA'), defcon(endorsePA(?PA), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PA,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)).
[slangParser]: build indices: defpost0  postEndorsePA1
[slangParser] stmts  postEndorsePA(?PA) :- defpost(postEndorsePA(?PA), [endorsePA(?PA)]).


=== [Safelang/StylaParser]  parse using styla ===
link($StitchPolicy).
    link($PASet).
    link($SubjectToken).
    link($RequestToken).
    allowStitch($Bob,$ClientSlice,$ReservID,$Slice,$Node)?
  
============================================

[slangParser]: build indices: defguard0  verifyStitch5
[slangParser] stmts  verifyStitch(?Bob, ?ClientSlice, ?ReservID, ?Slice, ?Node) :- ?StitchPolicy := label("stitch policy($PolicyVersion)"), ?PASet := label("my project authorization($SetVersion)"), ?SubjectToken := label(?Bob, "subject($SetVersion)"), ?RequestToken := label(?Bob, "stitch request($SetVersion)"), defguard(verifyStitch(?Bob, ?ClientSlice, ?ReservID, ?Slice, ?Node), SetTerm(id = StrLit(yZQEjM71DXqxm3Pq2DhZhw); argRefs = StrLit($StitchPolicy),StrLit($PASet),StrLit($SubjectToken),StrLit($RequestToken),StrLit($Bob),StrLit($ClientSlice),StrLit($ReservID),StrLit($Slice),StrLit($Node),StrLit($Self),StrLit($SelfKey); args = ?StitchPolicy,?PASet,?SubjectToken,?RequestToken,?Bob,?ClientSlice,?ReservID,?Slice,?Node,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(allowStitch($_4222506030,$_942168416,$_3523420572,$_4231548598,$_1975417402))?, Map($StitchPolicy -> $_4124119780, $PASet -> $_1928730188, $SubjectToken -> $_1991478854, $RequestToken -> $_2274701322, $Bob -> $_4222506030, $ClientSlice -> $_942168416, $ReservID -> $_3523420572, $Slice -> $_4231548598, $Node -> $_1975417402))), StrLit(_link) -> Set(StyStmt(List(link($_4124119780)), Map($StitchPolicy -> $_4124119780, $PASet -> $_1928730188, $SubjectToken -> $_1991478854, $RequestToken -> $_2274701322, $Bob -> $_4222506030, $ClientSlice -> $_942168416, $ReservID -> $_3523420572, $Slice -> $_4231548598, $Node -> $_1975417402)), StyStmt(List(link($_1928730188)), Map($StitchPolicy -> $_4124119780, $PASet -> $_1928730188, $SubjectToken -> $_1991478854, $RequestToken -> $_2274701322, $Bob -> $_4222506030, $ClientSlice -> $_942168416, $ReservID -> $_3523420572, $Slice -> $_4231548598, $Node -> $_1975417402)), StyStmt(List(link($_1991478854)), Map($StitchPolicy -> $_4124119780, $PASet -> $_1928730188, $SubjectToken -> $_1991478854, $RequestToken -> $_2274701322, $Bob -> $_4222506030, $ClientSlice -> $_942168416, $ReservID -> $_3523420572, $Slice -> $_4231548598, $Node -> $_1975417402)), StyStmt(List(link($_2274701322)), Map($StitchPolicy -> $_4124119780, $PASet -> $_1928730188, $SubjectToken -> $_1991478854, $RequestToken -> $_2274701322, $Bob -> $_4222506030, $ClientSlice -> $_942168416, $ReservID -> $_3523420572, $Slice -> $_4231548598, $Node -> $_1975417402)))),None)).


=== [Safelang/StylaParser]  parse using styla ===
route(?DstIP,?Path) :-
      authorizedAdvertise(?Dst,?DstIPSet,?Path,$Self),
      ?DstIP <: ?DstIPSet.

    authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-
      ?Speaker: advertise(?DstIP,?Path,?AS),
      ownPrefix(?Speaker,?DstIPSet),
      ?DstIP <: ?DstIPSet.

    authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-
      eq([?Head|?Tail],?Path),
      ?Speaker:advertise(?DstIP,?Path,?AS),
      authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),
      ?DstIP <: ?DstIPSet.

    label("routing policy($PolicyVersion)").
  
============================================

[slangParser]: build indices: defcon0  routingPolicy0
[slangParser] stmts  routingPolicy() :- defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self,?PolicyVersion,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)).
[slangParser]: build indices: defpost0  postRoutingPolicy0
[slangParser] stmts  postRoutingPolicy() :- defpost(postRoutingPolicy(), [routingPolicy()]).


=== [Safelang/StylaParser]  parse using styla ===
ownPrefix(?Prcpl,?Prefix):-
      $RpkiRoot: allocate(?Prcpl,?Prefix).

    ownPrefix(?Prcpl,?Prefix):-
      ?UpStream: allocate(?Prcpl,?Prefix),
      ownPrefix(?UpStream,?PrefixSet),
      ?Prefix <: ?PrefixSet.
    label("own prefix policy($PolicyVersion)").
  
============================================

[slangParser]: build indices: defcon0  ownPrefixPolicy0
[slangParser] stmts  ownPrefixPolicy() :- defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot,?PolicyVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)).
[slangParser]: build indices: defpost0  postOwnPrefixPolicy0
[slangParser] stmts  postOwnPrefixPolicy() :- defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]).


=== [Safelang/StylaParser]  parse using styla ===
link($PathToken).
    advertise($DstIP,$Path,$Target).
    label("Advertise/$Target/$DstIP/$Len ($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  advertiseRoute5
[slangParser] stmts  advertiseRoute(?DstIP, ?Path, ?Target, ?Src, ?Len) :- ?PathToken := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(?DstIP, ?Path, ?Target, ?Src, ?Len), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken,?DstIP,?Path,?Target,?Len,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)).
[slangParser]: build indices: defpost0  postAdvertise5
[slangParser] stmts  postAdvertise(?DstIP, ?Path, ?Target, ?Src, ?Len) :- defpost(postAdvertise(?DstIP, ?Path, ?Target, ?Src, ?Len), [advertiseRoute(?DstIP, ?Path, ?Target, ?Src, ?Len)]).


=== [Safelang/StylaParser]  parse using styla ===
link($Token).
    advertise($DstIP,$Path,$Target).
    label("Advertise/$Target/$DstIP/$Len ($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  startRoute4
[slangParser] stmts  startRoute(?DstIP, ?Path, ?Target, ?Len) :- ?Token := label("Token for IP allocation/?DstIP($SetVersion)"), defcon(startRoute(?DstIP, ?Path, ?Target, ?Len), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token,?DstIP,?Path,?Target,?Len,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)).
[slangParser]: build indices: defpost0  postInitRoute4
[slangParser] stmts  postInitRoute(?DstIP, ?Path, ?Target, ?Len) :- defpost(postInitRoute(?DstIP, ?Path, ?Target, ?Len), [startRoute(?DstIP, ?Path, ?Target, ?Len)]).


=== [Safelang/StylaParser]  parse using styla ===
link($Token).
    label("Path/$Src/$DstIP/$Len ($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  linkRoute4
[slangParser] stmts  linkRoute(?Token, ?DstIP, ?Src, ?Len) :- spec('link a token for an advertised path'), defcon(linkRoute(?Token, ?DstIP, ?Src, ?Len), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token,?Src,?DstIP,?Len,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)).
[slangParser]: build indices: defpost0  postPathToken4
[slangParser] stmts  postPathToken(?Token, ?DstIP, ?Src, ?Len) :- defpost(postPathToken(?Token, ?DstIP, ?Src, ?Len), [linkRoute(?Token, ?DstIP, ?Src, ?Len)]).


=== [Safelang/StylaParser]  parse using styla ===
link($IPSetToken).
    allocate($Prcpl,$Prefix).
    label("IP allocation/$Prcpl($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  ipAllocate3
[slangParser] stmts  ipAllocate(?Prcpl, ?Prefix, ?DlgPrefix) :- ?IPSetToken := label("Token for IP allocation/?DlgPrefix($SetVersion)"), defcon(ipAllocate(?Prcpl, ?Prefix, ?DlgPrefix), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?IPSetToken,?Prcpl,?Prefix,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)).
[slangParser]: build indices: defpost0  postIPAllocate3
[slangParser] stmts  postIPAllocate(?Prcpl, ?Prefix, ?DlgPrefix) :- defpost(postIPAllocate(?Prcpl, ?Prefix, ?DlgPrefix), [ipAllocate(?Prcpl, ?Prefix, ?DlgPrefix)]).


=== [Safelang/StylaParser]  parse using styla ===
link($Token).
    label("Token for IP allocation/$Prefix($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  addDlgToken2
[slangParser] stmts  addDlgToken(?Token, ?Prefix) :- spec('link a token for allocated IP range'), defcon(addDlgToken(?Token, ?Prefix), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token,?Prefix,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)).
[slangParser]: build indices: defpost0  postDlgToken2
[slangParser] stmts  postDlgToken(?Token, ?Prefix) :- defpost(postDlgToken(?Token, ?Prefix), [addDlgToken(?Token, ?Prefix)]).


=== [Safelang/StylaParser]  parse using styla ===
label("Token for IP allocation/$DlgPrefix($SetVersion)").
  
============================================

[slangParser]: build indices: defcon0  makeIPTokenSet1
[slangParser] stmts  makeIPTokenSet(?DlgPrefix) :- defcon(makeIPTokenSet(?DlgPrefix), SetTerm(id = StrLit(1qYgFO6dPALxvX7FzW0Aqg); argRefs = StrLit($DlgPrefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?DlgPrefix,?SetVersion,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_1102735632,(,_1273557860,))))), Map($DlgPrefix -> _1102735632, $SetVersion -> _1273557860)))),None)).
[slangParser]: build indices: defpost0  postMakeIPTokenSet1
[slangParser] stmts  postMakeIPTokenSet(?DlgPrefix) :- defpost(postMakeIPTokenSet(?DlgPrefix), [makeIPTokenSet(?DlgPrefix)]).


=== [Safelang/StylaParser]  parse using styla ===
link($OwnPrefixPolicy).
    link($RoutingPolicyRef).
    link($PathToken).
    route($DstIP,$Path)?
  
============================================

[slangParser]: build indices: defguard0  verifyRoute4
[slangParser] stmts  verifyRoute(?DstIP, ?Path, ?Src, ?Len) :- ?RoutingPolicyRef := label("routing policy($PolicyVersion)"), ?PathToken := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(?DstIP, ?Path, ?Src, ?Len), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy,?RoutingPolicyRef,?PathToken,?DstIP,?Path,?Self,?SelfKey; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)).
2017-06-152 13:51:32.407 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class initFile}[0;39m - [Safelang] finish parsing source
2017-06-152 13:51:32.413 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - defenvGoals: List(SetVersion :- defenv(SetVersion, 'set29')., PolicyVersion :- defenv(PolicyVersion, 'policy23')., RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:32.413 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - ServerPrincipal/SelfID = None
2017-06-152 13:51:32.414 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - definitGoals: List()
2017-06-152 13:51:32.415 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - allGoals: ListBuffer(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:32.416 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:32.422 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(SetVersion, 'set29'); solution(goals.head): defenv(SetVersion, 'set29'); FreshGoals: List()
2017-06-152 13:51:32.425 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(PolicyVersion, 'policy23'); solution(goals.head): defenv(PolicyVersion, 'policy23'); FreshGoals: List()
2017-06-152 13:51:32.425 [SafeSystem-akka.actor.default-dispatcher-2] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); solution(goals.head): defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); FreshGoals: List()
MethodName: postMakeIPTokenSet
MethodName: updateSubjectSet
MethodName: postInitRoute
MethodName: postAdvertise
MethodName: postOwnPrefixPolicy
MethodName: postStitchRequest
MethodName: postStitchPolicy
MethodName: postEndorsePA
MethodName: postEndorsePM
MethodName: verifyStitch
MethodName: postRoutingPolicy
MethodName: postPathToken
MethodName: postIdSet
MethodName: postDlgToken
MethodName: verifyRoute
MethodName: postIPAllocate
MethodName: postSubjectSet
2017-06-152 13:51:43.382 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 1)
2017-06-152 13:51:43.384 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:43.384 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:43.385 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:51:43.386 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - defenvGoals: List(SetVersion :- defenv(SetVersion, 'set29')., PolicyVersion :- defenv(PolicyVersion, 'policy23')., RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:43.386 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
2017-06-152 13:51:43.386 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - allGoals: ListBuffer(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:43.387 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:43.387 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(SetVersion, 'set29'); solution(goals.head): defenv(SetVersion, 'set29'); FreshGoals: List()
2017-06-152 13:51:43.387 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(PolicyVersion, 'policy23'); solution(goals.head): defenv(PolicyVersion, 'policy23'); FreshGoals: List()
2017-06-152 13:51:43.388 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); solution(goals.head): defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); FreshGoals: List()
2017-06-152 13:51:43.391 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 1
2017-06-152 13:51:43.391 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')?)
2017-06-152 13:51:43.398 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(defpost(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]))
2017-06-152 13:51:43.404 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"), defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 13:51:43.407 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DstIP($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.19.2/24"(set29)'; FreshGoals: List()
2017-06-152 13:51:43.408 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4'; FreshGoals: List()
2017-06-152 13:51:43.410 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4' := label("Token for IP allocation/?DstIP($SetVersion)"); FreshGoals: List(defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 13:51:43.444 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:51:43.445 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:51:43.686 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:43.687 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:43.690 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:43.696 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 1 fetched (prebuffer 1): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:51:43.697 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:51:43.700 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:51:43.700 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:43.700 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:43.701 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); solution(goals.head): defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); FreshGoals: List()
2017-06-152 13:51:43.737 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:43.738 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:43.740 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8:
2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
tCtCnrWu_jPruWaX22CqN0dwEvL1cV8q5FYdIuvzVGEppTiDUrB7EOVMTNtLDiEjJm-lTd7EO5Z03FBixcofmT6kpV6qPWmmVEo-eGfgg91ERDBrS-_jZWXbXxceJtdbBDtPFMXFiq3rS-RHxAUvUaaT07XkjyH7ch2axQgeNIDYCrHi5UigPs96dzK69dEabS0BsjygJz5D54cKex_mp8OeRPYut-RELEXuLDSysUqcHkZEy_7XQofTqYssdSnLYU97OJ2SqXRFYamrygHC14AFxVWEVo-BmVlybKzQrf8-DCVjpyJldTet7b_FDGcvWh9AxzCILNZGsaIBg0uDuA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:51:43.709-04:00, 2020-06-01T13:51:43.709-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 13:51:43.741 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:51:43.741 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
tCtCnrWu_jPruWaX22CqN0dwEvL1cV8q5FYdIuvzVGEppTiDUrB7EOVMTNtLDiEjJm-lTd7EO5Z03FBixcofmT6kpV6qPWmmVEo-eGfgg91ERDBrS-_jZWXbXxceJtdbBDtPFMXFiq3rS-RHxAUvUaaT07XkjyH7ch2axQgeNIDYCrHi5UigPs96dzK69dEabS0BsjygJz5D54cKex_mp8OeRPYut-RELEXuLDSysUqcHkZEy_7XQofTqYssdSnLYU97OJ2SqXRFYamrygHC14AFxVWEVo-BmVlybKzQrf8-DCVjpyJldTet7b_FDGcvWh9AxzCILNZGsaIBg0uDuA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:51:43.709-04:00, 2020-06-01T13:51:43.709-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 13:51:43.850 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) is posted (code: 204)
2017-06-152 13:51:43.852 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]); solution(goals.head): ['2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8']; FreshGoals: List()
2017-06-152 13:51:43.972 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 13:51:43.973 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:43.973 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:43.973 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:51:43.974 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - defenvGoals: List(SetVersion :- defenv(SetVersion, 'set29')., PolicyVersion :- defenv(PolicyVersion, 'policy23')., RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:43.974 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
2017-06-152 13:51:43.975 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - allGoals: ListBuffer(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:43.975 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:43.975 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(SetVersion, 'set29'); solution(goals.head): defenv(SetVersion, 'set29'); FreshGoals: List()
2017-06-152 13:51:43.975 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(PolicyVersion, 'policy23'); solution(goals.head): defenv(PolicyVersion, 'policy23'); FreshGoals: List()
2017-06-152 13:51:43.976 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); solution(goals.head): defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); FreshGoals: List()
2017-06-152 13:51:43.976 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 1
2017-06-152 13:51:43.976 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 13:51:43.978 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 13:51:43.980 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 13:51:43.981 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 13:51:43.982 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:51:43.982 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:51:44.065 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.065 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.066 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.066 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 2 fetched (prebuffer 2): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:51:44.066 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:51:44.066 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:51:44.067 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 13:51:44.080 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw:
Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
K1MthtkfnCnkpJyhBg_fOoEejD-SJTjZC5AvESxE7HTiEUOhRxlWq-rpnoUgaSbQcrUw4gbeZaxzZSWTCF7aQ4WzGQe70uXRZuiFbcd_zIoLWadA0Pse3TO6Ka0WtyEwrsWy3kHruUe2yD0dV7oNxRpXaBAJXj2-OftrgjlV2bTOlLYnNmsMcQRVgrlkw6njoExVJQeWCZpKqKs3I_y2DLq0BZZD4t1Rxnye-KDbOpWb2UKp10uPBlto7BWVNqXWoYTtMGqqJ3tvaVieiNKMw3HsEvUJdxlf3xufZy59CwwSLphfZVA14_LUfIySqDQOxZp9OgsaK46OhlrVUcgZLQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:51:44.068-04:00, 2020-06-01T13:51:44.068-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 13:51:44.080 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:51:44.080 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
K1MthtkfnCnkpJyhBg_fOoEejD-SJTjZC5AvESxE7HTiEUOhRxlWq-rpnoUgaSbQcrUw4gbeZaxzZSWTCF7aQ4WzGQe70uXRZuiFbcd_zIoLWadA0Pse3TO6Ka0WtyEwrsWy3kHruUe2yD0dV7oNxRpXaBAJXj2-OftrgjlV2bTOlLYnNmsMcQRVgrlkw6njoExVJQeWCZpKqKs3I_y2DLq0BZZD4t1Rxnye-KDbOpWb2UKp10uPBlto7BWVNqXWoYTtMGqqJ3tvaVieiNKMw3HsEvUJdxlf3xufZy59CwwSLphfZVA14_LUfIySqDQOxZp9OgsaK46OhlrVUcgZLQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:51:44.068-04:00, 2020-06-01T13:51:44.068-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 13:51:44.113 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) is posted (code: 204)
2017-06-152 13:51:44.113 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw']; FreshGoals: List()
2017-06-152 13:51:44.138 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 13:51:44.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:44.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:44.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:51:44.140 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 1
2017-06-152 13:51:44.140 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 13:51:44.146 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:51:44.147 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:51:44.147 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg'; FreshGoals: List()
2017-06-152 13:51:44.149 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg',?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:51:44.149 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 13:51:44.150 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 13:51:44.151 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:51:44.151 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:51:44.152 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg'; FreshGoals: List()
2017-06-152 13:51:44.152 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:51:44.154 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:51:44.154 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:51:44.433 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.433 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.434 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.435 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:51:44.435 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:51:44.462 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.463 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.463 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.465 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:44.465 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:44.469 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.470 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.470 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.472 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:51:44.473 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,None,Set(),Map(),Map(),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,None,Set(),Map(),Map(),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,None,Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Map(),Set()))
2017-06-152 13:51:44.764 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=0    stylaQ.size=0
2017-06-152 13:51:44.770 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:51:44.771 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:51:44.771 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:51:44.772 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: 
2017-06-152 13:51:44.772 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:51:44.773 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,None,Set(),Map(),Map(),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,None,Set(),Map(),Map(),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,None,Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Map(),Set()))
2017-06-152 13:51:44.774 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:51:44.774 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:51:44.774 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:51:44.784 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.785 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.785 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.792 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:51:44.792 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:51:44.808 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.809 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.809 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.809 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:51:44.809 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:51:44.810 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:51:44.834 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.834 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:51:44.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:51:44.838 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.839 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.839 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.840 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:51:44.841 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 3 fetched (prebuffer 2): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:51:44.841 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:51:44.841 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:51:44.842 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:51:44.843 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 4 fetched (prebuffer 2): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:51:44.843 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:51:44.844 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:51:44.844 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:44.844 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:44.844 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:44.847 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.847 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.848 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.848 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:44.849 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:51:44.860 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:44.860 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:44.861 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:44.861 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:51:44.862 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:51:45.809-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:51:45.840-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:51:45.861-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 13:51:44.862 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:51:45.809-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:51:45.840-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:51:45.861-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Map(),Set()))
2017-06-152 13:51:44.864 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:51:44.864 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:51:44.864 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:51:44.865 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:51:44.865 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: 
2017-06-152 13:51:44.865 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:51:44.865 [ForkJoinPool-3-worker-13] [1;31mERROR[0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mRetry failure[0m]: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:51:54.694 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(as2)
2017-06-152 13:51:54.694 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('as2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:54.695 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:54.695 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:54.695 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - defenvGoals: List(SetVersion :- defenv(SetVersion, 'set29')., PolicyVersion :- defenv(PolicyVersion, 'policy23')., RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:54.695 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
2017-06-152 13:51:54.696 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - allGoals: ListBuffer(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:54.696 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:54.696 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(SetVersion, 'set29'); solution(goals.head): defenv(SetVersion, 'set29'); FreshGoals: List()
2017-06-152 13:51:54.696 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(PolicyVersion, 'policy23'); solution(goals.head): defenv(PolicyVersion, 'policy23'); FreshGoals: List()
2017-06-152 13:51:54.696 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); solution(goals.head): defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); FreshGoals: List()
2017-06-152 13:51:54.697 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:51:54.697 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('as2')?)
2017-06-152 13:51:54.698 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('as2'); solution(goals.head): postIdSet('as2'); FreshGoals: List(defpost(postIdSet('as2'), [makeMyIdentitySet('as2')]))
2017-06-152 13:51:54.698 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('as2'); solution(goals.head): makeMyIdentitySet('as2'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:51:54.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:51:54.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:54.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:55.132 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
iP6kAhF3XdhID8JlEFCfIPxZ7oLuiopL4W2JogvE0POXI8K648U8EHNgr9nTA3OlZNEKAlReg0FlJ8UTJqBtyB5sPkHLHmsWG91QB9YZZk2Tj-grd9A8mVkV_VSMS_rvo7YyqQEjcovmzqSQqEuwBmWnHCrvZF-MXQqTEkZxI6EnFYlFQ2SMKr8Mt27LSSaDDrPw8319TUjAYkyLwM64OYgs4WcWdf6PfbvwQLLyg71oJQ_lA-fP0cTIVVlyPMpP93cgbJqFehH4pgxQ4bJsSexDAtKpJv0AsEPTZ5A71_cX66oum3WhEOVNa9a2lXbjI0WmdSoD8dWzHJ3Q6lCKKw
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T12:54:08.124-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').
2017-06-152 13:51:55.133 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): Q8
2017-06-152 13:51:55.133 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):119  entity(1):101
2017-06-152 13:51:55.153 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: Some(2020-05-29T14:52:54.393-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:51:55.152-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,spec(identity set for as2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(iP6kAhF3XdhID8JlEFCfIPxZ7oLuiopL4W2JogvE0POXI8K648U8EHNgr9nTA3OlZNEKAlReg0FlJ8UTJqBtyB5sPkHLHmsWG91QB9YZZk2Tj-grd9A8mVkV_VSMS_rvo7YyqQEjcovmzqSQqEuwBmWnHCrvZF-MXQqTEkZxI6EnFYlFQ2SMKr8Mt27LSSaDDrPw8319TUjAYkyLwM64OYgs4WcWdf6PfbvwQLLyg71oJQ_lA-fP0cTIVVlyPMpP93cgbJqFehH4pgxQ4bJsSexDAtKpJv0AsEPTZ5A71_cX66oum3WhEOVNa9a2lXbjI0WmdSoD8dWzHJ3Q6lCKKw),
setData: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T12:54:08.124-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').)
2017-06-152 13:51:55.153 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:55.154 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:55.296 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
iP6kAhF3XdhID8JlEFCfIPxZ7oLuiopL4W2JogvE0POXI8K648U8EHNgr9nTA3OlZNEKAlReg0FlJ8UTJqBtyB5sPkHLHmsWG91QB9YZZk2Tj-grd9A8mVkV_VSMS_rvo7YyqQEjcovmzqSQqEuwBmWnHCrvZF-MXQqTEkZxI6EnFYlFQ2SMKr8Mt27LSSaDDrPw8319TUjAYkyLwM64OYgs4WcWdf6PfbvwQLLyg71oJQ_lA-fP0cTIVVlyPMpP93cgbJqFehH4pgxQ4bJsSexDAtKpJv0AsEPTZ5A71_cX66oum3WhEOVNa9a2lXbjI0WmdSoD8dWzHJ3Q6lCKKw
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T12:54:08.124-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').
2017-06-152 13:51:55.297 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): Q8
2017-06-152 13:51:55.297 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):119  entity(1):101
2017-06-152 13:51:55.302 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: Some(2020-05-29T14:52:54.393-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:51:55.300-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,spec(identity set for as2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(iP6kAhF3XdhID8JlEFCfIPxZ7oLuiopL4W2JogvE0POXI8K648U8EHNgr9nTA3OlZNEKAlReg0FlJ8UTJqBtyB5sPkHLHmsWG91QB9YZZk2Tj-grd9A8mVkV_VSMS_rvo7YyqQEjcovmzqSQqEuwBmWnHCrvZF-MXQqTEkZxI6EnFYlFQ2SMKr8Mt27LSSaDDrPw8319TUjAYkyLwM64OYgs4WcWdf6PfbvwQLLyg71oJQ_lA-fP0cTIVVlyPMpP93cgbJqFehH4pgxQ4bJsSexDAtKpJv0AsEPTZ5A71_cX66oum3WhEOVNa9a2lXbjI0WmdSoD8dWzHJ3Q6lCKKw),
setData: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T12:54:08.124-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').)
2017-06-152 13:51:55.315 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache fetchValidIDSet}[0;39m - fetched valid id set: Token(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)
2017-06-152 13:51:55.317 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 5 fetched (prebuffer 3): Token(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)
2017-06-152 13:51:55.317 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24): List()
2017-06-152 13:51:55.319 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:54.699-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,spec(interpolate(argsFun(identity set for ,as2,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB, $CN -> as2)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 13:51:55.320 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: Some(2020-05-29T14:52:54.393-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:52:54.393-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:51:55.152-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,spec(identity set for as2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(iP6kAhF3XdhID8JlEFCfIPxZ7oLuiopL4W2JogvE0POXI8K648U8EHNgr9nTA3OlZNEKAlReg0FlJ8UTJqBtyB5sPkHLHmsWG91QB9YZZk2Tj-grd9A8mVkV_VSMS_rvo7YyqQEjcovmzqSQqEuwBmWnHCrvZF-MXQqTEkZxI6EnFYlFQ2SMKr8Mt27LSSaDDrPw8319TUjAYkyLwM64OYgs4WcWdf6PfbvwQLLyg71oJQ_lA-fP0cTIVVlyPMpP93cgbJqFehH4pgxQ4bJsSexDAtKpJv0AsEPTZ5A71_cX66oum3WhEOVNa9a2lXbjI0WmdSoD8dWzHJ3Q6lCKKw),
setData: None
2017-06-152 13:51:55.323 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 13:51:55.340 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24:
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
XUIyaWP6CBZqPYkDtrSPdAIBbcictwyF9QSxf-MPxlHM4Sh1n9c5bsm4pJ8LLIz7gprOxLGbGrzdx0cdjr6WN8g4_dZ0xKKFNY8a0sJ7z_dqftuuxjeugMRQQsOEvsMsWIUjLCUy1i8peoOnBeqDOXtrwERdRBxWrdXWMa3QLS-4CfLYI1iB7-BpvLR5Kfm5EgqBoX0LMSxhgfTJms4r4zUF3xiQMhBBMD_uZ7iLwSnOs4k241tqr-_jSBOPAqMwRbspMAJaQV8qUwW8YpqRES3DRI8wC6orp_eqSUSAElHbHWbwkcXyFuqSvT4vkl4g4GN0-JQcd36inv3S4aNH0g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:55.324-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').
2017-06-152 13:51:55.340 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:55.341 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
XUIyaWP6CBZqPYkDtrSPdAIBbcictwyF9QSxf-MPxlHM4Sh1n9c5bsm4pJ8LLIz7gprOxLGbGrzdx0cdjr6WN8g4_dZ0xKKFNY8a0sJ7z_dqftuuxjeugMRQQsOEvsMsWIUjLCUy1i8peoOnBeqDOXtrwERdRBxWrdXWMa3QLS-4CfLYI1iB7-BpvLR5Kfm5EgqBoX0LMSxhgfTJms4r4zUF3xiQMhBBMD_uZ7iLwSnOs4k241tqr-_jSBOPAqMwRbspMAJaQV8qUwW8YpqRES3DRI8wC6orp_eqSUSAElHbHWbwkcXyFuqSvT4vkl4g4GN0-JQcd36inv3S4aNH0g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:55.324-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').
2017-06-152 13:51:57.754 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) is posted (code: 204)
2017-06-152 13:51:57.755 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('as2'), [makeMyIdentitySet('as2')]); solution(goals.head): ['weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24']; FreshGoals: List()
2017-06-152 13:51:57.792 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:51:57.792 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:57.792 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:57.792 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:57.793 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:51:57.793 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 13:51:57.794 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 13:51:57.796 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:51:57.796 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:51:57.797 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
2017-06-152 13:51:57.798 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
2017-06-152 13:51:57.855 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:57.856 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:57.856 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:57.856 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 6 fetched (prebuffer 4): Token(xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4)
2017-06-152 13:51:57.857 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4): ArrayBuffer(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)
2017-06-152 13:51:57.857 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 13:51:57.870 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4:
xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
Iq7CTDg9y3yk0HFwbWwW6orwDl7e8Ixu3t6cGHeITCXpZhwWTCX1J_blgldJChjgpSsQHVqpePhMsdQ0Z4BTXK7zZYi0iYNMr56Tlt84MG2y307nPI-xMV8ZgUVRrGy0xkaY9zLQVtdLd98mrabwXV3OcKxMzPRCNoszS5zV5pEtAi9iacNL9dfjDy8Bp4rwScM-v7Echc0Usdvs3Sbk2LGKbkmlb-CAeqMTIpCXqE7GsjnBJccUKm4mI6LUEP65yaQjxU3fGHLF2Y3lVYgmuKG6Bf-FAeQVXZaOTIoE_KFQXB7CULQc1Zi6UWgww3HUXClyP7ZBvb76YmSPKog3nQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:57.858-04:00, 2020-06-01T13:51:57.858-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 13:51:57.870 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
2017-06-152 13:51:57.871 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
Iq7CTDg9y3yk0HFwbWwW6orwDl7e8Ixu3t6cGHeITCXpZhwWTCX1J_blgldJChjgpSsQHVqpePhMsdQ0Z4BTXK7zZYi0iYNMr56Tlt84MG2y307nPI-xMV8ZgUVRrGy0xkaY9zLQVtdLd98mrabwXV3OcKxMzPRCNoszS5zV5pEtAi9iacNL9dfjDy8Bp4rwScM-v7Echc0Usdvs3Sbk2LGKbkmlb-CAeqMTIpCXqE7GsjnBJccUKm4mI6LUEP65yaQjxU3fGHLF2Y3lVYgmuKG6Bf-FAeQVXZaOTIoE_KFQXB7CULQc1Zi6UWgww3HUXClyP7ZBvb76YmSPKog3nQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:57.858-04:00, 2020-06-01T13:51:57.858-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 13:51:58.157 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4) is posted (code: 204)
2017-06-152 13:51:58.158 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4']; FreshGoals: List()
2017-06-152 13:51:58.169 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:51:58.170 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:58.170 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:58.170 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:58.170 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:51:58.171 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 13:51:58.171 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 13:51:58.172 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 13:51:58.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:51:58.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:51:58.286 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:58.286 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:58.287 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:58.287 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 7 fetched (prebuffer 5): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 13:51:58.287 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 13:51:58.288 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 13:51:58.307 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A:
GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
dM0glrbLtEYA4eCU9zOmdOddqaun4ZfrdGJrUG4VYpnzWfpEuJZI7gzwvZ83mXaOVbl9VsvAJKT8T2hxS2XpJpHqDwWJuOOzp6XVHQpVfhrDe2IXWrAq3oo5Cq3yCzWvPmq_cTxXG5JRHsRXppt1cZ-3fgf5nVlcd3ciQmrKyd_lWAH7ViCTKyA1hoTJM6huW7OZX94hMWwGweqjJo0xrkwTd0ogDdapPKsS-hirEZcT3GHE5hedO0JvB9QknEqHj6UcdpjDG4mJ3k-vF01ca98tV4ay7pOMvGa23zSpQ8Vs8LJmM0RofcnNodA1KKTx2b69YYArgPvZSTHOFbUnDA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:58.290-04:00, 2020-06-01T13:51:58.290-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:51:58.308 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:51:58.308 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
dM0glrbLtEYA4eCU9zOmdOddqaun4ZfrdGJrUG4VYpnzWfpEuJZI7gzwvZ83mXaOVbl9VsvAJKT8T2hxS2XpJpHqDwWJuOOzp6XVHQpVfhrDe2IXWrAq3oo5Cq3yCzWvPmq_cTxXG5JRHsRXppt1cZ-3fgf5nVlcd3ciQmrKyd_lWAH7ViCTKyA1hoTJM6huW7OZX94hMWwGweqjJo0xrkwTd0ogDdapPKsS-hirEZcT3GHE5hedO0JvB9QknEqHj6UcdpjDG4mJ3k-vF01ca98tV4ay7pOMvGa23zSpQ8Vs8LJmM0RofcnNodA1KKTx2b69YYArgPvZSTHOFbUnDA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:58.290-04:00, 2020-06-01T13:51:58.290-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:51:58.508 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) is posted (code: 204)
2017-06-152 13:51:58.509 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A']; FreshGoals: List()
2017-06-152 13:51:58.526 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:51:58.526 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:58.526 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:58.526 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:58.527 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:51:58.527 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 13:51:58.528 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 13:51:58.529 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 13:51:58.530 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) has expired from prefetching cache
2017-06-152 13:51:58.530 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:51:58.531 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:51:58.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:58.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:58.716 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:58.716 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 8 fetched (prebuffer 5): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 13:51:58.717 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 13:51:58.718 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 13:51:58.736 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic:
mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
Aq_99_ifUuS0uR5mL6E2syB6Xzx_-voLYepqEgrOJbKuQPBZtccy8wVB1vjfVQjQCV_aEOpk2bAlnvZhi8RZe0KP21ZyuL6TeTjEgpNEdwLiiQb0TBony03bxjHQLVpnEnxH30Shci6R98HB1rXhhiAUNsoRVzGE4Z9m9AFkcBLI1twpLm2CyULw8VxFesimb64V6Nfc5jA6dWcbWNSM6ALyONsgSMPVco9LBQqoQnJBp_PbN8Z9neJho1E98uLkVDXVMJXbB_9bghYqsjvnqafOgKwKvBVrci5vcJMgyzy2nsCeg5VZHxzsNtqTyJ5TqrvBf1M2dWulQa2HEiXJ3g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:58.720-04:00, 2020-06-01T13:51:58.720-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),?DstIP<:?DstIPSet.
2017-06-152 13:51:58.737 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:51:58.737 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
Aq_99_ifUuS0uR5mL6E2syB6Xzx_-voLYepqEgrOJbKuQPBZtccy8wVB1vjfVQjQCV_aEOpk2bAlnvZhi8RZe0KP21ZyuL6TeTjEgpNEdwLiiQb0TBony03bxjHQLVpnEnxH30Shci6R98HB1rXhhiAUNsoRVzGE4Z9m9AFkcBLI1twpLm2CyULw8VxFesimb64V6Nfc5jA6dWcbWNSM6ALyONsgSMPVco9LBQqoQnJBp_PbN8Z9neJho1E98uLkVDXVMJXbB_9bghYqsjvnqafOgKwKvBVrci5vcJMgyzy2nsCeg5VZHxzsNtqTyJ5TqrvBf1M2dWulQa2HEiXJ3g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:58.720-04:00, 2020-06-01T13:51:58.720-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),?DstIP<:?DstIPSet.
2017-06-152 13:51:58.901 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) is posted (code: 204)
2017-06-152 13:51:58.902 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic']; FreshGoals: List()
2017-06-152 13:51:58.915 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:51:58.915 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:58.916 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:58.916 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:51:58.916 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:51:58.917 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 13:51:58.917 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 13:51:58.919 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:51:58.920 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:51:58.921 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
2017-06-152 13:51:58.921 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
2017-06-152 13:51:59.201 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:59.202 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:59.202 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:59.202 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 9 fetched (prebuffer 6): Token(oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM)
2017-06-152 13:51:59.203 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM): List()
2017-06-152 13:51:59.203 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 13:51:59.222 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM:
oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
kbnSIRhjxipxCFTbVNAf9retKpaz9NOyx2njURahUjz-k8C1NNGklQ5BT-hnwwhBt4r1S0p3Uz5VdXX_-KHWSf-DFDQU44te9AAaYQz4lE3QdeyMZzhf69DsJ16RfWZvy4fCZdbDrMTF7uQfGaPpNNXKCe_xqNRFkLn8KbZh7eE-99-0VaOSU2ySHpjl-aJRNkkX-9xxNq0EsjecYEitxzdGWqH3FgwMnJObYCBru5s9tfIDETvHFlGr246HYBGQLmZmE_bK92oz26E_fEb0GHjppurHUQgkqMiuGhU4CpBshMGiurhDjUFZrjflcIZJR4HzhNqpX7lcTYXdgaLi4w
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:59.205-04:00, 2020-06-01T13:51:59.205-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:51:59.222 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
2017-06-152 13:51:59.222 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
kbnSIRhjxipxCFTbVNAf9retKpaz9NOyx2njURahUjz-k8C1NNGklQ5BT-hnwwhBt4r1S0p3Uz5VdXX_-KHWSf-DFDQU44te9AAaYQz4lE3QdeyMZzhf69DsJ16RfWZvy4fCZdbDrMTF7uQfGaPpNNXKCe_xqNRFkLn8KbZh7eE-99-0VaOSU2ySHpjl-aJRNkkX-9xxNq0EsjecYEitxzdGWqH3FgwMnJObYCBru5s9tfIDETvHFlGr246HYBGQLmZmE_bK92oz26E_fEb0GHjppurHUQgkqMiuGhU4CpBshMGiurhDjUFZrjflcIZJR4HzhNqpX7lcTYXdgaLi4w
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:51:59.205-04:00, 2020-06-01T13:51:59.205-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:51:59.326 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM) is posted (code: 204)
2017-06-152 13:51:59.327 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM']; FreshGoals: List()
2017-06-152 13:51:59.344 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(pa)
2017-06-152 13:51:59.344 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('pa')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:59.344 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:59.345 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.345 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - defenvGoals: List(SetVersion :- defenv(SetVersion, 'set29')., PolicyVersion :- defenv(PolicyVersion, 'policy23')., RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:59.346 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
2017-06-152 13:51:59.346 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - allGoals: ListBuffer(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:59.346 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:51:59.347 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(SetVersion, 'set29'); solution(goals.head): defenv(SetVersion, 'set29'); FreshGoals: List()
2017-06-152 13:51:59.347 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(PolicyVersion, 'policy23'); solution(goals.head): defenv(PolicyVersion, 'policy23'); FreshGoals: List()
2017-06-152 13:51:59.347 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); solution(goals.head): defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); FreshGoals: List()
2017-06-152 13:51:59.348 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:51:59.348 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('pa')?)
2017-06-152 13:51:59.349 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('pa'); solution(goals.head): postIdSet('pa'); FreshGoals: List(defpost(postIdSet('pa'), [makeMyIdentitySet('pa')]))
2017-06-152 13:51:59.351 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('pa'); solution(goals.head): makeMyIdentitySet('pa'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:51:59.352 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:51:59.352 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.353 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.483 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
HhUtb7X2EWJONbQ5E1yzKyA2LTrMCW5RZQf7nT7YbIZY0vLCYnd_QIPcgw8-dQiROxkCUqQG2BJN7t182H0w4qzdxC10ok3Twtrm6wohb5V4MkIxYlWiKLaIHPT1AeFFq5Nc7Ojr0ZJKKwZ7zhAFGXH430TzQVrgBp2t7vUpqw7B-_HEGiZXts_5_WAKV3ta9AUZ-ve2uvMJu-5eNvCqbhAdi4hL40LPfLtHLZbuWMRlhilw6lRAogGXU5gDJi1TKbNXtqBbb-dzu9uT32BY8umWDuW9ZpTKGPkcVDXZJSZ7g7KR2u4MGbhTVuaD3bXDMY3m_pwo4F_apmonpewbdQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T12:54:10.494-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').
2017-06-152 13:51:59.484 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): wv
2017-06-152 13:51:59.484 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):75  entity(1):88
2017-06-152 13:51:59.488 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: Some(2020-05-28T18:50:05.724-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:51:59.487-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,spec(identity set for pa))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(HhUtb7X2EWJONbQ5E1yzKyA2LTrMCW5RZQf7nT7YbIZY0vLCYnd_QIPcgw8-dQiROxkCUqQG2BJN7t182H0w4qzdxC10ok3Twtrm6wohb5V4MkIxYlWiKLaIHPT1AeFFq5Nc7Ojr0ZJKKwZ7zhAFGXH430TzQVrgBp2t7vUpqw7B-_HEGiZXts_5_WAKV3ta9AUZ-ve2uvMJu-5eNvCqbhAdi4hL40LPfLtHLZbuWMRlhilw6lRAogGXU5gDJi1TKbNXtqBbb-dzu9uT32BY8umWDuW9ZpTKGPkcVDXZJSZ7g7KR2u4MGbhTVuaD3bXDMY3m_pwo4F_apmonpewbdQ),
setData: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T12:54:10.494-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').)
2017-06-152 13:51:59.489 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.489 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.515 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
HhUtb7X2EWJONbQ5E1yzKyA2LTrMCW5RZQf7nT7YbIZY0vLCYnd_QIPcgw8-dQiROxkCUqQG2BJN7t182H0w4qzdxC10ok3Twtrm6wohb5V4MkIxYlWiKLaIHPT1AeFFq5Nc7Ojr0ZJKKwZ7zhAFGXH430TzQVrgBp2t7vUpqw7B-_HEGiZXts_5_WAKV3ta9AUZ-ve2uvMJu-5eNvCqbhAdi4hL40LPfLtHLZbuWMRlhilw6lRAogGXU5gDJi1TKbNXtqBbb-dzu9uT32BY8umWDuW9ZpTKGPkcVDXZJSZ7g7KR2u4MGbhTVuaD3bXDMY3m_pwo4F_apmonpewbdQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T12:54:10.494-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').
2017-06-152 13:51:59.515 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): wv
2017-06-152 13:51:59.516 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):75  entity(1):88
2017-06-152 13:51:59.520 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: Some(2020-05-28T18:50:05.724-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:51:59.519-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,spec(identity set for pa))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(HhUtb7X2EWJONbQ5E1yzKyA2LTrMCW5RZQf7nT7YbIZY0vLCYnd_QIPcgw8-dQiROxkCUqQG2BJN7t182H0w4qzdxC10ok3Twtrm6wohb5V4MkIxYlWiKLaIHPT1AeFFq5Nc7Ojr0ZJKKwZ7zhAFGXH430TzQVrgBp2t7vUpqw7B-_HEGiZXts_5_WAKV3ta9AUZ-ve2uvMJu-5eNvCqbhAdi4hL40LPfLtHLZbuWMRlhilw6lRAogGXU5gDJi1TKbNXtqBbb-dzu9uT32BY8umWDuW9ZpTKGPkcVDXZJSZ7g7KR2u4MGbhTVuaD3bXDMY3m_pwo4F_apmonpewbdQ),
setData: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T12:54:10.494-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').)
2017-06-152 13:51:59.522 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache fetchValidIDSet}[0;39m - fetched valid id set: Token(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 13:51:59.524 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 10 fetched (prebuffer 7): Token(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 13:51:59.524 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc): List()
2017-06-152 13:51:59.525 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:59.352-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,spec(interpolate(argsFun(identity set for ,pa,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB, $CN -> pa)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 13:51:59.526 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: Some(2020-05-28T18:50:05.724-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-28T18:50:05.724-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:51:59.487-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,spec(identity set for pa))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(HhUtb7X2EWJONbQ5E1yzKyA2LTrMCW5RZQf7nT7YbIZY0vLCYnd_QIPcgw8-dQiROxkCUqQG2BJN7t182H0w4qzdxC10ok3Twtrm6wohb5V4MkIxYlWiKLaIHPT1AeFFq5Nc7Ojr0ZJKKwZ7zhAFGXH430TzQVrgBp2t7vUpqw7B-_HEGiZXts_5_WAKV3ta9AUZ-ve2uvMJu-5eNvCqbhAdi4hL40LPfLtHLZbuWMRlhilw6lRAogGXU5gDJi1TKbNXtqBbb-dzu9uT32BY8umWDuW9ZpTKGPkcVDXZJSZ7g7KR2u4MGbhTVuaD3bXDMY3m_pwo4F_apmonpewbdQ),
setData: None
2017-06-152 13:51:59.527 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 13:51:59.544 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc:
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
XMEQvsu02fDPFQRt7bJ_9JmL90zj6uINDLI32mTuBY3VaGdom_MTpIyn7ivfhe353FaOtKACOvWHyJhFG-8tLhCx-YPaZSTrogZGHf8noRwPN8tW20QGmZyAmxiQU9gmtVouUb_qlOHab3pv2l1eQvPLY5aizU0mwFkQW46TFK2gYyjfT9CtjeJVFCqv9a09PJ6eVQYj9YFedkHYNeWGG6o-1dWQOLH2tZL0Jxa8hSl5y-hUGPQ_g-YsWxLRTcOgh45tYrB8wNQRY77xZab4rlYT_r9ojrD09LkTo-mI42sI1nRqsdxskSVNRGpiaHtJ3PDWgqiNf0AtHjeweymPXQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:51:59.528-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').
2017-06-152 13:51:59.545 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.545 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
XMEQvsu02fDPFQRt7bJ_9JmL90zj6uINDLI32mTuBY3VaGdom_MTpIyn7ivfhe353FaOtKACOvWHyJhFG-8tLhCx-YPaZSTrogZGHf8noRwPN8tW20QGmZyAmxiQU9gmtVouUb_qlOHab3pv2l1eQvPLY5aizU0mwFkQW46TFK2gYyjfT9CtjeJVFCqv9a09PJ6eVQYj9YFedkHYNeWGG6o-1dWQOLH2tZL0Jxa8hSl5y-hUGPQ_g-YsWxLRTcOgh45tYrB8wNQRY77xZab4rlYT_r9ojrD09LkTo-mI42sI1nRqsdxskSVNRGpiaHtJ3PDWgqiNf0AtHjeweymPXQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:51:59.528-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').
2017-06-152 13:51:59.598 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) is posted (code: 204)
2017-06-152 13:51:59.599 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('pa'), [makeMyIdentitySet('pa')]); solution(goals.head): ['KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc']; FreshGoals: List()
2017-06-152 13:51:59.612 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:51:59.613 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:59.613 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:59.613 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.613 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:51:59.613 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 13:51:59.614 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 13:51:59.615 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:51:59.615 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:51:59.616 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
2017-06-152 13:51:59.617 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
2017-06-152 13:51:59.810 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:59.810 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:59.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:59.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 11 fetched (prebuffer 8): Token(eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ)
2017-06-152 13:51:59.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ): ArrayBuffer(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 13:51:59.812 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 13:51:59.829 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ:
eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
oA3W-1kp8UfL7Khmc2EI-_Dfg0X0mri1xP-CqY7sAkqayfONTKPvkX7s5oDW3LzTYveIB3N56InS2xhQqPGIBLjmtddxgYnXnbOkR9yw73UZ9ZagHgNc9KAA7VvF_nniRSNoRkjAwD42TOlJJ-JuOkHjo7-H-HtovGjIOlAvs5QJW2727Mb0iHtISh6WIhuqM9uwshTV0Et-D4ktc8JZDKC7Yl-EiNNpdHMzSjKLhRycVFy--m3cyvhyL-g47SrOU270MfPdJp7Dkp_K2u5ykyXcvzXhFWtL1JtwpYXnLd2v-Htvhiay-h5REq9nw5NmKFrk6oTvHQwXk4YGSZtx9g
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:51:59.813-04:00, 2020-06-01T13:51:59.813-04:00, PT720H
SHA256withRSA
subject(set29)

link('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:51:59.829 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
2017-06-152 13:51:59.829 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
oA3W-1kp8UfL7Khmc2EI-_Dfg0X0mri1xP-CqY7sAkqayfONTKPvkX7s5oDW3LzTYveIB3N56InS2xhQqPGIBLjmtddxgYnXnbOkR9yw73UZ9ZagHgNc9KAA7VvF_nniRSNoRkjAwD42TOlJJ-JuOkHjo7-H-HtovGjIOlAvs5QJW2727Mb0iHtISh6WIhuqM9uwshTV0Et-D4ktc8JZDKC7Yl-EiNNpdHMzSjKLhRycVFy--m3cyvhyL-g47SrOU270MfPdJp7Dkp_K2u5ykyXcvzXhFWtL1JtwpYXnLd2v-Htvhiay-h5REq9nw5NmKFrk6oTvHQwXk4YGSZtx9g
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:51:59.813-04:00, 2020-06-01T13:51:59.813-04:00, PT720H
SHA256withRSA
subject(set29)

link('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:51:59.906 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ) is posted (code: 204)
2017-06-152 13:51:59.906 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ']; FreshGoals: List()
2017-06-152 13:51:59.917 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:51:59.917 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:59.918 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:51:59.918 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:51:59.918 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:51:59.918 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 13:51:59.919 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 13:51:59.921 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 13:51:59.922 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
2017-06-152 13:51:59.923 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
2017-06-152 13:51:59.992 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:51:59.992 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:51:59.993 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:51:59.993 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 12 fetched (prebuffer 9): Token(je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18)
2017-06-152 13:51:59.993 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18): List()
2017-06-152 13:51:59.994 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 13:52:00.011 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18:
je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
g4WwdorERbuvAQuLzwO8gXxkT7ZMPnTaObBACtxzyOYIlvMrkTExWTxXQ4em20iOCqsDOLJrWptAW8e7hB6DQznmPaWjdYwU7aYHwyN-ADMYPXAYzgsHCPmBmGdNoQwnkyDu8cRYiXLpzAEifRC1YhNh28_3Tacc0dXZUBddbeEbi3vlmZTISdB5CEgxT3ESSKqKJ0jAYpzlG4vkqTLvqVAAT7eWZ_pSTeJIQg99B8uwtpmlnRWqkbXlYLVPssDDegfKGh5DTgVFRvjApMlT7ZxcMf-sUNSeuZDVUln5Sb1NCNYPQAZ0eosrAfdUPiaQeVegW-r1OPe1mpGC4gBy3w
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:51:59.996-04:00, 2020-06-01T13:51:59.996-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:00.012 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
2017-06-152 13:52:00.012 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
g4WwdorERbuvAQuLzwO8gXxkT7ZMPnTaObBACtxzyOYIlvMrkTExWTxXQ4em20iOCqsDOLJrWptAW8e7hB6DQznmPaWjdYwU7aYHwyN-ADMYPXAYzgsHCPmBmGdNoQwnkyDu8cRYiXLpzAEifRC1YhNh28_3Tacc0dXZUBddbeEbi3vlmZTISdB5CEgxT3ESSKqKJ0jAYpzlG4vkqTLvqVAAT7eWZ_pSTeJIQg99B8uwtpmlnRWqkbXlYLVPssDDegfKGh5DTgVFRvjApMlT7ZxcMf-sUNSeuZDVUln5Sb1NCNYPQAZ0eosrAfdUPiaQeVegW-r1OPe1mpGC4gBy3w
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:51:59.996-04:00, 2020-06-01T13:51:59.996-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:00.121 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18) is posted (code: 204)
2017-06-152 13:52:00.122 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18']; FreshGoals: List()
2017-06-152 13:52:00.134 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:00.135 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.135 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.135 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:52:00.136 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:52:00.136 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 13:52:00.137 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 13:52:00.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 13:52:00.141 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
2017-06-152 13:52:00.141 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
2017-06-152 13:52:00.180 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:00.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:00.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:00.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 13 fetched (prebuffer 10): Token(ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY)
2017-06-152 13:52:00.182 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY): List()
2017-06-152 13:52:00.183 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 13:52:00.198 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY:
ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
c-R1lZIZcBSfg3cOPjyWPcjxdLxyCTz6ZFepi8L8jmmzJcBqmUkd7bL5YTwR3Atx-yP9RnpVC2TdY043XOpdxbUOTESws4qw8uKjzlWzMYmDxXWpomS8zqNT19wOBOTZtFL0iaVg8aDFp9wb_9fILn84i3QRiOjx_dwNJoG5lrEZT-zPHk4WwYT38bprfMY0m0Yo8Xgf0pPQpY-QNuTnDKgb_wGgG6krHAEBK_3bf2Z8q1NJ2YIhQ59Qq9GgFTpRK58Q8cL_RNCUZbLOBJ-25nyJW7wlBPQWiCg1nwW0cw2K0GJVu4YX_1sQfCFoIApduaBmMHCp0nPJGhPFj_zpGQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:00.185-04:00, 2020-06-01T13:52:00.185-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'),?DstIP<:?DstIPSet.
2017-06-152 13:52:00.198 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
2017-06-152 13:52:00.198 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
c-R1lZIZcBSfg3cOPjyWPcjxdLxyCTz6ZFepi8L8jmmzJcBqmUkd7bL5YTwR3Atx-yP9RnpVC2TdY043XOpdxbUOTESws4qw8uKjzlWzMYmDxXWpomS8zqNT19wOBOTZtFL0iaVg8aDFp9wb_9fILn84i3QRiOjx_dwNJoG5lrEZT-zPHk4WwYT38bprfMY0m0Yo8Xgf0pPQpY-QNuTnDKgb_wGgG6krHAEBK_3bf2Z8q1NJ2YIhQ59Qq9GgFTpRK58Q8cL_RNCUZbLOBJ-25nyJW7wlBPQWiCg1nwW0cw2K0GJVu4YX_1sQfCFoIApduaBmMHCp0nPJGhPFj_zpGQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:00.185-04:00, 2020-06-01T13:52:00.185-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'),?DstIP<:?DstIPSet.
2017-06-152 13:52:00.438 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY) is posted (code: 204)
2017-06-152 13:52:00.438 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY']; FreshGoals: List()
2017-06-152 13:52:00.449 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:00.450 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.450 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.450 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:52:00.451 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:52:00.451 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 13:52:00.452 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 13:52:00.453 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:00.454 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:00.455 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
2017-06-152 13:52:00.455 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
2017-06-152 13:52:00.674 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:00.674 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:00.675 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:00.675 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 14 fetched (prebuffer 11): Token(TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY)
2017-06-152 13:52:00.676 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY): List()
2017-06-152 13:52:00.677 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 13:52:00.698 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY:
TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
oQqDnOI2_PzK2U-lOroU_1wQoyRH3qYdyk-jbTHRoUvLUfRPTm2chJ6Hfe6j7kbQbK1j19cq09tBXPDu2GP3Ud_302VrI-z9SfDEijqNLtDq8JMk0k_9eQBBx4bjJQkXmfIlgOzLliE-zF-LeYpnKUtg-Hr2Dbh5go3qM39n1o2ETbplYVK4ESmpZeWYzexAs8aZTc_m_uJ1aAD-K8mczTmI9hKHAcQ1HZyG87_jgvxG_svL2OohtRZeJjXQT3hek4lacODGD4R7lLIB8cUWURtBsTztNByEix4tams0KYd2cjAcyrKgiMamTCez4ryLDhSIUDoJCQtyMuqA0Ev1iw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:00.678-04:00, 2020-06-01T13:52:00.678-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:00.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
2017-06-152 13:52:00.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
oQqDnOI2_PzK2U-lOroU_1wQoyRH3qYdyk-jbTHRoUvLUfRPTm2chJ6Hfe6j7kbQbK1j19cq09tBXPDu2GP3Ud_302VrI-z9SfDEijqNLtDq8JMk0k_9eQBBx4bjJQkXmfIlgOzLliE-zF-LeYpnKUtg-Hr2Dbh5go3qM39n1o2ETbplYVK4ESmpZeWYzexAs8aZTc_m_uJ1aAD-K8mczTmI9hKHAcQ1HZyG87_jgvxG_svL2OohtRZeJjXQT3hek4lacODGD4R7lLIB8cUWURtBsTztNByEix4tams0KYd2cjAcyrKgiMamTCez4ryLDhSIUDoJCQtyMuqA0Ev1iw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:00.678-04:00, 2020-06-01T13:52:00.678-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:00.720 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY) is posted (code: 204)
2017-06-152 13:52:00.721 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY']; FreshGoals: List()
2017-06-152 13:52:00.731 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(client2)
2017-06-152 13:52:00.731 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('client2')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.731 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.732 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:00.732 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - defenvGoals: List(SetVersion :- defenv(SetVersion, 'set29')., PolicyVersion :- defenv(PolicyVersion, 'policy23')., RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:52:00.732 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
2017-06-152 13:52:00.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - allGoals: ListBuffer(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:52:00.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:52:00.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(SetVersion, 'set29'); solution(goals.head): defenv(SetVersion, 'set29'); FreshGoals: List()
2017-06-152 13:52:00.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(PolicyVersion, 'policy23'); solution(goals.head): defenv(PolicyVersion, 'policy23'); FreshGoals: List()
2017-06-152 13:52:00.734 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); solution(goals.head): defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); FreshGoals: List()
2017-06-152 13:52:00.734 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:00.734 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('client2')?)
2017-06-152 13:52:00.735 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('client2'); solution(goals.head): postIdSet('client2'); FreshGoals: List(defpost(postIdSet('client2'), [makeMyIdentitySet('client2')]))
2017-06-152 13:52:00.736 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('client2'); solution(goals.head): makeMyIdentitySet('client2'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:00.737 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:00.738 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:00.738 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:00.770 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
MaAwiQTG1N01zJ6_TE75y24jOVFtokG_8oyDdZkuZ8dF7UnIYbf6p56_Ccggh1B2t1mutpT9Kry_PAj5illqgpUengbN_u9RAQhCSGqqkTouZCTc7Esr75vELWYAH977Im4474hu7owHlzZ9vz0XiDEhTkCBdcz-hLEh5JvlbpCKlBFhgcx2QW5ke38_wlj-X2FNC_MMsZZzgD5PJHoQthmPyemqtIwE6dlcSR3RTuG4SkS_jJcJmODFMXQOsL-N5ASmh2BfFq8D4LYIMTI0sq3ADfc6A6jg55bEabNEJ4TcMWQcybDTADe-08d0M0WDVtnT-TCYV8AZGBrYW-UTWQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T12:54:13.429-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').
2017-06-152 13:52:00.771 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): F2
2017-06-152 13:52:00.772 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):86  entity(1):49
2017-06-152 13:52:00.775 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: Some(2020-05-29T14:52:59.138-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:00.774-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,spec(identity set for client2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(MaAwiQTG1N01zJ6_TE75y24jOVFtokG_8oyDdZkuZ8dF7UnIYbf6p56_Ccggh1B2t1mutpT9Kry_PAj5illqgpUengbN_u9RAQhCSGqqkTouZCTc7Esr75vELWYAH977Im4474hu7owHlzZ9vz0XiDEhTkCBdcz-hLEh5JvlbpCKlBFhgcx2QW5ke38_wlj-X2FNC_MMsZZzgD5PJHoQthmPyemqtIwE6dlcSR3RTuG4SkS_jJcJmODFMXQOsL-N5ASmh2BfFq8D4LYIMTI0sq3ADfc6A6jg55bEabNEJ4TcMWQcybDTADe-08d0M0WDVtnT-TCYV8AZGBrYW-UTWQ),
setData: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T12:54:13.429-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').)
2017-06-152 13:52:00.776 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:00.776 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:00.853 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
MaAwiQTG1N01zJ6_TE75y24jOVFtokG_8oyDdZkuZ8dF7UnIYbf6p56_Ccggh1B2t1mutpT9Kry_PAj5illqgpUengbN_u9RAQhCSGqqkTouZCTc7Esr75vELWYAH977Im4474hu7owHlzZ9vz0XiDEhTkCBdcz-hLEh5JvlbpCKlBFhgcx2QW5ke38_wlj-X2FNC_MMsZZzgD5PJHoQthmPyemqtIwE6dlcSR3RTuG4SkS_jJcJmODFMXQOsL-N5ASmh2BfFq8D4LYIMTI0sq3ADfc6A6jg55bEabNEJ4TcMWQcybDTADe-08d0M0WDVtnT-TCYV8AZGBrYW-UTWQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T12:54:13.429-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').
2017-06-152 13:52:00.853 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): F2
2017-06-152 13:52:00.853 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):86  entity(1):49
2017-06-152 13:52:00.856 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: Some(2020-05-29T14:52:59.138-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:00.856-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,spec(identity set for client2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(MaAwiQTG1N01zJ6_TE75y24jOVFtokG_8oyDdZkuZ8dF7UnIYbf6p56_Ccggh1B2t1mutpT9Kry_PAj5illqgpUengbN_u9RAQhCSGqqkTouZCTc7Esr75vELWYAH977Im4474hu7owHlzZ9vz0XiDEhTkCBdcz-hLEh5JvlbpCKlBFhgcx2QW5ke38_wlj-X2FNC_MMsZZzgD5PJHoQthmPyemqtIwE6dlcSR3RTuG4SkS_jJcJmODFMXQOsL-N5ASmh2BfFq8D4LYIMTI0sq3ADfc6A6jg55bEabNEJ4TcMWQcybDTADe-08d0M0WDVtnT-TCYV8AZGBrYW-UTWQ),
setData: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T12:54:13.429-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').)
2017-06-152 13:52:00.858 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache fetchValidIDSet}[0;39m - fetched valid id set: Token(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)
2017-06-152 13:52:00.859 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 15 fetched (prebuffer 12): Token(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)
2017-06-152 13:52:00.859 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8): List()
2017-06-152 13:52:00.860 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:00.737-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,spec(interpolate(argsFun(identity set for ,client2,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB, $CN -> client2)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 13:52:00.860 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: Some(2020-05-29T14:52:59.138-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:52:59.138-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:00.774-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,spec(identity set for client2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(MaAwiQTG1N01zJ6_TE75y24jOVFtokG_8oyDdZkuZ8dF7UnIYbf6p56_Ccggh1B2t1mutpT9Kry_PAj5illqgpUengbN_u9RAQhCSGqqkTouZCTc7Esr75vELWYAH977Im4474hu7owHlzZ9vz0XiDEhTkCBdcz-hLEh5JvlbpCKlBFhgcx2QW5ke38_wlj-X2FNC_MMsZZzgD5PJHoQthmPyemqtIwE6dlcSR3RTuG4SkS_jJcJmODFMXQOsL-N5ASmh2BfFq8D4LYIMTI0sq3ADfc6A6jg55bEabNEJ4TcMWQcybDTADe-08d0M0WDVtnT-TCYV8AZGBrYW-UTWQ),
setData: None
2017-06-152 13:52:00.861 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 13:52:00.880 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8:
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
REWHt0paEO_aP5X81a7U-5k_yLdAkVbIidEvwoHdjwbpmpGRgwA9cW23DLYRpJzofUpm9KDq0afcgDaPkcnjHhpp-ej_eoRw_XXXzDdvDSz7DmQfKUEFh3pG7-_eMuSFukPvgl-J3G5zEc6J_JorTuioTKD6qcnQQtZxe7EUr6wD7tl1--V-tC1Mpt5a1BToMkFbT7XYmqCjubdraT49ZH0_CtUgcFFyYfGWvv-O-sWuCslXuQvZLxqfEI1y7_CoSEQtooK2QJljJZkZ-SgjQJ5GyTFSc0cE2HO20SaQfvOP5QxvRqkIN1wZgPs7QWjUEQdensvtKyaV5CwQxO4n_A
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:00.862-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').
2017-06-152 13:52:00.881 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:00.881 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
REWHt0paEO_aP5X81a7U-5k_yLdAkVbIidEvwoHdjwbpmpGRgwA9cW23DLYRpJzofUpm9KDq0afcgDaPkcnjHhpp-ej_eoRw_XXXzDdvDSz7DmQfKUEFh3pG7-_eMuSFukPvgl-J3G5zEc6J_JorTuioTKD6qcnQQtZxe7EUr6wD7tl1--V-tC1Mpt5a1BToMkFbT7XYmqCjubdraT49ZH0_CtUgcFFyYfGWvv-O-sWuCslXuQvZLxqfEI1y7_CoSEQtooK2QJljJZkZ-SgjQJ5GyTFSc0cE2HO20SaQfvOP5QxvRqkIN1wZgPs7QWjUEQdensvtKyaV5CwQxO4n_A
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:00.862-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').
2017-06-152 13:52:00.938 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) is posted (code: 204)
2017-06-152 13:52:00.938 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('client2'), [makeMyIdentitySet('client2')]); solution(goals.head): ['V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8']; FreshGoals: List()
2017-06-152 13:52:00.948 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:00.948 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.948 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:00.948 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:00.949 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:00.949 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 13:52:00.950 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 13:52:00.951 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:00.951 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:00.952 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
2017-06-152 13:52:00.953 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
2017-06-152 13:52:01.065 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:01.066 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:01.066 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:01.067 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 16 fetched (prebuffer 13): Token(_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo)
2017-06-152 13:52:01.067 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo): ArrayBuffer(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)
2017-06-152 13:52:01.068 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 13:52:01.094 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo:
_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
Dx_lSAe3AhZeVnqjREPiLg16HHOeloylQumoprdE16ru0vNp1yACd8s5JLOGycGm9SEFfKqHWfi0EuuHR2bR_4ZZDxXlVth5eSZsveDD5k_42e58c1Kjsuxz0UqVz3m27PMgfzH1ouhOhQHhU5ZFokZbkJr3ptSdD5wqYN3Z6W3EB1E1eN8XqPdYjEllvU93iI22wPun-gP1M-osoVa-tRaudMQo551LgJ3S9YV7woJcqByMxmCykF8TSjWPPJNum6Mt-jvtdwVQCxTml6fmj9Rhb8reesDFyiLF1dj98NCCoGHVowZy_45peTg4A3B9g9QCUJMVa-fJjRYaApgrCA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.070-04:00, 2020-06-01T13:52:01.070-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
2017-06-152 13:52:01.095 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
2017-06-152 13:52:01.095 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
Dx_lSAe3AhZeVnqjREPiLg16HHOeloylQumoprdE16ru0vNp1yACd8s5JLOGycGm9SEFfKqHWfi0EuuHR2bR_4ZZDxXlVth5eSZsveDD5k_42e58c1Kjsuxz0UqVz3m27PMgfzH1ouhOhQHhU5ZFokZbkJr3ptSdD5wqYN3Z6W3EB1E1eN8XqPdYjEllvU93iI22wPun-gP1M-osoVa-tRaudMQo551LgJ3S9YV7woJcqByMxmCykF8TSjWPPJNum6Mt-jvtdwVQCxTml6fmj9Rhb8reesDFyiLF1dj98NCCoGHVowZy_45peTg4A3B9g9QCUJMVa-fJjRYaApgrCA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.070-04:00, 2020-06-01T13:52:01.070-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
2017-06-152 13:52:01.130 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo) is posted (code: 204)
2017-06-152 13:52:01.130 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo']; FreshGoals: List()
2017-06-152 13:52:01.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:01.140 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.140 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.140 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:01.141 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:01.141 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 13:52:01.141 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 13:52:01.142 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 13:52:01.144 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
2017-06-152 13:52:01.144 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
2017-06-152 13:52:01.186 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:01.187 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:01.187 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:01.187 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 17 fetched (prebuffer 14): Token(YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY)
2017-06-152 13:52:01.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY): List()
2017-06-152 13:52:01.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 13:52:01.203 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY:
YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
ShR7j1yjxsA2ASq_WWVa85-nZ2jP1gZMsqmTZk8gfdkCdmUInWUlE_blRmosilTL-Kk1A7o2dxMUrOri5LVCqvfT2oxVBLaW3W8PcxZy9TLp-hfuH3ZqGVmrZ0M8-qVNYiX8P5S7mnugOPJG15RhlS1gLtrZJpMDoUmxhoMgdh2oDdgey_LfyJsXa1Xr4UEgg9NSe4iX1QL_27hDzriY1Nedq7DvCktVgEMefzPnq1wqUccl_Ec9D5Gfg4vyB77RqW7uPo451Qdkhiaw4p-IPztDV7xI8UX09xckxz1rbLq0s7n-al2kH-qo30yBSvaMPkZ08b3wf4kEsqkPCaqT6A
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.189-04:00, 2020-06-01T13:52:01.189-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:01.204 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
2017-06-152 13:52:01.204 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
ShR7j1yjxsA2ASq_WWVa85-nZ2jP1gZMsqmTZk8gfdkCdmUInWUlE_blRmosilTL-Kk1A7o2dxMUrOri5LVCqvfT2oxVBLaW3W8PcxZy9TLp-hfuH3ZqGVmrZ0M8-qVNYiX8P5S7mnugOPJG15RhlS1gLtrZJpMDoUmxhoMgdh2oDdgey_LfyJsXa1Xr4UEgg9NSe4iX1QL_27hDzriY1Nedq7DvCktVgEMefzPnq1wqUccl_Ec9D5Gfg4vyB77RqW7uPo451Qdkhiaw4p-IPztDV7xI8UX09xckxz1rbLq0s7n-al2kH-qo30yBSvaMPkZ08b3wf4kEsqkPCaqT6A
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.189-04:00, 2020-06-01T13:52:01.189-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:01.466 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY) is posted (code: 204)
2017-06-152 13:52:01.467 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY']; FreshGoals: List()
2017-06-152 13:52:01.481 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:01.481 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.482 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.482 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:01.482 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:01.483 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 13:52:01.483 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 13:52:01.485 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 13:52:01.487 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
2017-06-152 13:52:01.488 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
2017-06-152 13:52:01.569 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:01.570 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:01.570 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:01.570 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 18 fetched (prebuffer 15): Token(lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s)
2017-06-152 13:52:01.571 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s): List()
2017-06-152 13:52:01.572 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 13:52:01.586 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s:
lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
oXMwmCPghFbX345qGMD3sLg5KUporEfIkZqX4QlMRIVIc_neDZsjUA80_F6wg53B-EqigFoL4MDkYoEI9ogZ6Jdgwg4lSFj3ugyQzoxqaH9bAsspJ0iPHKi465ozozxfQZeEZlnPtVyD73Y6Gf8EP2n4ejsHC3Ri9pEPFhKIKzUIXwmCWECTo46biZVDa5hfj1GUaiPEqdMvPZ9nsuZ9i5DQ2bdieE1UmUedRc73IBacG7aMzygzkDI-EXtN1VHByU_ksVE7Yqv17dp6lIMmze14Lr_k2xnPBeZ7fTm1smFAaa1ygMkHXX2j54dbvGLYE5B5DlX96qHn8oVmFnJgEg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.573-04:00, 2020-06-01T13:52:01.573-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'),?DstIP<:?DstIPSet.
2017-06-152 13:52:01.586 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
2017-06-152 13:52:01.586 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
oXMwmCPghFbX345qGMD3sLg5KUporEfIkZqX4QlMRIVIc_neDZsjUA80_F6wg53B-EqigFoL4MDkYoEI9ogZ6Jdgwg4lSFj3ugyQzoxqaH9bAsspJ0iPHKi465ozozxfQZeEZlnPtVyD73Y6Gf8EP2n4ejsHC3Ri9pEPFhKIKzUIXwmCWECTo46biZVDa5hfj1GUaiPEqdMvPZ9nsuZ9i5DQ2bdieE1UmUedRc73IBacG7aMzygzkDI-EXtN1VHByU_ksVE7Yqv17dp6lIMmze14Lr_k2xnPBeZ7fTm1smFAaa1ygMkHXX2j54dbvGLYE5B5DlX96qHn8oVmFnJgEg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.573-04:00, 2020-06-01T13:52:01.573-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'),?DstIP<:?DstIPSet.
2017-06-152 13:52:01.623 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s) is posted (code: 204)
2017-06-152 13:52:01.624 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s']; FreshGoals: List()
2017-06-152 13:52:01.631 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:01.631 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.631 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.632 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:01.632 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:01.632 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 13:52:01.633 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 13:52:01.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:01.635 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:01.636 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4) has expired from prefetching cache
2017-06-152 13:52:01.636 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) has expired from prefetching cache
2017-06-152 13:52:01.636 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
2017-06-152 13:52:01.637 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
2017-06-152 13:52:01.708 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:01.708 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:01.709 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:01.709 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 19 fetched (prebuffer 14): Token(B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY)
2017-06-152 13:52:01.709 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY): List()
2017-06-152 13:52:01.710 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 13:52:01.724 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY:
B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
EdBC3WZkX2cp3MhmqWuroy4MKi28OSGBJhRZcOFvFGUIp_eO7TCy14Z-F4nfSX9t72A2SkEwNiB1j9_PjaT2cai0rJV7hWO6JXWjg7_5eRo81noCLFMeDiDOq_N6qkBINOVO6PX9kFmC1DvtpIgkD4fONttJSVFoi_keb9laVVSW4x4nrheB7IkVVDwl-uWtzvf2jpLqS2caNk_sEYT9KEcAbXUSupzjYXlQpiUDpHQnxOZ6WSaSYEayPB-hJTm08lJLuB0ANcQ8-admLMx7Vi-ITk2czmwPRRvoJ8aAibdFS-ROcbps-tk0-uV2CKW25-WhBkvOcwFZn03aO36yyA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.711-04:00, 2020-06-01T13:52:01.711-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:01.725 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
2017-06-152 13:52:01.725 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
EdBC3WZkX2cp3MhmqWuroy4MKi28OSGBJhRZcOFvFGUIp_eO7TCy14Z-F4nfSX9t72A2SkEwNiB1j9_PjaT2cai0rJV7hWO6JXWjg7_5eRo81noCLFMeDiDOq_N6qkBINOVO6PX9kFmC1DvtpIgkD4fONttJSVFoi_keb9laVVSW4x4nrheB7IkVVDwl-uWtzvf2jpLqS2caNk_sEYT9KEcAbXUSupzjYXlQpiUDpHQnxOZ6WSaSYEayPB-hJTm08lJLuB0ANcQ8-admLMx7Vi-ITk2czmwPRRvoJ8aAibdFS-ROcbps-tk0-uV2CKW25-WhBkvOcwFZn03aO36yyA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:01.711-04:00, 2020-06-01T13:52:01.711-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:01.921 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY) is posted (code: 204)
2017-06-152 13:52:01.922 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY']; FreshGoals: List()
2017-06-152 13:52:01.935 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(client1)
2017-06-152 13:52:01.935 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('client1')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.936 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:01.936 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:01.936 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:01.936 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('client1')?)
2017-06-152 13:52:01.937 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('client1'); solution(goals.head): postIdSet('client1'); FreshGoals: List(defpost(postIdSet('client1'), [makeMyIdentitySet('client1')]))
2017-06-152 13:52:01.939 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('client1'); solution(goals.head): makeMyIdentitySet('client1'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:01.939 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:01.940 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:01.941 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:01.998 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
FWD1uiHPb9wuNIKl4F_QXZzDH373dvMQrC8PIeemLocIFoHqY7Q6QB9DIVIVqDwvi_rmbOsRAmbmUuz4bK6MG0fAQ9PcJZa-xpVNX2wrcHV2w8EaS3plcKkFSl0-g7fiotLGrSoEfbLrYshFEDjTa2Htp5kdawxQbfVKnKahoVhDf-RUulYtEuGN_zu6i_kXbATfxrAP63B5lL4vW9ScTmRMp5ck-1oEUlgV1jAXBXwZ72ecauXwYfmjNiude0h2p9fc5G2-eUoTk6pF0WNGvvCxt9QnkYIsZJGDeygl6xMAmE-3J9ygK9G8m1AiVN00g-yFAc7EBnUT7jcCYSIhGA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T12:54:16.867-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').
2017-06-152 13:52:01.998 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): rc
2017-06-152 13:52:01.998 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):105  entity(1):77
2017-06-152 13:52:02.001 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: Some(2020-05-29T14:52:59.725-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:02.001-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,spec(identity set for client1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(FWD1uiHPb9wuNIKl4F_QXZzDH373dvMQrC8PIeemLocIFoHqY7Q6QB9DIVIVqDwvi_rmbOsRAmbmUuz4bK6MG0fAQ9PcJZa-xpVNX2wrcHV2w8EaS3plcKkFSl0-g7fiotLGrSoEfbLrYshFEDjTa2Htp5kdawxQbfVKnKahoVhDf-RUulYtEuGN_zu6i_kXbATfxrAP63B5lL4vW9ScTmRMp5ck-1oEUlgV1jAXBXwZ72ecauXwYfmjNiude0h2p9fc5G2-eUoTk6pF0WNGvvCxt9QnkYIsZJGDeygl6xMAmE-3J9ygK9G8m1AiVN00g-yFAc7EBnUT7jcCYSIhGA),
setData: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T12:54:16.867-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').)
2017-06-152 13:52:02.002 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:02.002 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:02.006 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
FWD1uiHPb9wuNIKl4F_QXZzDH373dvMQrC8PIeemLocIFoHqY7Q6QB9DIVIVqDwvi_rmbOsRAmbmUuz4bK6MG0fAQ9PcJZa-xpVNX2wrcHV2w8EaS3plcKkFSl0-g7fiotLGrSoEfbLrYshFEDjTa2Htp5kdawxQbfVKnKahoVhDf-RUulYtEuGN_zu6i_kXbATfxrAP63B5lL4vW9ScTmRMp5ck-1oEUlgV1jAXBXwZ72ecauXwYfmjNiude0h2p9fc5G2-eUoTk6pF0WNGvvCxt9QnkYIsZJGDeygl6xMAmE-3J9ygK9G8m1AiVN00g-yFAc7EBnUT7jcCYSIhGA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T12:54:16.867-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').
2017-06-152 13:52:02.006 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): rc
2017-06-152 13:52:02.007 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):105  entity(1):77
2017-06-152 13:52:02.010 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: Some(2020-05-29T14:52:59.725-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:02.009-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,spec(identity set for client1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(FWD1uiHPb9wuNIKl4F_QXZzDH373dvMQrC8PIeemLocIFoHqY7Q6QB9DIVIVqDwvi_rmbOsRAmbmUuz4bK6MG0fAQ9PcJZa-xpVNX2wrcHV2w8EaS3plcKkFSl0-g7fiotLGrSoEfbLrYshFEDjTa2Htp5kdawxQbfVKnKahoVhDf-RUulYtEuGN_zu6i_kXbATfxrAP63B5lL4vW9ScTmRMp5ck-1oEUlgV1jAXBXwZ72ecauXwYfmjNiude0h2p9fc5G2-eUoTk6pF0WNGvvCxt9QnkYIsZJGDeygl6xMAmE-3J9ygK9G8m1AiVN00g-yFAc7EBnUT7jcCYSIhGA),
setData: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T12:54:16.867-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').)
2017-06-152 13:52:02.011 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache fetchValidIDSet}[0;39m - fetched valid id set: Token(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)
2017-06-152 13:52:02.012 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 20 fetched (prebuffer 15): Token(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)
2017-06-152 13:52:02.012 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8): List()
2017-06-152 13:52:02.013 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:01.940-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,spec(interpolate(argsFun(identity set for ,client1,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB, $CN -> client1)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 13:52:02.013 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: Some(2020-05-29T14:52:59.725-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:52:59.725-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:02.001-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,spec(identity set for client1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(FWD1uiHPb9wuNIKl4F_QXZzDH373dvMQrC8PIeemLocIFoHqY7Q6QB9DIVIVqDwvi_rmbOsRAmbmUuz4bK6MG0fAQ9PcJZa-xpVNX2wrcHV2w8EaS3plcKkFSl0-g7fiotLGrSoEfbLrYshFEDjTa2Htp5kdawxQbfVKnKahoVhDf-RUulYtEuGN_zu6i_kXbATfxrAP63B5lL4vW9ScTmRMp5ck-1oEUlgV1jAXBXwZ72ecauXwYfmjNiude0h2p9fc5G2-eUoTk6pF0WNGvvCxt9QnkYIsZJGDeygl6xMAmE-3J9ygK9G8m1AiVN00g-yFAc7EBnUT7jcCYSIhGA),
setData: None
2017-06-152 13:52:02.014 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 13:52:02.028 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8:
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
OUooAPTTPdWF5VC3Zi2juHjbYFwyX0bfZqU8L8GocOmd1CiPZsLz35SJ30Pp4W1NgGXJ6sowhMDxMdMEs4DKVxqCtfX7Itp-ajlr5ShmePt8ycMGfNnBW-IA_ejKlYSkzAIRu0o07muFe2sWJBy9EgOoNriOSTr3ZJmtsgi1M4Q6TpUXYKvTyV21KEgadEE59U7SnpjQ9wzAfPqeUd3t0HlChM6IiCvIHOitx0dHzcmUaSR2-VY6xTkZgU70vbXrLtUswacBZHl-MMjk3CBFY5aikZso80cs-g8E86w7oSDF07mob8BV04DUPxu45elqBpVbD3p5Q2kxVZS8Khl6Mw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.015-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').
2017-06-152 13:52:02.028 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:02.029 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
OUooAPTTPdWF5VC3Zi2juHjbYFwyX0bfZqU8L8GocOmd1CiPZsLz35SJ30Pp4W1NgGXJ6sowhMDxMdMEs4DKVxqCtfX7Itp-ajlr5ShmePt8ycMGfNnBW-IA_ejKlYSkzAIRu0o07muFe2sWJBy9EgOoNriOSTr3ZJmtsgi1M4Q6TpUXYKvTyV21KEgadEE59U7SnpjQ9wzAfPqeUd3t0HlChM6IiCvIHOitx0dHzcmUaSR2-VY6xTkZgU70vbXrLtUswacBZHl-MMjk3CBFY5aikZso80cs-g8E86w7oSDF07mob8BV04DUPxu45elqBpVbD3p5Q2kxVZS8Khl6Mw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.015-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').
2017-06-152 13:52:02.076 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) is posted (code: 204)
2017-06-152 13:52:02.077 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('client1'), [makeMyIdentitySet('client1')]); solution(goals.head): ['iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8']; FreshGoals: List()
2017-06-152 13:52:02.086 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:02.086 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.086 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.086 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:02.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:02.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 13:52:02.088 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 13:52:02.089 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:02.090 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:02.091 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
2017-06-152 13:52:02.091 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
2017-06-152 13:52:02.109 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:02.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:02.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:02.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 21 fetched (prebuffer 16): Token(p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs)
2017-06-152 13:52:02.111 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs): ArrayBuffer(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)
2017-06-152 13:52:02.111 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 13:52:02.121 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs:
p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
4NcJ28EVb41cP0FsPaJTgShUnKY23FVbiONHMi3_N5kI1tjnFLfNrTDbx6gHsxMlOBczq5OakLeSga1H2S_GakZDLEbPNwGrGzfgvB2BIU3qzeYdke12K12l7rdYnsWIPxXtc-hEpKiFLuI3RsytUZh3iLgSvS0qGPQZNLwOXofdNsgcRv02XUL9PxgSQX-rrQCbtbgvgsh-9RgD-5g86FGnGSc0U1asuVSNoX-Drbpu7r3NjJ6gYf-FmBGXPOnSVTtYbpc0B8OoT4jAtkOCXHT0DHo4W3b9eAflr1Hpi2L3mY7_ZS70XH8yWaOP_7hckKBBjG76KkFJdoNrkh0Hxw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.112-04:00, 2020-06-01T13:52:02.112-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
2017-06-152 13:52:02.121 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
2017-06-152 13:52:02.121 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
4NcJ28EVb41cP0FsPaJTgShUnKY23FVbiONHMi3_N5kI1tjnFLfNrTDbx6gHsxMlOBczq5OakLeSga1H2S_GakZDLEbPNwGrGzfgvB2BIU3qzeYdke12K12l7rdYnsWIPxXtc-hEpKiFLuI3RsytUZh3iLgSvS0qGPQZNLwOXofdNsgcRv02XUL9PxgSQX-rrQCbtbgvgsh-9RgD-5g86FGnGSc0U1asuVSNoX-Drbpu7r3NjJ6gYf-FmBGXPOnSVTtYbpc0B8OoT4jAtkOCXHT0DHo4W3b9eAflr1Hpi2L3mY7_ZS70XH8yWaOP_7hckKBBjG76KkFJdoNrkh0Hxw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.112-04:00, 2020-06-01T13:52:02.112-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
2017-06-152 13:52:02.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs) is posted (code: 204)
2017-06-152 13:52:02.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs']; FreshGoals: List()
2017-06-152 13:52:02.183 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:02.183 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.183 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.184 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:02.184 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:02.184 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 13:52:02.185 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 13:52:02.186 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 13:52:02.187 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
2017-06-152 13:52:02.187 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
2017-06-152 13:52:02.236 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:02.237 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:02.237 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:02.237 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 22 fetched (prebuffer 17): Token(VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM)
2017-06-152 13:52:02.237 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM): List()
2017-06-152 13:52:02.238 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 13:52:02.248 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM:
VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
Q7_8haWOvMPhzIpSh7XxMuxgzDtXJ3a_xssplwVoED-eJ2SonD_KbFfiUCnJxDQOzYyC0SR8cC2FrhMleAZKnxW1Z46vdULnb8wJ73GEt3OVuv_4vS7XjkjSI5MEPseQ0opQbhloZuOzi8gsGJ90yVDj33CDw34TUuNsOe82wucyIt0dnlJmNMmwerSetGLUbkXhUBtElq7t_y8oD3T-hvS2V4zDEGrJU8YNWh7UNltlLNTAxLM8jNbyhvCssQebItMO0i2inS4rcEbT1aeKMlF0YQVK92bNQPa2P4iVUeaLDjRWWzWL-7bSmITHkcJDp2Axp6U6-plYUOyzJrVqLw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.239-04:00, 2020-06-01T13:52:02.239-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:02.249 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
2017-06-152 13:52:02.249 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
Q7_8haWOvMPhzIpSh7XxMuxgzDtXJ3a_xssplwVoED-eJ2SonD_KbFfiUCnJxDQOzYyC0SR8cC2FrhMleAZKnxW1Z46vdULnb8wJ73GEt3OVuv_4vS7XjkjSI5MEPseQ0opQbhloZuOzi8gsGJ90yVDj33CDw34TUuNsOe82wucyIt0dnlJmNMmwerSetGLUbkXhUBtElq7t_y8oD3T-hvS2V4zDEGrJU8YNWh7UNltlLNTAxLM8jNbyhvCssQebItMO0i2inS4rcEbT1aeKMlF0YQVK92bNQPa2P4iVUeaLDjRWWzWL-7bSmITHkcJDp2Axp6U6-plYUOyzJrVqLw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.239-04:00, 2020-06-01T13:52:02.239-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:02.393 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM) is posted (code: 204)
2017-06-152 13:52:02.394 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM']; FreshGoals: List()
2017-06-152 13:52:02.403 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:02.403 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.403 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.403 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:02.403 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:02.404 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 13:52:02.404 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 13:52:02.405 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 13:52:02.407 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: __qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
2017-06-152 13:52:02.407 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
2017-06-152 13:52:02.581 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:02.581 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:02.582 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:02.582 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 23 fetched (prebuffer 18): Token(__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw)
2017-06-152 13:52:02.582 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw): List()
2017-06-152 13:52:02.583 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 13:52:02.599 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token __qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw:
__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
H9QRcCoqkRhgePwcvO_acDtRZPhpgnxTWeZXEQFFORkzcFOfsUrV3MFcpdWE_4m4gWpW-slkhzYUKnVLu_6IH5v6U2N9XYiYBBLdoQVjQWEkOPOpvZ06vyeCRpnh26cCftOheOJDqa_byQc7rZWZffti5N3nLjiowCegshkrXzLtopQU08nSiw5zf0wdXyWkxmswdwPQWRpmJrqhBPS6EiQk79_6-nM_2iMp9broe4zkU9G1n5KL07wpaLmXTzPIAcqcsZO7SeEDZe72rKsgyXoT_yiqmZJj25jeogAkcSVMrNNFdXSCwgznjYq_drFCdfvTVVZUlEWCeyFGCEo43A
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.584-04:00, 2020-06-01T13:52:02.584-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),?DstIP<:?DstIPSet.
2017-06-152 13:52:02.599 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: __qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
2017-06-152 13:52:02.599 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  __qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
H9QRcCoqkRhgePwcvO_acDtRZPhpgnxTWeZXEQFFORkzcFOfsUrV3MFcpdWE_4m4gWpW-slkhzYUKnVLu_6IH5v6U2N9XYiYBBLdoQVjQWEkOPOpvZ06vyeCRpnh26cCftOheOJDqa_byQc7rZWZffti5N3nLjiowCegshkrXzLtopQU08nSiw5zf0wdXyWkxmswdwPQWRpmJrqhBPS6EiQk79_6-nM_2iMp9broe4zkU9G1n5KL07wpaLmXTzPIAcqcsZO7SeEDZe72rKsgyXoT_yiqmZJj25jeogAkcSVMrNNFdXSCwgznjYq_drFCdfvTVVZUlEWCeyFGCEo43A
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.584-04:00, 2020-06-01T13:52:02.584-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),?DstIP<:?DstIPSet.
2017-06-152 13:52:02.747 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw) is posted (code: 204)
2017-06-152 13:52:02.747 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw']; FreshGoals: List()
2017-06-152 13:52:02.758 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:02.759 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.759 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.759 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:02.759 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:02.760 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 13:52:02.760 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 13:52:02.761 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:02.762 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:02.763 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
2017-06-152 13:52:02.764 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
2017-06-152 13:52:02.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:02.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:02.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:02.805 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 24 fetched (prebuffer 19): Token(jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ)
2017-06-152 13:52:02.805 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ): List()
2017-06-152 13:52:02.806 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 13:52:02.821 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ:
jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
SgXXGexxynxcFdww5jSxOexF7ZQZx1Oolz3VCmUO9cY_Q8yZHtXTAXuVRAQtQlh1D-JtrQMWbBq2-TRbexXe8UU3Wa7XgFkfDuX6fIgn-Y837S5B3VB265mXkUgfxnSt52fUnabhY8XVCvFWaKhOyCZW6hApXn3Bx3xhWJn1Q7fZWMh36unyMAAs9WTYLqOL5vfCZAQ2J3VTcHqMCTeR9Rui24WlNyap_nWHxV0kO-yrbSmxnVk8S-ZV71kB4OYSZPqDf4f8tteH9780RugFd3LDn4jjJJVqwJQf8-TyPQNJkNemSk99uh71FkXp22DYnlrVYQNE8GU8U1_N49ou1Q
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.807-04:00, 2020-06-01T13:52:02.807-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:02.822 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
2017-06-152 13:52:02.822 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
SgXXGexxynxcFdww5jSxOexF7ZQZx1Oolz3VCmUO9cY_Q8yZHtXTAXuVRAQtQlh1D-JtrQMWbBq2-TRbexXe8UU3Wa7XgFkfDuX6fIgn-Y837S5B3VB265mXkUgfxnSt52fUnabhY8XVCvFWaKhOyCZW6hApXn3Bx3xhWJn1Q7fZWMh36unyMAAs9WTYLqOL5vfCZAQ2J3VTcHqMCTeR9Rui24WlNyap_nWHxV0kO-yrbSmxnVk8S-ZV71kB4OYSZPqDf4f8tteH9780RugFd3LDn4jjJJVqwJQf8-TyPQNJkNemSk99uh71FkXp22DYnlrVYQNE8GU8U1_N49ou1Q
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:02.807-04:00, 2020-06-01T13:52:02.807-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:02.907 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ) is posted (code: 204)
2017-06-152 13:52:02.908 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ']; FreshGoals: List()
2017-06-152 13:52:02.927 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(rpkiroot)
2017-06-152 13:52:02.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('rpkiroot')? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:02.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:02.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - defenvGoals: List(SetVersion :- defenv(SetVersion, 'set29')., PolicyVersion :- defenv(PolicyVersion, 'policy23')., RpkiRoot :- defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:52:02.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
2017-06-152 13:52:02.929 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.SafelangService$class doInitialExecution}[0;39m - allGoals: ListBuffer(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:52:02.929 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(defenv(SetVersion, 'set29')., defenv(PolicyVersion, 'policy23')., defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').)
2017-06-152 13:52:02.930 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(SetVersion, 'set29'); solution(goals.head): defenv(SetVersion, 'set29'); FreshGoals: List()
2017-06-152 13:52:02.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(PolicyVersion, 'policy23'); solution(goals.head): defenv(PolicyVersion, 'policy23'); FreshGoals: List()
2017-06-152 13:52:02.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); solution(goals.head): defenv(RpkiRoot, 'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'); FreshGoals: List()
2017-06-152 13:52:02.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:02.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('rpkiroot')?)
2017-06-152 13:52:02.932 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('rpkiroot'); solution(goals.head): postIdSet('rpkiroot'); FreshGoals: List(defpost(postIdSet('rpkiroot'), [makeMyIdentitySet('rpkiroot')]))
2017-06-152 13:52:02.932 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('rpkiroot'); solution(goals.head): makeMyIdentitySet('rpkiroot'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:02.933 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:02.933 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:02.933 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.047 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
P9obuivItbtSd4IG4NzKDWWs_DpYQzITSkncj4ylfmPPAxNzyC2I9EP1Yl2JufrhOC7Z8R009oZn9X4hj4yKk51To9dAfl1CfR_KhntjZJOiQWzysttnNVeGALQ_44_e8m3ln01Ll6e72WhrojghSkqQTDcgEEA69w-R9mYOLhUa9CxT9oCpH8zPGFRxnmZBIXURtytionIALKR2Nh4FDdgYe2LhfEL9g0owq8MSLJiXbyWXD42wGrvpSh5eD57eTu3ts5ecPHBiaLPXCt95n2nX-MBNwECE3gHLrpWazGkFQZvj6fw8Os4rIiKO0of5xuwh9hDuq2sBYxeoOUT-6A
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T12:54:18.483-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').
2017-06-152 13:52:03.047 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): z4
2017-06-152 13:52:03.047 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):85  entity(1):73
2017-06-152 13:52:03.050 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: Some(2020-05-29T14:53:00.958-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:03.050-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,spec(identity set for rpkiroot))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(P9obuivItbtSd4IG4NzKDWWs_DpYQzITSkncj4ylfmPPAxNzyC2I9EP1Yl2JufrhOC7Z8R009oZn9X4hj4yKk51To9dAfl1CfR_KhntjZJOiQWzysttnNVeGALQ_44_e8m3ln01Ll6e72WhrojghSkqQTDcgEEA69w-R9mYOLhUa9CxT9oCpH8zPGFRxnmZBIXURtytionIALKR2Nh4FDdgYe2LhfEL9g0owq8MSLJiXbyWXD42wGrvpSh5eD57eTu3ts5ecPHBiaLPXCt95n2nX-MBNwECE3gHLrpWazGkFQZvj6fw8Os4rIiKO0of5xuwh9hDuq2sBYxeoOUT-6A),
setData: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T12:54:18.483-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').)
2017-06-152 13:52:03.050 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.051 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
P9obuivItbtSd4IG4NzKDWWs_DpYQzITSkncj4ylfmPPAxNzyC2I9EP1Yl2JufrhOC7Z8R009oZn9X4hj4yKk51To9dAfl1CfR_KhntjZJOiQWzysttnNVeGALQ_44_e8m3ln01Ll6e72WhrojghSkqQTDcgEEA69w-R9mYOLhUa9CxT9oCpH8zPGFRxnmZBIXURtytionIALKR2Nh4FDdgYe2LhfEL9g0owq8MSLJiXbyWXD42wGrvpSh5eD57eTu3ts5ecPHBiaLPXCt95n2nX-MBNwECE3gHLrpWazGkFQZvj6fw8Os4rIiKO0of5xuwh9hDuq2sBYxeoOUT-6A
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T12:54:18.483-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').
2017-06-152 13:52:03.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): z4
2017-06-152 13:52:03.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):85  entity(1):73
2017-06-152 13:52:03.178 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: Some(2020-05-29T14:53:00.958-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:03.178-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,spec(identity set for rpkiroot))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(P9obuivItbtSd4IG4NzKDWWs_DpYQzITSkncj4ylfmPPAxNzyC2I9EP1Yl2JufrhOC7Z8R009oZn9X4hj4yKk51To9dAfl1CfR_KhntjZJOiQWzysttnNVeGALQ_44_e8m3ln01Ll6e72WhrojghSkqQTDcgEEA69w-R9mYOLhUa9CxT9oCpH8zPGFRxnmZBIXURtytionIALKR2Nh4FDdgYe2LhfEL9g0owq8MSLJiXbyWXD42wGrvpSh5eD57eTu3ts5ecPHBiaLPXCt95n2nX-MBNwECE3gHLrpWazGkFQZvj6fw8Os4rIiKO0of5xuwh9hDuq2sBYxeoOUT-6A),
setData: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T12:54:18.483-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').)
2017-06-152 13:52:03.180 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache fetchValidIDSet}[0;39m - fetched valid id set: Token(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)
2017-06-152 13:52:03.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 25 fetched (prebuffer 20): Token(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)
2017-06-152 13:52:03.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA): List()
2017-06-152 13:52:03.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:02.933-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,spec(interpolate(argsFun(identity set for ,rpkiroot,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB, $CN -> rpkiroot)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 13:52:03.182 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: Some(2020-05-29T14:53:00.958-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:53:00.958-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:03.050-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,spec(identity set for rpkiroot))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(P9obuivItbtSd4IG4NzKDWWs_DpYQzITSkncj4ylfmPPAxNzyC2I9EP1Yl2JufrhOC7Z8R009oZn9X4hj4yKk51To9dAfl1CfR_KhntjZJOiQWzysttnNVeGALQ_44_e8m3ln01Ll6e72WhrojghSkqQTDcgEEA69w-R9mYOLhUa9CxT9oCpH8zPGFRxnmZBIXURtytionIALKR2Nh4FDdgYe2LhfEL9g0owq8MSLJiXbyWXD42wGrvpSh5eD57eTu3ts5ecPHBiaLPXCt95n2nX-MBNwECE3gHLrpWazGkFQZvj6fw8Os4rIiKO0of5xuwh9hDuq2sBYxeoOUT-6A),
setData: None
2017-06-152 13:52:03.183 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 13:52:03.198 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA:
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
EMAxn5BhJF9nEpIWqFuzZ8kwksNMMhi7fYIwo3N1-BJDA22dWlyag4ZY2XA1BwYAyrBjoF0w2pTC8QKrtxJqCyy6GUWif0BZADxGQX7lE3eVs1LR_5ZdEbHKU5xh4vN2cVXmWW7DBm_3EwRLd1jsL-OqH_htOjkPdnujtcAxNogcoaRfNdrdQXyybwzD5G7cSKe97sbM2MIaV-m48d1gRn3NLA9-L1IjRiNYPbS19n8VAVbxabTiNhGQmW5BYmKYkzDBW9KmvwwYKO7J03xaCROw5Y_8WVBojgj7Wwu4x618AeoI98ENbWg5_6PGh4FhxIf2tHMR76x6R1EGfpiR9Q
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.183-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').
2017-06-152 13:52:03.198 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.198 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
EMAxn5BhJF9nEpIWqFuzZ8kwksNMMhi7fYIwo3N1-BJDA22dWlyag4ZY2XA1BwYAyrBjoF0w2pTC8QKrtxJqCyy6GUWif0BZADxGQX7lE3eVs1LR_5ZdEbHKU5xh4vN2cVXmWW7DBm_3EwRLd1jsL-OqH_htOjkPdnujtcAxNogcoaRfNdrdQXyybwzD5G7cSKe97sbM2MIaV-m48d1gRn3NLA9-L1IjRiNYPbS19n8VAVbxabTiNhGQmW5BYmKYkzDBW9KmvwwYKO7J03xaCROw5Y_8WVBojgj7Wwu4x618AeoI98ENbWg5_6PGh4FhxIf2tHMR76x6R1EGfpiR9Q
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.183-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').
2017-06-152 13:52:03.262 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) is posted (code: 204)
2017-06-152 13:52:03.263 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('rpkiroot'), [makeMyIdentitySet('rpkiroot')]); solution(goals.head): ['UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA']; FreshGoals: List()
2017-06-152 13:52:03.271 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:03.272 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.272 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.272 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.273 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:03.273 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 13:52:03.274 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 13:52:03.275 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:03.276 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:03.277 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
2017-06-152 13:52:03.277 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
2017-06-152 13:52:03.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:03.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:03.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:03.361 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 26 fetched (prebuffer 21): Token(gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo)
2017-06-152 13:52:03.361 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo): ArrayBuffer(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)
2017-06-152 13:52:03.361 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 13:52:03.376 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo:
gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
C9WCkViXNRHcF4SlF19csxQ-GlJWTumfiKVXSBAhBMmmrmhRpY7lswDt-AgXq0yRHkSRu2zpa518UcU9U4hRox32-lg4CgwSRTgv2tK0qc6hkt2jINcqGDHxN_CuWk8bkNrL0d_YIp5orpYb9DmQpKF5-08cTDiIfCW31X9saanxcgtahh74DXWs7Ou4n7CqtqYDi1l0x-WC0S9fIWKA50ZmoA_g_RXNj_9WJMKvcYQYjFrtaERzvVLh0UcR50CsQt-7rKfTeiYemwBLz_q-EYYQ3PqYQshNTDH1sUPus3pznWtC8uXRcJUYpl5hYSEU8zZZRG02SBuzPiTSDTwM4g
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.362-04:00, 2020-06-01T13:52:03.362-04:00, PT720H
SHA256withRSA
subject(set29)

link('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').
2017-06-152 13:52:03.376 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
2017-06-152 13:52:03.377 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
C9WCkViXNRHcF4SlF19csxQ-GlJWTumfiKVXSBAhBMmmrmhRpY7lswDt-AgXq0yRHkSRu2zpa518UcU9U4hRox32-lg4CgwSRTgv2tK0qc6hkt2jINcqGDHxN_CuWk8bkNrL0d_YIp5orpYb9DmQpKF5-08cTDiIfCW31X9saanxcgtahh74DXWs7Ou4n7CqtqYDi1l0x-WC0S9fIWKA50ZmoA_g_RXNj_9WJMKvcYQYjFrtaERzvVLh0UcR50CsQt-7rKfTeiYemwBLz_q-EYYQ3PqYQshNTDH1sUPus3pznWtC8uXRcJUYpl5hYSEU8zZZRG02SBuzPiTSDTwM4g
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.362-04:00, 2020-06-01T13:52:03.362-04:00, PT720H
SHA256withRSA
subject(set29)

link('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').
2017-06-152 13:52:03.414 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo) is posted (code: 204)
2017-06-152 13:52:03.415 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo']; FreshGoals: List()
2017-06-152 13:52:03.422 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:03.422 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.422 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.422 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.423 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:03.423 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 13:52:03.424 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 13:52:03.425 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 13:52:03.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
2017-06-152 13:52:03.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
2017-06-152 13:52:03.585 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:03.585 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:03.586 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:03.586 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 27 fetched (prebuffer 22): Token(symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc)
2017-06-152 13:52:03.586 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc): List()
2017-06-152 13:52:03.587 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 13:52:03.604 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc:
symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
NTyP903Xuyw9XTuTmT6XRfQt6__ATTYCDU7jsw6vFQxaGOj1hFqk1M2u1nto0W2kwu56o7rzFjf4DhmryGDY9jUOYLt4lR1etfgRG7tm1Dr_b4H9KZH60fpT_TjL1Wq-sD9CpxKz8r_NHwFlqyRhXt9-HvgX3vAOk9-oMUiIrMCRLvwFY1e_FiW8RAiIcKHpSykpzuNYuCZRQz93x-OOC1mgwCEXwSqZVpgoeS5XAqFpszLS07UhgRhOGMkZKCmcuu9TEhgi8Il9xOim0yx2PTHu-CT0I2vuFJYUi24w5j4DQanNUaZPU3qmciBG3L6t4-dKjfPBAmFAnJbaJ7xBCQ
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.588-04:00, 2020-06-01T13:52:03.588-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:03.604 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
2017-06-152 13:52:03.604 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
NTyP903Xuyw9XTuTmT6XRfQt6__ATTYCDU7jsw6vFQxaGOj1hFqk1M2u1nto0W2kwu56o7rzFjf4DhmryGDY9jUOYLt4lR1etfgRG7tm1Dr_b4H9KZH60fpT_TjL1Wq-sD9CpxKz8r_NHwFlqyRhXt9-HvgX3vAOk9-oMUiIrMCRLvwFY1e_FiW8RAiIcKHpSykpzuNYuCZRQz93x-OOC1mgwCEXwSqZVpgoeS5XAqFpszLS07UhgRhOGMkZKCmcuu9TEhgi8Il9xOim0yx2PTHu-CT0I2vuFJYUi24w5j4DQanNUaZPU3qmciBG3L6t4-dKjfPBAmFAnJbaJ7xBCQ
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.588-04:00, 2020-06-01T13:52:03.588-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:03.760 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc) is posted (code: 204)
2017-06-152 13:52:03.761 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc']; FreshGoals: List()
2017-06-152 13:52:03.771 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:03.771 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.772 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.772 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.773 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:03.773 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 13:52:03.773 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 13:52:03.775 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 13:52:03.776 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM) has expired from prefetching cache
2017-06-152 13:52:03.777 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
2017-06-152 13:52:03.777 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
2017-06-152 13:52:03.853 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:03.853 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:03.854 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:03.854 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 28 fetched (prebuffer 22): Token(1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8)
2017-06-152 13:52:03.854 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8): List()
2017-06-152 13:52:03.855 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 13:52:03.868 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8:
1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
pFxwJGfwE8C-Ollo-oa79RKInHUzMyMmoSLmj2eMvEGzobZYLo0LdIe8qmN_5bx21oRk6GYl45xYocnl9uNSGq2C1KSGuFTehYNY_jkyn75rLAIstad09qJRcJfqSdRAYv5940r_Gv-os6WJ6j5GqPkg5Kgq3Y6eLUl4sQQnMvPYv-tBk8UH3v23PUx9OAj6sG7E6jthxoagHP8zOYSZZEMs--WVQzLfMegHeYmvfGzr6p_3PVHGP01VDZXFfin_uy0zIFDJHjqL8Uns3cJ_Qau2Mpen6CVrzpWNsvajUk2CBfFCWt3lif7viCb9mp5Q_t8v19V_sH9sq1undAMGew
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.857-04:00, 2020-06-01T13:52:03.857-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'),?DstIP<:?DstIPSet.
2017-06-152 13:52:03.868 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
2017-06-152 13:52:03.869 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
pFxwJGfwE8C-Ollo-oa79RKInHUzMyMmoSLmj2eMvEGzobZYLo0LdIe8qmN_5bx21oRk6GYl45xYocnl9uNSGq2C1KSGuFTehYNY_jkyn75rLAIstad09qJRcJfqSdRAYv5940r_Gv-os6WJ6j5GqPkg5Kgq3Y6eLUl4sQQnMvPYv-tBk8UH3v23PUx9OAj6sG7E6jthxoagHP8zOYSZZEMs--WVQzLfMegHeYmvfGzr6p_3PVHGP01VDZXFfin_uy0zIFDJHjqL8Uns3cJ_Qau2Mpen6CVrzpWNsvajUk2CBfFCWt3lif7viCb9mp5Q_t8v19V_sH9sq1undAMGew
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:03.857-04:00, 2020-06-01T13:52:03.857-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'),?DstIP<:?DstIPSet.
2017-06-152 13:52:03.923 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8) is posted (code: 204)
2017-06-152 13:52:03.923 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8']; FreshGoals: List()
2017-06-152 13:52:03.930 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:03.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:03.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:03.931 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:03.932 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 13:52:03.932 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 13:52:03.933 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:03.933 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:03.934 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
2017-06-152 13:52:03.935 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
2017-06-152 13:52:04.027 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:04.027 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:04.027 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:04.028 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 29 fetched (prebuffer 23): Token(h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U)
2017-06-152 13:52:04.028 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U): List()
2017-06-152 13:52:04.029 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 13:52:04.043 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U:
h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
WCCTAoutGIksvSgwOWNBNJ7HbQW3qyqErMrxuo6rf_NCa1waboM4GYihkj909iI4UDYD8B5-JTzkdFRWyOf6KmU3a18jBmz912EiEu2cYLGlMp40NoRvNRf3Dh5M5mYhiPM9RB351tsU7S56vlOzkr_P16hBAOhp-BoTdDHQIZNWnUP1YSabnW260K0qYx-Ecz37igH4WDUPKKbMEBuwW7_eyf0jtW7TDYyQThYf4eehBOieSdoDmlDQ6R9isL9-viDi42pAWCs1eI5Q8unOu2lI3xXoVemAA6pWNMWdOXVzYsM_zmgmSWC6qbloPxwQ18J3YkNtX_jPZwETk8Zodg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:04.030-04:00, 2020-06-01T13:52:04.030-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:04.043 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
2017-06-152 13:52:04.043 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
WCCTAoutGIksvSgwOWNBNJ7HbQW3qyqErMrxuo6rf_NCa1waboM4GYihkj909iI4UDYD8B5-JTzkdFRWyOf6KmU3a18jBmz912EiEu2cYLGlMp40NoRvNRf3Dh5M5mYhiPM9RB351tsU7S56vlOzkr_P16hBAOhp-BoTdDHQIZNWnUP1YSabnW260K0qYx-Ecz37igH4WDUPKKbMEBuwW7_eyf0jtW7TDYyQThYf4eehBOieSdoDmlDQ6R9isL9-viDi42pAWCs1eI5Q8unOu2lI3xXoVemAA6pWNMWdOXVzYsM_zmgmSWC6qbloPxwQ18J3YkNtX_jPZwETk8Zodg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:04.030-04:00, 2020-06-01T13:52:04.030-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:04.098 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U) is posted (code: 204)
2017-06-152 13:52:04.099 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U']; FreshGoals: List()
2017-06-152 13:52:04.106 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(as1)
2017-06-152 13:52:04.107 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('as1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.107 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.107 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.108 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:04.108 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('as1')?)
2017-06-152 13:52:04.109 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('as1'); solution(goals.head): postIdSet('as1'); FreshGoals: List(defpost(postIdSet('as1'), [makeMyIdentitySet('as1')]))
2017-06-152 13:52:04.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('as1'); solution(goals.head): makeMyIdentitySet('as1'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:04.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 13:52:04.111 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.111 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.176 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
GYqVMsEicfan21ukhPW0xSygmpF3zcbcT3sYieHOKjV7mHjHk2UCnboc8-D1oUZ36uA64kyHDlFohktkIN3xetddzobQv2K3dDSch5etsG4y4wOGPjsr68WdHJPC0B1hY_GO1fXHXwomUktddU6kLKj1BWg7RQiJzPKEy1R02q_8W4DJ01cH3iwaY6scMM-k1d491iRbIDLsGV0bi62dnmQb6I8Y2a6Px5jHxE8LFa-G5GACVkIRlwYqiPXEKW5B0GX4hJYPKl2Z9b2Yvxj6SOwGePiN_zPhWeQavYZK_YAPu-0Q1k7UtBbXfA0wpIsvFVleVvoiphdWdE2F3iODxQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T12:54:21.074-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').
2017-06-152 13:52:04.176 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): hJ
2017-06-152 13:52:04.176 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):98  entity(1):112
2017-06-152 13:52:04.179 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: Some(2020-05-29T14:53:01.975-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:04.179-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,spec(identity set for as1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(GYqVMsEicfan21ukhPW0xSygmpF3zcbcT3sYieHOKjV7mHjHk2UCnboc8-D1oUZ36uA64kyHDlFohktkIN3xetddzobQv2K3dDSch5etsG4y4wOGPjsr68WdHJPC0B1hY_GO1fXHXwomUktddU6kLKj1BWg7RQiJzPKEy1R02q_8W4DJ01cH3iwaY6scMM-k1d491iRbIDLsGV0bi62dnmQb6I8Y2a6Px5jHxE8LFa-G5GACVkIRlwYqiPXEKW5B0GX4hJYPKl2Z9b2Yvxj6SOwGePiN_zPhWeQavYZK_YAPu-0Q1k7UtBbXfA0wpIsvFVleVvoiphdWdE2F3iODxQ),
setData: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T12:54:21.074-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').)
2017-06-152 13:52:04.179 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.180 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.184 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - cert: 
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
GYqVMsEicfan21ukhPW0xSygmpF3zcbcT3sYieHOKjV7mHjHk2UCnboc8-D1oUZ36uA64kyHDlFohktkIN3xetddzobQv2K3dDSch5etsG4y4wOGPjsr68WdHJPC0B1hY_GO1fXHXwomUktddU6kLKj1BWg7RQiJzPKEy1R02q_8W4DJ01cH3iwaY6scMM-k1d491iRbIDLsGV0bi62dnmQb6I8Y2a6Px5jHxE8LFa-G5GACVkIRlwYqiPXEKW5B0GX4hJYPKl2Z9b2Yvxj6SOwGePiN_zPhWeQavYZK_YAPu-0Q1k7UtBbXfA0wpIsvFVleVvoiphdWdE2F3iODxQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T12:54:21.074-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').
2017-06-152 13:52:04.184 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - entity.substring(2,4): hJ
2017-06-152 13:52:04.185 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mHttpMultipartContentHelper$[0;39m [32m{safe.safelang.safesets.HttpMultipartContentHelper$ notMultipartEntity}[0;39m - notMultipart:true  entity(0):98  entity(1):112
2017-06-152 13:52:04.187 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - slogset: issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: Some(2020-05-29T14:53:01.975-04:00),
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: false,
validated: false,
resetTime: Some(2017-07-01T13:52:04.187-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,spec(identity set for as1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(GYqVMsEicfan21ukhPW0xSygmpF3zcbcT3sYieHOKjV7mHjHk2UCnboc8-D1oUZ36uA64kyHDlFohktkIN3xetddzobQv2K3dDSch5etsG4y4wOGPjsr68WdHJPC0B1hY_GO1fXHXwomUktddU6kLKj1BWg7RQiJzPKEy1R02q_8W4DJ01cH3iwaY6scMM-k1d491iRbIDLsGV0bi62dnmQb6I8Y2a6Px5jHxE8LFa-G5GACVkIRlwYqiPXEKW5B0GX4hJYPKl2Z9b2Yvxj6SOwGePiN_zPhWeQavYZK_YAPu-0Q1k7UtBbXfA0wpIsvFVleVvoiphdWdE2F3iODxQ),
setData: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T12:54:21.074-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').)
2017-06-152 13:52:04.189 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache fetchValidIDSet}[0;39m - fetched valid id set: Token(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)
2017-06-152 13:52:04.190 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 30 fetched (prebuffer 24): Token(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)
2017-06-152 13:52:04.190 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E): List()
2017-06-152 13:52:04.191 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.111-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,spec(interpolate(argsFun(identity set for ,as1,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB, $CN -> as1)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 13:52:04.191 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: Some(2020-05-29T14:53:01.975-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:53:01.975-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:04.179-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,spec(identity set for as1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(GYqVMsEicfan21ukhPW0xSygmpF3zcbcT3sYieHOKjV7mHjHk2UCnboc8-D1oUZ36uA64kyHDlFohktkIN3xetddzobQv2K3dDSch5etsG4y4wOGPjsr68WdHJPC0B1hY_GO1fXHXwomUktddU6kLKj1BWg7RQiJzPKEy1R02q_8W4DJ01cH3iwaY6scMM-k1d491iRbIDLsGV0bi62dnmQb6I8Y2a6Px5jHxE8LFa-G5GACVkIRlwYqiPXEKW5B0GX4hJYPKl2Z9b2Yvxj6SOwGePiN_zPhWeQavYZK_YAPu-0Q1k7UtBbXfA0wpIsvFVleVvoiphdWdE2F3iODxQ),
setData: None
2017-06-152 13:52:04.192 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 13:52:04.204 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E:
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
FA-DqgSj-pb_0Qh8AckJawRXpQ8dFLjMiM31KsriBqDgn0R_ZmrXP7Tm2FP5yn33gy-VQRsjDvZ2BpdZ0uY1rSCDWGHHE56DGFXnthxfqDAGI6NzKnbMsFqhVvmEL8Dsa6eP_k06XgKZK95NeZfMK_jmYjhHi3US4su1eSTVMGi_XaIWXOJyE6KFjww0EGxWCMnCFoDgTtK0WF4UJVY9BndtKhaNA-t_lO7nHUGVn4QTJAdSaO6ZUDls1wOyMQw8UF4ZAlVXO217LipSmWAVQL7MEuDZOvVFOYoaWIcdMhClq2accCEkM-QzDXblOFi0O5Pw2WnBbyz5OfCxsjnQOQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.193-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').
2017-06-152 13:52:04.204 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.204 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
FA-DqgSj-pb_0Qh8AckJawRXpQ8dFLjMiM31KsriBqDgn0R_ZmrXP7Tm2FP5yn33gy-VQRsjDvZ2BpdZ0uY1rSCDWGHHE56DGFXnthxfqDAGI6NzKnbMsFqhVvmEL8Dsa6eP_k06XgKZK95NeZfMK_jmYjhHi3US4su1eSTVMGi_XaIWXOJyE6KFjww0EGxWCMnCFoDgTtK0WF4UJVY9BndtKhaNA-t_lO7nHUGVn4QTJAdSaO6ZUDls1wOyMQw8UF4ZAlVXO217LipSmWAVQL7MEuDZOvVFOYoaWIcdMhClq2accCEkM-QzDXblOFi0O5Pw2WnBbyz5OfCxsjnQOQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.193-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').
2017-06-152 13:52:04.210 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) is posted (code: 204)
2017-06-152 13:52:04.210 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('as1'), [makeMyIdentitySet('as1')]); solution(goals.head): ['bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E']; FreshGoals: List()
2017-06-152 13:52:04.217 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:04.217 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.217 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.218 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.218 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:04.218 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 13:52:04.218 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 13:52:04.219 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:04.219 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 13:52:04.220 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo) has expired from prefetching cache
2017-06-152 13:52:04.220 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
2017-06-152 13:52:04.220 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
2017-06-152 13:52:04.241 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:04.241 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:04.241 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:04.241 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 31 fetched (prebuffer 24): Token(IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4)
2017-06-152 13:52:04.242 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4): ArrayBuffer(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)
2017-06-152 13:52:04.242 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 13:52:04.251 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4:
IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
ApCu1SyzDPHYrZ-XTUPq-DIgtolthgVxdtm0SYttd1AVJVBOigXTeCkuZlZ6BK_fuJZPh7WO5_DS-hTpaqBKN8H1DIsd2OfL3bc971oI-IDmr1SIHSexGllivmO0zNj8Ggp1_TO8P-7dleIh-Nz5gpMsyrIv5LMPFuqOdmbfASnPcghp7FkQVlqUVqTuf33zW83o-fv3HeUOkHjlOfZ51QbdenhPtDX8AD3VSrm-EkQVw8DAfWgc0Uva5axf70sfVAysqi3rFeQnso1bIr0QlPYMjX6k7wUMDHGOz9rVosjNeKCmG4Gg3RoBYz7Qc4R96AgF4CcDquNaE_mOrorh6A
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.243-04:00, 2020-06-01T13:52:04.243-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
2017-06-152 13:52:04.251 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
2017-06-152 13:52:04.251 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
ApCu1SyzDPHYrZ-XTUPq-DIgtolthgVxdtm0SYttd1AVJVBOigXTeCkuZlZ6BK_fuJZPh7WO5_DS-hTpaqBKN8H1DIsd2OfL3bc971oI-IDmr1SIHSexGllivmO0zNj8Ggp1_TO8P-7dleIh-Nz5gpMsyrIv5LMPFuqOdmbfASnPcghp7FkQVlqUVqTuf33zW83o-fv3HeUOkHjlOfZ51QbdenhPtDX8AD3VSrm-EkQVw8DAfWgc0Uva5axf70sfVAysqi3rFeQnso1bIr0QlPYMjX6k7wUMDHGOz9rVosjNeKCmG4Gg3RoBYz7Qc4R96AgF4CcDquNaE_mOrorh6A
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.243-04:00, 2020-06-01T13:52:04.243-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
2017-06-152 13:52:04.329 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4) is posted (code: 204)
2017-06-152 13:52:04.329 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4']; FreshGoals: List()
2017-06-152 13:52:04.336 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:04.337 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.337 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.337 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.338 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:04.338 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 13:52:04.338 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 13:52:04.339 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 13:52:04.341 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:52:04.341 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:52:04.348 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:04.348 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:04.349 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:04.349 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 32 fetched (prebuffer 25): Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg)
2017-06-152 13:52:04.350 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg): List()
2017-06-152 13:52:04.350 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 13:52:04.363 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg:
MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
W4XYoYnvS4Qt_Q60qehq9yyc_iPSgU6moMyW2CI9ASSycWZb3Xeouyvq1r-tSR3b8vBLn161gg5vw1A4qh0o5VtTntstolTFqsAXcGo7r18LEqYOy6_13mnQpJv_GftYxPOrNpaS7UOUpz28BQt0zWSqEu13AXYj5KIA-POx4XP7ti3HOixuoObuQEUUJJdsN5ZWmXnnIOLpHePBQxV9bDBjiyws-xcLwQz8iQMGvsADfuUel03UCvy73fkJQtuX8lUQjp8mRR1RODgIhff7KKGvwA94vF2qIT2LMV5IW3ay4NzhNroLtI5F540nf4jAmrn7wh_6KM0gskUnGOnKxw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.351-04:00, 2020-06-01T13:52:04.351-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:04.363 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:52:04.363 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
W4XYoYnvS4Qt_Q60qehq9yyc_iPSgU6moMyW2CI9ASSycWZb3Xeouyvq1r-tSR3b8vBLn161gg5vw1A4qh0o5VtTntstolTFqsAXcGo7r18LEqYOy6_13mnQpJv_GftYxPOrNpaS7UOUpz28BQt0zWSqEu13AXYj5KIA-POx4XP7ti3HOixuoObuQEUUJJdsN5ZWmXnnIOLpHePBQxV9bDBjiyws-xcLwQz8iQMGvsADfuUel03UCvy73fkJQtuX8lUQjp8mRR1RODgIhff7KKGvwA94vF2qIT2LMV5IW3ay4NzhNroLtI5F540nf4jAmrn7wh_6KM0gskUnGOnKxw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.351-04:00, 2020-06-01T13:52:04.351-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 13:52:04.402 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) is posted (code: 204)
2017-06-152 13:52:04.402 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg']; FreshGoals: List()
2017-06-152 13:52:04.409 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:04.410 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.410 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.410 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.411 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:04.411 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 13:52:04.411 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 13:52:04.413 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 13:52:04.414 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) has expired from prefetching cache
2017-06-152 13:52:04.414 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:52:04.415 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:52:04.418 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:04.418 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:04.419 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:04.419 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 33 fetched (prebuffer 25): Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg)
2017-06-152 13:52:04.419 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg): List()
2017-06-152 13:52:04.420 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 13:52:04.429 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg:
sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
Uo_RlVdg_7SqlcBk1FOUZWmZrN8sBwYqchLiwYdOyDburWjdPbebd1iaLVlQ1LPL8xjBFpYNix3zlsHwfWwuShcV83HnQyidwRxmtfHk1AeJB1UKlvDoSbEoHFZ8x3w1KJeVAqrqJb1pwdhutuaZpVnxDmOMg4WYDmYDhrZ5lS37UY9QDW49USI6NUbK_dlH5CfuOW2Fgs2AuSphQZApdkmOHUaUut0k6LVMnDHCzXnXUYHQyE-gH5iVkUMFqjfakBOaOQBex0IAI-wmNoj4fkKNb0rXv_qr_5aVIe0_XUaR-TVQsZzCLXo7T3azZuaL-PyTOM2MFUrBUiKc-aA4ow
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.421-04:00, 2020-06-01T13:52:04.421-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),?DstIP<:?DstIPSet.
2017-06-152 13:52:04.429 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:52:04.429 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
Uo_RlVdg_7SqlcBk1FOUZWmZrN8sBwYqchLiwYdOyDburWjdPbebd1iaLVlQ1LPL8xjBFpYNix3zlsHwfWwuShcV83HnQyidwRxmtfHk1AeJB1UKlvDoSbEoHFZ8x3w1KJeVAqrqJb1pwdhutuaZpVnxDmOMg4WYDmYDhrZ5lS37UY9QDW49USI6NUbK_dlH5CfuOW2Fgs2AuSphQZApdkmOHUaUut0k6LVMnDHCzXnXUYHQyE-gH5iVkUMFqjfakBOaOQBex0IAI-wmNoj4fkKNb0rXv_qr_5aVIe0_XUaR-TVQsZzCLXo7T3azZuaL-PyTOM2MFUrBUiKc-aA4ow
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.421-04:00, 2020-06-01T13:52:04.421-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),?DstIP<:?DstIPSet.
2017-06-152 13:52:04.485 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) is posted (code: 204)
2017-06-152 13:52:04.485 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg']; FreshGoals: List()
2017-06-152 13:52:04.491 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 13:52:04.492 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.492 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.492 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:04.492 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:04.493 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 13:52:04.493 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 13:52:04.494 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:04.494 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 13:52:04.496 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
2017-06-152 13:52:04.496 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
2017-06-152 13:52:04.566 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:04.566 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:04.567 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:04.567 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 34 fetched (prebuffer 26): Token(FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4)
2017-06-152 13:52:04.567 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4): List()
2017-06-152 13:52:04.568 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 13:52:04.583 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4:
FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
BKEyC26rINAUrqDvqosE83ZSzDwiIhr53TaKGCvzhBg9hIaCRNGRf5ZMeBHqAXkEmA8xIaHB_iiXxqqcqxuDUm3h8qlZ8Nn4Xu-x9Lq51Pez9oZDMXStB5QPajtMRxGpc0ANdyx_rKixqbg550PqPB-YiUlm1K570h2KawfmKM1-K7OwxJna5AtAGwyD0LvS19A6zgZTPl86bjJ3Kqc3dEHVLL3Qtytp_-l1y6EU3CWQvBvmuZZfeura_oX02xgxj-l2aap9P0kAnFP2SXhyjwDLFJK1h7BYO8lXPcBarMwDX5Db7URu46K6jM7t8i7G1ryZuKDeh55qArtwJxZTZQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.569-04:00, 2020-06-01T13:52:04.569-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:04.583 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
2017-06-152 13:52:04.583 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
BKEyC26rINAUrqDvqosE83ZSzDwiIhr53TaKGCvzhBg9hIaCRNGRf5ZMeBHqAXkEmA8xIaHB_iiXxqqcqxuDUm3h8qlZ8Nn4Xu-x9Lq51Pez9oZDMXStB5QPajtMRxGpc0ANdyx_rKixqbg550PqPB-YiUlm1K570h2KawfmKM1-K7OwxJna5AtAGwyD0LvS19A6zgZTPl86bjJ3Kqc3dEHVLL3Qtytp_-l1y6EU3CWQvBvmuZZfeura_oX02xgxj-l2aap9P0kAnFP2SXhyjwDLFJK1h7BYO8lXPcBarMwDX5Db7URu46K6jM7t8i7G1ryZuKDeh55qArtwJxZTZQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:04.569-04:00, 2020-06-01T13:52:04.569-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 13:52:04.741 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4) is posted (code: 204)
2017-06-152 13:52:04.742 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4']; FreshGoals: List()
2017-06-152 13:52:04.750 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 13:52:04.750 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.750 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.751 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:04.751 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:04.751 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 13:52:04.752 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 13:52:04.753 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:04.754 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:04.755 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s) has expired from prefetching cache
2017-06-152 13:52:04.756 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
2017-06-152 13:52:04.756 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
2017-06-152 13:52:04.837 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:04.837 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:04.838 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:04.838 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 35 fetched (prebuffer 26): Token(jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY)
2017-06-152 13:52:04.838 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY): List()
2017-06-152 13:52:04.839 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 13:52:04.852 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY:
jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
zrBzHaPBgUcMyXJYrjwKXRFqbcelmdbnRs8-efuY3VsNXxBJus-5W6VSJFMR4Swu2QnGWQc-DuDI45LDuxiv9O8LHcZYZYemYswKC5cnZc4QhM5PdXZyvDhAnbWTOC37ezrF2aacwS2xzoiDL2XmXK56c2r79ryjnnfJfNvMGvxhLRI5m6GhpkqdMzjDUT_6CmR9x17e7zhvco3J4Zme0BH2qntkV7JbB52VcXSfhtADdlo4doGyiBldHRBbc7Y6RkQX63aw5KyX4EA-qKFxiMi1V8nPf8lctQK8u6PsVBgY6xcvmrQwhPL9bQYRYTvgd9rRr-kESiEtwDV8yAloTA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:04.840-04:00, 2020-06-01T13:52:04.840-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:04.852 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
2017-06-152 13:52:04.852 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
zrBzHaPBgUcMyXJYrjwKXRFqbcelmdbnRs8-efuY3VsNXxBJus-5W6VSJFMR4Swu2QnGWQc-DuDI45LDuxiv9O8LHcZYZYemYswKC5cnZc4QhM5PdXZyvDhAnbWTOC37ezrF2aacwS2xzoiDL2XmXK56c2r79ryjnnfJfNvMGvxhLRI5m6GhpkqdMzjDUT_6CmR9x17e7zhvco3J4Zme0BH2qntkV7JbB52VcXSfhtADdlo4doGyiBldHRBbc7Y6RkQX63aw5KyX4EA-qKFxiMi1V8nPf8lctQK8u6PsVBgY6xcvmrQwhPL9bQYRYTvgd9rRr-kESiEtwDV8yAloTA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:04.840-04:00, 2020-06-01T13:52:04.840-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:04.948 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY) is posted (code: 204)
2017-06-152 13:52:04.949 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY']; FreshGoals: List()
2017-06-152 13:52:04.958 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)
2017-06-152 13:52:04.959 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.959 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:04.959 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:52:04.959 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:52:04.960 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')?)
2017-06-152 13:52:04.961 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); solution(goals.head): postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); FreshGoals: List(defpost(postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), [endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')]))
2017-06-152 13:52:04.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); solution(goals.head): endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:04.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:04.964 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) has expired from prefetching cache
2017-06-152 13:52:04.964 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 13:52:04.964 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 13:52:05.044 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:05.045 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:05.045 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:05.046 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 36 fetched (prebuffer 26): Token(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 13:52:05.046 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo): List()
2017-06-152 13:52:05.047 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 13:52:05.062 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
XgXbL_r7ZCHqIAFyfzjzx01MaNXWS-2N7jfNgcMgr8aCMML0GeW-wS8z5t2FU0p3KJjH2O-eWylIBUTNVXCRkvd30vheqvYax8EI1qDuEui8PtZXjbmNpnFQAS_3hKHhC4ts-KmBqS7oYcwHy4CPX-75gF4D4Xoi9HvJx_VAPEZL7ROl9xbIvQ7_A446ApFFszbya7APvXfg6mKHtSRnlpQzkRJ7pqEb39fFfKqANyI2ngLeH_rEFX3Dk5q1IWP9YHGPLJuhsGloOZDWBquIRe6R-wVNzEDj9MUQSYOELMZMLg7PV5rCwXL0Xo7oh-WOXE-lEQ4jI66Hq-U0zQSi3g
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:05.048-04:00, 2020-06-01T13:52:05.048-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
2017-06-152 13:52:05.062 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 13:52:05.062 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
XgXbL_r7ZCHqIAFyfzjzx01MaNXWS-2N7jfNgcMgr8aCMML0GeW-wS8z5t2FU0p3KJjH2O-eWylIBUTNVXCRkvd30vheqvYax8EI1qDuEui8PtZXjbmNpnFQAS_3hKHhC4ts-KmBqS7oYcwHy4CPX-75gF4D4Xoi9HvJx_VAPEZL7ROl9xbIvQ7_A446ApFFszbya7APvXfg6mKHtSRnlpQzkRJ7pqEb39fFfKqANyI2ngLeH_rEFX3Dk5q1IWP9YHGPLJuhsGloOZDWBquIRe6R-wVNzEDj9MUQSYOELMZMLg7PV5rCwXL0Xo7oh-WOXE-lEQ4jI66Hq-U0zQSi3g
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:05.048-04:00, 2020-06-01T13:52:05.048-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
2017-06-152 13:52:05.131 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 13:52:05.132 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), [endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 13:52:05.141 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 13:52:05.142 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.142 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.142 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:05.142 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:05.143 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 13:52:05.144 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 13:52:05.145 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:05.146 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:05.147 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.147-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:05.148 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:02.090-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Self -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))),
links: ArrayBuffer(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:05.149 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 13:52:05.162 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs:
p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
ZRlR4iw_q2_xYlHOv-W_15FLN8XvLshgv9CMa5fAq-HoFIlZsdur6uudpfYRe6zlOEojtAdevwMUzMRCIC1la9NZejSeZmhMdZ5yV84EzcgTeMvXcPJwD9U0TQBAvo1AlZM9GYEiQcj91a_N6kRlMsKU0hsMvQ_-68lVnjo8qjnh1JPjlTI_Z1k05nQdzQ4r18CZ0J7X1f4niPf_wcnfOQO-sMPWbSNuAI1tCfE6ujv9EizNJAFFgeYsEIRJHcYKU0ZrvQjSNqv8Pcn9YoIPFn3ExdJvba69GaGDMvzZcRe-BBZFpMu7wvuRgh2KrDNy1_XCfXqx7K9tECKwxRSHTQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:05.150-04:00, 2020-06-01T13:52:05.150-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:05.162 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
2017-06-152 13:52:05.162 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
ZRlR4iw_q2_xYlHOv-W_15FLN8XvLshgv9CMa5fAq-HoFIlZsdur6uudpfYRe6zlOEojtAdevwMUzMRCIC1la9NZejSeZmhMdZ5yV84EzcgTeMvXcPJwD9U0TQBAvo1AlZM9GYEiQcj91a_N6kRlMsKU0hsMvQ_-68lVnjo8qjnh1JPjlTI_Z1k05nQdzQ4r18CZ0J7X1f4niPf_wcnfOQO-sMPWbSNuAI1tCfE6ujv9EizNJAFFgeYsEIRJHcYKU0ZrvQjSNqv8Pcn9YoIPFn3ExdJvba69GaGDMvzZcRe-BBZFpMu7wvuRgh2KrDNy1_XCfXqx7K9tECKwxRSHTQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:05.150-04:00, 2020-06-01T13:52:05.150-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:05.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs) is posted (code: 204)
2017-06-152 13:52:05.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs']; FreshGoals: List()
2017-06-152 13:52:05.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 13:52:05.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.181 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.182 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:05.182 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:05.182 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 13:52:05.183 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 13:52:05.184 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:05.184 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:05.185 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: -NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
2017-06-152 13:52:05.185 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
2017-06-152 13:52:05.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:05.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:05.225 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:05.225 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 37 fetched (prebuffer 27): Token(-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM)
2017-06-152 13:52:05.225 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM): List()
2017-06-152 13:52:05.226 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 13:52:05.236 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token -NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM:
-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
DNxn0gQ6uYe1izB5XbNKIoAQfpCqVuLdWVavfa5Byr_8zXnol22QqB_DBknvcrap00AoQybfm5OpWQuImLlOmL-xDhuhtzrDJMyDaXKJ5oYAf1rxqBkZ-NFdYPOmtqQg9cuqprCvn6py3F-TnVwdtmlJRe2XWcjpErEn0y4xdPAyexwAqlJRq4KtlNL7bJYE9qYEiWB5E8Xv0rCY3YWuy48mIf9chiNIh8TPhfmsNESpZcX81B8ucbAPQhusQvTJdCXKujK6UcNh0nYPWNYLXtlurwRzeUmvfTo_c1TIIm-jNa2doZSzoXTGOMN1vB-ZAptM4Dfen-ZBdyKV7hwcNw
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:05.227-04:00, 2020-06-01T13:52:05.227-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:05.237 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: -NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
2017-06-152 13:52:05.237 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  -NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
DNxn0gQ6uYe1izB5XbNKIoAQfpCqVuLdWVavfa5Byr_8zXnol22QqB_DBknvcrap00AoQybfm5OpWQuImLlOmL-xDhuhtzrDJMyDaXKJ5oYAf1rxqBkZ-NFdYPOmtqQg9cuqprCvn6py3F-TnVwdtmlJRe2XWcjpErEn0y4xdPAyexwAqlJRq4KtlNL7bJYE9qYEiWB5E8Xv0rCY3YWuy48mIf9chiNIh8TPhfmsNESpZcX81B8ucbAPQhusQvTJdCXKujK6UcNh0nYPWNYLXtlurwRzeUmvfTo_c1TIIm-jNa2doZSzoXTGOMN1vB-ZAptM4Dfen-ZBdyKV7hwcNw
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:05.227-04:00, 2020-06-01T13:52:05.227-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:05.399 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM) is posted (code: 204)
2017-06-152 13:52:05.399 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM']; FreshGoals: List()
2017-06-152 13:52:05.405 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)
2017-06-152 13:52:05.406 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.406 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.406 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:52:05.406 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:52:05.407 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')?)
2017-06-152 13:52:05.408 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); solution(goals.head): postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); FreshGoals: List(defpost(postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), [endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')]))
2017-06-152 13:52:05.409 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); solution(goals.head): endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:05.410 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:05.411 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.410-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 13:52:05.411 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.963-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 13:52:05.412 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 13:52:05.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
IKapduoBjoCUpsOEN2DCEJWqpUldWbn8XVtxjtzJFnZGKmBvpnnklrDqhA0v0jygED8k9ZCHeDSphNSnEcbhHgSSSZiles7o58ZhuvgZfDR-ZN8x8FCd55hGFqmdbZhrZktoul7yEuVs02Gt1tOQajlcYMbB8Kg8M1FTck9ykr64LQrHxxWwKWWEqCaleE4VAT7XvGONYtxaSiWtTqo0wzYOBRifxtcw6PMWm9kfYr15bzqNuAjU2a9r3JpEsJt_smBTVsrjWJfb2u5RauaoyXmurjiGi3ouYSDmDhatQDl9C8NKGH400W3oR0hrn8v4Pd6VEVqmGerGwIqWymjTUg
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:05.413-04:00, 2020-06-01T13:52:05.413-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
2017-06-152 13:52:05.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 13:52:05.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
IKapduoBjoCUpsOEN2DCEJWqpUldWbn8XVtxjtzJFnZGKmBvpnnklrDqhA0v0jygED8k9ZCHeDSphNSnEcbhHgSSSZiles7o58ZhuvgZfDR-ZN8x8FCd55hGFqmdbZhrZktoul7yEuVs02Gt1tOQajlcYMbB8Kg8M1FTck9ykr64LQrHxxWwKWWEqCaleE4VAT7XvGONYtxaSiWtTqo0wzYOBRifxtcw6PMWm9kfYr15bzqNuAjU2a9r3JpEsJt_smBTVsrjWJfb2u5RauaoyXmurjiGi3ouYSDmDhatQDl9C8NKGH400W3oR0hrn8v4Pd6VEVqmGerGwIqWymjTUg
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:05.413-04:00, 2020-06-01T13:52:05.413-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
2017-06-152 13:52:05.508 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 13:52:05.509 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), [endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 13:52:05.516 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 13:52:05.517 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.517 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.517 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:05.517 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:05.518 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 13:52:05.519 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 13:52:05.520 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:05.520 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:05.521 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.521-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:05.522 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:00.952-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Self -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)))),
links: ArrayBuffer(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:05.522 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 13:52:05.534 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo:
_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
Y3_WjT1N_aB_wio6peZoi2U9E2rJGJ7Fr2DO86auWYQiJNM2m7-iaxxwqlVM4xa-dl5p6qUbvsB8TCBzKI5IJZPeDAF-IWalwtHZgrnE2w8ryFbwrrqVsSzy3NrwkUlP8i9bgIh6jVa4mQH5ljcnPFlLyeevhrFhNWCQKJ2BqnK2Id5AJdEdLLYxrsB6IDKmhid9tScsAvY0o179MXjG7q2CGlOoaA-9LYP8_au_6KiL0VHeAnuEJ75mOGdWD5ot-Lt7lIl4QzqKu6rSYuZ4G5fMUc49_MaS4AULnOp-WKVcG0wKe0GoGEfrgeE587v1F2RN6Z9F6iqJhjfMx8rfAg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:05.523-04:00, 2020-06-01T13:52:05.523-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:05.534 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
2017-06-152 13:52:05.534 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
Y3_WjT1N_aB_wio6peZoi2U9E2rJGJ7Fr2DO86auWYQiJNM2m7-iaxxwqlVM4xa-dl5p6qUbvsB8TCBzKI5IJZPeDAF-IWalwtHZgrnE2w8ryFbwrrqVsSzy3NrwkUlP8i9bgIh6jVa4mQH5ljcnPFlLyeevhrFhNWCQKJ2BqnK2Id5AJdEdLLYxrsB6IDKmhid9tScsAvY0o179MXjG7q2CGlOoaA-9LYP8_au_6KiL0VHeAnuEJ75mOGdWD5ot-Lt7lIl4QzqKu6rSYuZ4G5fMUc49_MaS4AULnOp-WKVcG0wKe0GoGEfrgeE587v1F2RN6Z9F6iqJhjfMx8rfAg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:05.523-04:00, 2020-06-01T13:52:05.523-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:05.625 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo) is posted (code: 204)
2017-06-152 13:52:05.626 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo']; FreshGoals: List()
2017-06-152 13:52:05.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 13:52:05.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:05.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:05.635 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 13:52:05.636 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 13:52:05.636 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:05.637 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:05.638 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
2017-06-152 13:52:05.638 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
2017-06-152 13:52:05.657 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:05.657 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:05.658 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:05.658 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 38 fetched (prebuffer 28): Token(W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4)
2017-06-152 13:52:05.658 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4): List()
2017-06-152 13:52:05.659 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 13:52:05.671 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4:
W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
D2sgA3srNaSga1U7dGxdlE74yNtz_vDVw2dQ0JvXvEpV6c6TYYtzXw-qa71T9UjUtNHu2tq4Mofb7jcFVX7PlO8uI0g6fTqH11cfHkj7_YB6qUgJK4HSogYFBbASrvkgPZeuy4M_9bXScL2YTjfv-UkLtIxB_-HK1XcAcPeCnzxeQHymo3ALZMEFkq69GsHa0Q3dqSDpXNfXVzJE-COSMkx3ZQyecZYnrbpSPCLgzf98Swb6B1v0ayJr8SbZe1gZ8yCm1mzOVPAhVPgZmD_BX3_0Lzq-ErV3Cty4nnGr-s_Ap4BGQ6qCsO5E4utvjtia7pb2v-eFvSU3yT6yW0pG1g
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:05.660-04:00, 2020-06-01T13:52:05.660-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:05.671 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
2017-06-152 13:52:05.672 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
D2sgA3srNaSga1U7dGxdlE74yNtz_vDVw2dQ0JvXvEpV6c6TYYtzXw-qa71T9UjUtNHu2tq4Mofb7jcFVX7PlO8uI0g6fTqH11cfHkj7_YB6qUgJK4HSogYFBbASrvkgPZeuy4M_9bXScL2YTjfv-UkLtIxB_-HK1XcAcPeCnzxeQHymo3ALZMEFkq69GsHa0Q3dqSDpXNfXVzJE-COSMkx3ZQyecZYnrbpSPCLgzf98Swb6B1v0ayJr8SbZe1gZ8yCm1mzOVPAhVPgZmD_BX3_0Lzq-ErV3Cty4nnGr-s_Ap4BGQ6qCsO5E4utvjtia7pb2v-eFvSU3yT6yW0pG1g
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:05.660-04:00, 2020-06-01T13:52:05.660-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:05.723 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4) is posted (code: 204)
2017-06-152 13:52:05.724 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4']; FreshGoals: List()
2017-06-152 13:52:05.731 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)
2017-06-152 13:52:05.732 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.732 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.732 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:52:05.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:52:05.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')?)
2017-06-152 13:52:05.734 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); solution(goals.head): postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); FreshGoals: List(defpost(postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), [endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')]))
2017-06-152 13:52:05.735 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); solution(goals.head): endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:05.735 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:05.737 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.736-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Member -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 13:52:05.737 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.963-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 13:52:05.737 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 13:52:05.750 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
SXAhuswBqvbD1FZJapA8IVPHd6yoD600tlxJ7j6i332tPCHteOHekvc9Vmkq-hpxi3M4HPxcsYMPELYzzLz0KcNWs7YueK-ck7qWxIDDbTtdrXs78CCHbvMolT1rnw3gw4sVlkp-A_naIIUT05ifqevSTy8xcgmNEjS5k9N1X7v7uJfvN4cRxNAR1k-MUFfh2kVDqoCyZ9QF-8RQB1sPhQlUpPIVAD0Rn6Dlb6uDhV7lUV-VoUvDwmW6S7o2ADhoSc9ogRR0MFI_7U9rUaAZFHDpHN8NGBWE7qM3OjQgwph-RlTnefGaF4M89k5bqh1tN5feXiHq8brIZASCrfDGBw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:05.738-04:00, 2020-06-01T13:52:05.738-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
2017-06-152 13:52:05.750 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 13:52:05.750 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
SXAhuswBqvbD1FZJapA8IVPHd6yoD600tlxJ7j6i332tPCHteOHekvc9Vmkq-hpxi3M4HPxcsYMPELYzzLz0KcNWs7YueK-ck7qWxIDDbTtdrXs78CCHbvMolT1rnw3gw4sVlkp-A_naIIUT05ifqevSTy8xcgmNEjS5k9N1X7v7uJfvN4cRxNAR1k-MUFfh2kVDqoCyZ9QF-8RQB1sPhQlUpPIVAD0Rn6Dlb6uDhV7lUV-VoUvDwmW6S7o2ADhoSc9ogRR0MFI_7U9rUaAZFHDpHN8NGBWE7qM3OjQgwph-RlTnefGaF4M89k5bqh1tN5feXiHq8brIZASCrfDGBw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:05.738-04:00, 2020-06-01T13:52:05.738-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
2017-06-152 13:52:05.774 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 13:52:05.774 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), [endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 13:52:05.780 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 13:52:05.781 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.781 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.781 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:05.781 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:05.782 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 13:52:05.782 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 13:52:05.783 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:05.784 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:05.784 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.784-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:05.785 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.220-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),
links: ArrayBuffer(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:05.785 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 13:52:05.799 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4:
IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
RqNGavzyJlf3BpuUQtPCTCngFLRsQjyChwxRrnOluWV9yUpFQ_p10PMoQeCHI1hMudxVxTLA4rFPlEuDrcTdhMvvpSgeP8X7TaR-qjm9qAFqJKEe8f8klwtsGmZneHb68kzfGlbqZOSTQo9Y11RJ7FXchJpt_mluOPwmACPmxIeIhVtid-FRWfU1I3uo_ViihOCHRFbYRokws4ZECJC6aSAKuN5LHcPclaUReFDGOq00nvNh3NgR7VhzVQxHAKHwaNz20ng6Ww8Kq2g_cUNclymuqmiOySMMIlGO8nPlAUI8mt-aL7x-YrsFE6rCsUnAz15a_sRiytbnRGqrs8L__w
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:05.786-04:00, 2020-06-01T13:52:05.786-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:05.799 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
2017-06-152 13:52:05.799 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
RqNGavzyJlf3BpuUQtPCTCngFLRsQjyChwxRrnOluWV9yUpFQ_p10PMoQeCHI1hMudxVxTLA4rFPlEuDrcTdhMvvpSgeP8X7TaR-qjm9qAFqJKEe8f8klwtsGmZneHb68kzfGlbqZOSTQo9Y11RJ7FXchJpt_mluOPwmACPmxIeIhVtid-FRWfU1I3uo_ViihOCHRFbYRokws4ZECJC6aSAKuN5LHcPclaUReFDGOq00nvNh3NgR7VhzVQxHAKHwaNz20ng6Ww8Kq2g_cUNclymuqmiOySMMIlGO8nPlAUI8mt-aL7x-YrsFE6rCsUnAz15a_sRiytbnRGqrs8L__w
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:05.786-04:00, 2020-06-01T13:52:05.786-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:05.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4) is posted (code: 204)
2017-06-152 13:52:05.805 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4']; FreshGoals: List()
2017-06-152 13:52:05.810 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 13:52:05.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:05.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:52:05.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:52:05.811 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 13:52:05.812 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 13:52:05.813 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:05.813 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 13:52:05.814 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY) has expired from prefetching cache
2017-06-152 13:52:05.814 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) has expired from prefetching cache
2017-06-152 13:52:05.814 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM) has expired from prefetching cache
2017-06-152 13:52:05.814 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
2017-06-152 13:52:05.815 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
2017-06-152 13:52:05.927 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:05.927 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:05.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:05.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 39 fetched (prebuffer 26): Token(7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA)
2017-06-152 13:52:05.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA): List()
2017-06-152 13:52:05.929 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 13:52:05.941 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA:
7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
m7-mhVzEUDG-WveyTyO9TF3Bk5okY36BEgiJVn_M_ZMZJtGwWXFnCSc5zaoFcQh5aFsZZiT_ca2Q3b9-Tmv0AgV38tvr-eolSxUpBZzkEUZh8xWRjwQrByNwBADMSFxAuOgUJx8SkIr5sVmccdezGYh8-0QzygMfq0_C_ak3jNdGsBlbOAhDWDsloSXjxrpuFMNqd1TIlo9XVZRyq6xV_EdWEYM-AeXWtWO6HgtKTflDMA6pvQFJg-0xo2xjFaVFvHRCcvXmC4gRG9UNF92h_deKOFru5drfj6WjHdHrQFiMEMl1NF-AKpJF-tXPbgRVqCNKI7QCISiC_Gw4Ua4Ngw
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:52:05.929-04:00, 2020-06-01T13:52:05.929-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:05.941 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
2017-06-152 13:52:05.941 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
m7-mhVzEUDG-WveyTyO9TF3Bk5okY36BEgiJVn_M_ZMZJtGwWXFnCSc5zaoFcQh5aFsZZiT_ca2Q3b9-Tmv0AgV38tvr-eolSxUpBZzkEUZh8xWRjwQrByNwBADMSFxAuOgUJx8SkIr5sVmccdezGYh8-0QzygMfq0_C_ak3jNdGsBlbOAhDWDsloSXjxrpuFMNqd1TIlo9XVZRyq6xV_EdWEYM-AeXWtWO6HgtKTflDMA6pvQFJg-0xo2xjFaVFvHRCcvXmC4gRG9UNF92h_deKOFru5drfj6WjHdHrQFiMEMl1NF-AKpJF-tXPbgRVqCNKI7QCISiC_Gw4Ua4Ngw
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:52:05.929-04:00, 2020-06-01T13:52:05.929-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 13:52:06.085 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA) is posted (code: 204)
2017-06-152 13:52:06.086 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA']; FreshGoals: List()
2017-06-152 13:52:06.094 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)
2017-06-152 13:52:06.094 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.094 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.094 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 13:52:06.095 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 2
2017-06-152 13:52:06.095 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')?)
2017-06-152 13:52:06.096 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); solution(goals.head): postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); FreshGoals: List(defpost(postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), [endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')]))
2017-06-152 13:52:06.097 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); solution(goals.head): endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:06.097 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 13:52:06.098 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:06.098-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Member -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 13:52:06.098 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.963-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Member -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 13:52:06.099 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 13:52:06.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
Xz7pSxuWAM_-gZkE0oJqoIbOZEW5BDzNzom3Kjqs3g5wTsvXFYgVMivjbVBN_g4-tH3tc3opZySyGrzcJFZpUoOCUtll8AwjrMI7awUex9IUKqz-ni25Pc7tYokYnP6GKf2Ni97HJr1je-mNN6PMc8t6M69ck2nAHAWePVyHLMasuB1dY3u9t6WFU0XDdmzIqm3nxKAZk48JmuvmAmDomNNFo3UTzuGVlRdE6_wwai4reoRC0XbxjmtFK8YraUKwLFdZurBC41_37CPf9XlkoAF42dov34Y8Vnig6vwthgdg0UUkfFTs_G2bg3OwdNsCiCqd2wiq56IuRz20T4g5Jw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:06.100-04:00, 2020-06-01T13:52:06.100-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 13:52:06.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 13:52:06.110 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
Xz7pSxuWAM_-gZkE0oJqoIbOZEW5BDzNzom3Kjqs3g5wTsvXFYgVMivjbVBN_g4-tH3tc3opZySyGrzcJFZpUoOCUtll8AwjrMI7awUex9IUKqz-ni25Pc7tYokYnP6GKf2Ni97HJr1je-mNN6PMc8t6M69ck2nAHAWePVyHLMasuB1dY3u9t6WFU0XDdmzIqm3nxKAZk48JmuvmAmDomNNFo3UTzuGVlRdE6_wwai4reoRC0XbxjmtFK8YraUKwLFdZurBC41_37CPf9XlkoAF42dov34Y8Vnig6vwthgdg0UUkfFTs_G2bg3OwdNsCiCqd2wiq56IuRz20T4g5Jw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T13:52:06.100-04:00, 2020-06-01T13:52:06.100-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 13:52:06.149 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 13:52:06.150 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), [endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 13:52:06.158 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 13:52:06.158 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.158 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.158 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:52:06.158 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:52:06.159 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 13:52:06.159 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 13:52:06.160 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:06.161 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 13:52:06.162 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:06.161-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:06.162 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:57.797-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: ArrayBuffer(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 13:52:06.162 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 13:52:06.173 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4:
xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
Q5D3h4LGyefYjc64PS_45WFvc6VhhKstBVYzAzh4WSGeFg6LvPkhqkvA2YxgZ0FdX3FxOribH9q8Qx0FSSCI-Fc50qb-nB5_arU2WNn8erttk30UPiAXzmnsUe71eTvN2NjjluZrmlrlhwZdDyNhL-uQRS6uyBGbg24Xim8rs8cE1Tv8xEWcgrsdUmCoqQJ2yygLh86Z2NEtvnV7pKG_C620PWyvJJSz5P8T3RFWXvqmYUHPxZVW76SoI6XIIAVVOs-imd4W4VIXpc7XAWOx_IYrqC9jLyMG_sYQenViVyKWRNC-L6isNS-zkGr4tm7rQaWryoh6_QgwlwPnPU_LVA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:52:06.163-04:00, 2020-06-01T13:52:06.163-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:06.173 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
2017-06-152 13:52:06.173 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
Q5D3h4LGyefYjc64PS_45WFvc6VhhKstBVYzAzh4WSGeFg6LvPkhqkvA2YxgZ0FdX3FxOribH9q8Qx0FSSCI-Fc50qb-nB5_arU2WNn8erttk30UPiAXzmnsUe71eTvN2NjjluZrmlrlhwZdDyNhL-uQRS6uyBGbg24Xim8rs8cE1Tv8xEWcgrsdUmCoqQJ2yygLh86Z2NEtvnV7pKG_C620PWyvJJSz5P8T3RFWXvqmYUHPxZVW76SoI6XIIAVVOs-imd4W4VIXpc7XAWOx_IYrqC9jLyMG_sYQenViVyKWRNC-L6isNS-zkGr4tm7rQaWryoh6_QgwlwPnPU_LVA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:52:06.163-04:00, 2020-06-01T13:52:06.163-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 13:52:06.215 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4) is posted (code: 204)
2017-06-152 13:52:06.216 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4']; FreshGoals: List()
2017-06-152 13:52:06.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.1.1/16")
2017-06-152 13:52:06.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postMakeIPTokenSet(ipv4"192.168.1.1/16")? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:06.225 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:06.225 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postMakeIPTokenSet(ipv4"192.168.1.1/16")?)
2017-06-152 13:52:06.226 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postMakeIPTokenSet(ipv4"192.168.1.1/16"); solution(goals.head): postMakeIPTokenSet(ipv4"192.168.1.1/16"); FreshGoals: List(defpost(postMakeIPTokenSet(ipv4"192.168.1.1/16"), [makeIPTokenSet(ipv4"192.168.1.1/16")]))
2017-06-152 13:52:06.227 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeIPTokenSet(ipv4"192.168.1.1/16"); solution(goals.head): makeIPTokenSet(ipv4"192.168.1.1/16"); FreshGoals: List(defcon(makeIPTokenSet(ipv4"192.168.1.1/16"), SetTerm(id = StrLit(1qYgFO6dPALxvX7FzW0Aqg); argRefs = StrLit($DlgPrefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ipv4"192.168.1.1/16",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_1102735632,(,_1273557860,))))), Map($DlgPrefix -> _1102735632, $SetVersion -> _1273557860)))),None)))
2017-06-152 13:52:06.228 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 13:52:06.229 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 13:52:06.376 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:06.377 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:06.377 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:06.378 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 40 fetched (prebuffer 27): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:06.378 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 13:52:06.378 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeIPTokenSet(ipv4"192.168.1.1/16"), SetTerm(id = StrLit(1qYgFO6dPALxvX7FzW0Aqg); argRefs = StrLit($DlgPrefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ipv4"192.168.1.1/16",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_1102735632,(,_1273557860,))))), Map($DlgPrefix -> _1102735632, $SetVersion -> _1273557860)))),None)); solution(goals.head): defcon(makeIPTokenSet(ipv4"192.168.1.1/16"), SetTerm(id = StrLit(1qYgFO6dPALxvX7FzW0Aqg); argRefs = StrLit($DlgPrefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ipv4"192.168.1.1/16",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_1102735632,(,_1273557860,))))), Map($DlgPrefix -> _1102735632, $SetVersion -> _1273557860)))),None)); FreshGoals: List()
2017-06-152 13:52:06.391 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8:
p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
QV7Ba4cddW6w4f0zctjr_Q1IzcikY_i2BHQ1PwCf_wWirlY9Km0NhoFd0RNncUCJJQ9DjTFDBFEInSPsu7syaEKRvSLwRZtXqdDg6BUHoOk4a4wZNFud5sjB8kjgqBT6YxzEgM0pFYhmWJK0NmbwHTn1_Rb-VaZwFyiUceW-f8JswW9_CUYw9hc0X_qDW4UzXD8fAdp6CQgd6kNp6m6aVb9ly8M7E6Nw5beTsLzb6_-Xk4FnvU91jrMXZA29_dgU43WHvpYC3M4h1KkguMgGRXOKefSLSVqXh3is9hhxhA35MA5QoWRCLjsGUuwfz2hyFuhhVLHZEXDJuCADLiGU8w
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:06.379-04:00, 2020-06-01T13:52:06.379-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.1.1/16"(set29)


2017-06-152 13:52:06.391 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 13:52:06.392 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
QV7Ba4cddW6w4f0zctjr_Q1IzcikY_i2BHQ1PwCf_wWirlY9Km0NhoFd0RNncUCJJQ9DjTFDBFEInSPsu7syaEKRvSLwRZtXqdDg6BUHoOk4a4wZNFud5sjB8kjgqBT6YxzEgM0pFYhmWJK0NmbwHTn1_Rb-VaZwFyiUceW-f8JswW9_CUYw9hc0X_qDW4UzXD8fAdp6CQgd6kNp6m6aVb9ly8M7E6Nw5beTsLzb6_-Xk4FnvU91jrMXZA29_dgU43WHvpYC3M4h1KkguMgGRXOKefSLSVqXh3is9hhxhA35MA5QoWRCLjsGUuwfz2hyFuhhVLHZEXDJuCADLiGU8w
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:06.379-04:00, 2020-06-01T13:52:06.379-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.1.1/16"(set29)


2017-06-152 13:52:06.417 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) is posted (code: 204)
2017-06-152 13:52:06.418 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postMakeIPTokenSet(ipv4"192.168.1.1/16"), [makeIPTokenSet(ipv4"192.168.1.1/16")]); solution(goals.head): ['p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8']; FreshGoals: List()
2017-06-152 13:52:06.425 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")
2017-06-152 13:52:06.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:06.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:06.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")?)
2017-06-152 13:52:06.428 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); solution(goals.head): postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(defpost(postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), [ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")]))
2017-06-152 13:52:06.430 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); solution(goals.head): ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"), defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?IPSetToken_1,'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 13:52:06.431 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DlgPrefix($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.1.1/16"(set29)'; FreshGoals: List()
2017-06-152 13:52:06.431 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8'; FreshGoals: List()
2017-06-152 13:52:06.432 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8' := label("Token for IP allocation/?DlgPrefix($SetVersion)"); FreshGoals: List(defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 13:52:06.433 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw) has expired from prefetching cache
2017-06-152 13:52:06.433 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 13:52:06.433 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 13:52:06.461 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:06.461 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:06.462 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:06.462 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 41 fetched (prebuffer 27): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:06.462 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:06.462 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:06.463 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); solution(goals.head): defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); FreshGoals: List()
2017-06-152 13:52:06.473 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q:
CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
MVrBH4iF8fJnDznikKgH4G7V4cANKR4sINjyRlaPThxGWy0O-B2a7N6O6cSRjo_Nh_Z0JYjrkmunehH0-GZmAZhCYspa9v7gPCPVNL3HDO8P6H2DJcOvvgvWM9lSM4uX-4I2AzLWb8xHAmIx_V4mICYdkYZcQRNoe803kms9XdIXVnsCDxhG3e0OkGkNeROxYBvXeTn8wJSicZlgcrZDTxv9BRY9k_IGET66klhuMfOY0krb3ptWaVY9Dl_cn-XuVSHmh3nEVJQjx2eGXSnBqFBRL64qh2SfvDkeGXw01yB2Hq8-VJzYbnsgWoYbh5ZJxY7sS4IrfXyl3sA68JMWdg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:06.464-04:00, 2020-06-01T13:52:06.464-04:00, PT720H
SHA256withRSA
IP allocation/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8(set29)

allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 13:52:06.473 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 13:52:06.474 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
MVrBH4iF8fJnDznikKgH4G7V4cANKR4sINjyRlaPThxGWy0O-B2a7N6O6cSRjo_Nh_Z0JYjrkmunehH0-GZmAZhCYspa9v7gPCPVNL3HDO8P6H2DJcOvvgvWM9lSM4uX-4I2AzLWb8xHAmIx_V4mICYdkYZcQRNoe803kms9XdIXVnsCDxhG3e0OkGkNeROxYBvXeTn8wJSicZlgcrZDTxv9BRY9k_IGET66klhuMfOY0krb3ptWaVY9Dl_cn-XuVSHmh3nEVJQjx2eGXSnBqFBRL64qh2SfvDkeGXw01yB2Hq8-VJzYbnsgWoYbh5ZJxY7sS4IrfXyl3sA68JMWdg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:06.464-04:00, 2020-06-01T13:52:06.464-04:00, PT720H
SHA256withRSA
IP allocation/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8(set29)

allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 13:52:06.626 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) is posted (code: 204)
2017-06-152 13:52:06.627 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), [ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")]); solution(goals.head): ['CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q']; FreshGoals: List()
2017-06-152 13:52:06.635 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, ipv4"192.168.19.2/24")
2017-06-152 13:52:06.635 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.635 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.635 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:06.636 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:06.636 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")?)
2017-06-152 13:52:06.637 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); solution(goals.head): postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); FreshGoals: List(defpost(postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), [addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")]))
2017-06-152 13:52:06.639 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); solution(goals.head): addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); FreshGoals: List(spec('link a token for allocated IP range'), defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 13:52:06.639 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for allocated IP range'); solution(goals.head): spec('link a token for allocated IP range'); FreshGoals: List(defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 13:52:06.641 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ) has expired from prefetching cache
2017-06-152 13:52:06.641 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) has expired from prefetching cache
2017-06-152 13:52:06.641 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:52:06.642 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:52:06.662 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:06.662 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:06.663 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:06.663 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 42 fetched (prebuffer 26): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:52:06.663 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:06.663 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:06.664 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); solution(goals.head): defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); FreshGoals: List()
2017-06-152 13:52:06.675 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4:
nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
E-qc7LCyH7N-0Eaj-Hzy1k2Q3Fwntxj2cJTbzevZzQ7v3ZvAzIJqhT2rPUgEXokTtnTZbXCqe71NHgfpa5L0WXxrIal8A1TTTC9COIXSDxAoQRC0JjwCc_WIBgba3iyrqdPLhh2HorQaDHDy_ZSkpAyRhhyGLbnStABR3nI_-QaEqHzS1eN_v38K1-FR12yTzJR6hN_lBRToNpUWMEX43LkpghzCR3dOlrRacoC_YpclLht01mBE9R2refsVD7QkRMMLwOp1cxt1UJbB9yv-wNL70vF27mAhnKvY4cLjKv0DS5BU5gHBwLzwjaZ-A5kGeaip9X-Zw2NhF3NkOjtPqw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:06.665-04:00, 2020-06-01T13:52:06.665-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.19.2/24"(set29)

link('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q').
2017-06-152 13:52:06.675 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:52:06.675 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
E-qc7LCyH7N-0Eaj-Hzy1k2Q3Fwntxj2cJTbzevZzQ7v3ZvAzIJqhT2rPUgEXokTtnTZbXCqe71NHgfpa5L0WXxrIal8A1TTTC9COIXSDxAoQRC0JjwCc_WIBgba3iyrqdPLhh2HorQaDHDy_ZSkpAyRhhyGLbnStABR3nI_-QaEqHzS1eN_v38K1-FR12yTzJR6hN_lBRToNpUWMEX43LkpghzCR3dOlrRacoC_YpclLht01mBE9R2refsVD7QkRMMLwOp1cxt1UJbB9yv-wNL70vF27mAhnKvY4cLjKv0DS5BU5gHBwLzwjaZ-A5kGeaip9X-Zw2NhF3NkOjtPqw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:06.665-04:00, 2020-06-01T13:52:06.665-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.19.2/24"(set29)

link('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q').
2017-06-152 13:52:06.721 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) is posted (code: 204)
2017-06-152 13:52:06.721 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), [addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")]); solution(goals.head): ['nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4']; FreshGoals: List()
2017-06-152 13:52:06.728 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")
2017-06-152 13:52:06.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 13:52:06.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 2
2017-06-152 13:52:06.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")?)
2017-06-152 13:52:06.731 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); solution(goals.head): postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(defpost(postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), [ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")]))
2017-06-152 13:52:06.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); solution(goals.head): ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"), defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?IPSetToken_1,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 13:52:06.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DlgPrefix($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.1.1/16"(set29)'; FreshGoals: List()
2017-06-152 13:52:06.733 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8'; FreshGoals: List()
2017-06-152 13:52:06.734 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8' := label("Token for IP allocation/?DlgPrefix($SetVersion)"); FreshGoals: List(defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 13:52:06.735 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
2017-06-152 13:52:06.735 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
2017-06-152 13:52:06.834 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:06.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:06.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:06.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 43 fetched (prebuffer 27): Token(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)
2017-06-152 13:52:06.836 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:06.836 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:06.837 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); solution(goals.head): defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); FreshGoals: List()
2017-06-152 13:52:06.850 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI:
X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
nNMa4z_BLKnA1ggsTaf3Q7LMjpQn9EEV1FDqNVFQdj5CLmz7FOXYpffnSg-g-tnbhAhQyLzBlqqDm8ppAo_9Y2jliBlVbC-jSQZ-tRnALgYsy5if5cMm5a0xcBgKKIEGSq1T3rjL9z8XiQZQVC4NUKJ0lMUJE2E6r2nfhJGLxIJ-w6YjBep_7Te9zvUHIc8lRvCZPC5QG2I2JzB-jrxmuGZFMMuI1wcYnvRfWIC-fWKIlSv3QurqYO8hDCAvn1XpktvoRIFYHh3a8bpDNPJJFkrR4R_2xQp5Vw_qGmt-fknlTsOlxNtJRN402-8DfnYU3cAcu4NZszk5Eeb17yuP_w
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:06.838-04:00, 2020-06-01T13:52:06.838-04:00, PT720H
SHA256withRSA
IP allocation/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8(set29)

allocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 13:52:06.850 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
2017-06-152 13:52:06.850 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
nNMa4z_BLKnA1ggsTaf3Q7LMjpQn9EEV1FDqNVFQdj5CLmz7FOXYpffnSg-g-tnbhAhQyLzBlqqDm8ppAo_9Y2jliBlVbC-jSQZ-tRnALgYsy5if5cMm5a0xcBgKKIEGSq1T3rjL9z8XiQZQVC4NUKJ0lMUJE2E6r2nfhJGLxIJ-w6YjBep_7Te9zvUHIc8lRvCZPC5QG2I2JzB-jrxmuGZFMMuI1wcYnvRfWIC-fWKIlSv3QurqYO8hDCAvn1XpktvoRIFYHh3a8bpDNPJJFkrR4R_2xQp5Vw_qGmt-fknlTsOlxNtJRN402-8DfnYU3cAcu4NZszk5Eeb17yuP_w
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T13:52:06.838-04:00, 2020-06-01T13:52:06.838-04:00, PT720H
SHA256withRSA
IP allocation/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8(set29)

allocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 13:52:06.952 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI) is posted (code: 204)
2017-06-152 13:52:06.953 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), [ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")]); solution(goals.head): ['X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI']; FreshGoals: List()
2017-06-152 13:52:06.961 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI, ipv4"192.168.36.2/24")
2017-06-152 13:52:06.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:06.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 13:52:06.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 2
2017-06-152 13:52:06.963 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")?)
2017-06-152 13:52:06.964 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); solution(goals.head): postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); FreshGoals: List(defpost(postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), [addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")]))
2017-06-152 13:52:06.966 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); solution(goals.head): addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); FreshGoals: List(spec('link a token for allocated IP range'), defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 13:52:06.966 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for allocated IP range'); solution(goals.head): spec('link a token for allocated IP range'); FreshGoals: List(defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 13:52:06.968 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
2017-06-152 13:52:06.968 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
2017-06-152 13:52:07.099 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:07.100 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:07.100 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:07.100 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 44 fetched (prebuffer 28): Token(8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc)
2017-06-152 13:52:07.101 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc): ArrayBuffer(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)
2017-06-152 13:52:07.101 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)
2017-06-152 13:52:07.101 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); solution(goals.head): defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); FreshGoals: List()
2017-06-152 13:52:07.116 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc:
8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
IOVEPf4FCQ_NBcNBAZQxnQKh1LMJYZVDYkm8ARC2QAPAXIpzhbzHXpdPMOs0kzteLw0CGMVQ8Ji33nJfRG9hlsObyQtRfbI5PbGGLo2Wm8PhVtaliJpyw3zHbkbVan3V9-k_fZieLFaP4n7Lkaj2dyASfGK140W8KUnY4QlDyPXgIfh9qmTVJazCj5_r5EIOxgkZCykUcIRhgFlwb4N8XagfjOgpKX4lHgYNp80VsKow8e3V65U3CnqoZARO4zv4FMGsj-w0nrvoo5pwbVMd1xK50F8vcFW_-6bNV1btsZhFCmL8YXqGehcwKvPRKcVh58QcW1FoVIUwsyPtyuICJQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:07.102-04:00, 2020-06-01T13:52:07.102-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.36.2/24"(set29)

link('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI').
2017-06-152 13:52:07.116 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
2017-06-152 13:52:07.116 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
IOVEPf4FCQ_NBcNBAZQxnQKh1LMJYZVDYkm8ARC2QAPAXIpzhbzHXpdPMOs0kzteLw0CGMVQ8Ji33nJfRG9hlsObyQtRfbI5PbGGLo2Wm8PhVtaliJpyw3zHbkbVan3V9-k_fZieLFaP4n7Lkaj2dyASfGK140W8KUnY4QlDyPXgIfh9qmTVJazCj5_r5EIOxgkZCykUcIRhgFlwb4N8XagfjOgpKX4lHgYNp80VsKow8e3V65U3CnqoZARO4zv4FMGsj-w0nrvoo5pwbVMd1xK50F8vcFW_-6bNV1btsZhFCmL8YXqGehcwKvPRKcVh58QcW1FoVIUwsyPtyuICJQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T13:52:07.102-04:00, 2020-06-01T13:52:07.102-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.36.2/24"(set29)

link('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI').
2017-06-152 13:52:07.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc) is posted (code: 204)
2017-06-152 13:52:07.140 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), [addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")]); solution(goals.head): ['8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc']; FreshGoals: List()
2017-06-152 13:52:39.310 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 1)
2017-06-152 13:52:39.311 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.311 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.311 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:39.312 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 2
2017-06-152 13:52:39.312 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')?)
2017-06-152 13:52:39.314 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(defpost(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]))
2017-06-152 13:52:39.316 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"), defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 13:52:39.317 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DstIP($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.19.2/24"(set29)'; FreshGoals: List()
2017-06-152 13:52:39.317 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4'; FreshGoals: List()
2017-06-152 13:52:39.318 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4' := label("Token for IP allocation/?DstIP($SetVersion)"); FreshGoals: List(defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 13:52:39.319 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.319-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 13:52:39.320 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.422-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 13:52:39.321 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); solution(goals.head): defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); FreshGoals: List()
2017-06-152 13:52:39.334 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8:
2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
bL2lFA3zvRlV9Y3XZyMjXMf_mKGAfL1BWfC0n5fg2dULr6ZMGsQglMsHPEpF_dkAtmK0mc4Ck-0Eiq4F2AJJS8E2A_5EbtvoXieIMpeLz5WcgkjQbSjH2OR3k_IB_QeDScDVbZaF9QVtfFiFYJYJQve-3atoTuDlqJOX-kT-VQtgM191hzz6KPdUopW1-RGAsh5NAUq34qkU42ijm-otCCmn1JAT6b7VS945rZ5sbCSdp5SiueASBptd-6FcTIy-v76tTWMpQFqoHlUVU15QBnigIhYXaEl-wiz6E-6qHxJWQHdaVUSKiFGGzEd5uBW3u9cWb8sQo5YXiIuK-h7k-w
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:39.322-04:00, 2020-06-01T13:52:39.322-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 13:52:39.334 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:52:39.334 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
bL2lFA3zvRlV9Y3XZyMjXMf_mKGAfL1BWfC0n5fg2dULr6ZMGsQglMsHPEpF_dkAtmK0mc4Ck-0Eiq4F2AJJS8E2A_5EbtvoXieIMpeLz5WcgkjQbSjH2OR3k_IB_QeDScDVbZaF9QVtfFiFYJYJQve-3atoTuDlqJOX-kT-VQtgM191hzz6KPdUopW1-RGAsh5NAUq34qkU42ijm-otCCmn1JAT6b7VS945rZ5sbCSdp5SiueASBptd-6FcTIy-v76tTWMpQFqoHlUVU15QBnigIhYXaEl-wiz6E-6qHxJWQHdaVUSKiFGGzEd5uBW3u9cWb8sQo5YXiIuK-h7k-w
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T13:52:39.322-04:00, 2020-06-01T13:52:39.322-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 13:52:39.363 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) is posted (code: 204)
2017-06-152 13:52:39.364 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]); solution(goals.head): ['2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8']; FreshGoals: List()
2017-06-152 13:52:39.376 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 13:52:39.376 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.376 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.377 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:39.377 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:39.377 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 13:52:39.379 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 13:52:39.381 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 13:52:39.381 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 13:52:39.382 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.382-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 13:52:39.382 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.982-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 13:52:39.383 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 13:52:39.395 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw:
Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
nTdqUfEpcNKJXDcoyGaoA9LqIHxhjgf4KTc1PB4p6MePtqf8y7W_YNPx5Rxg0WufhbEfWxdhZclPcsJQXTCboPUkgTJI3nemZ4RdhTG2ZxO88LEhNe57LXzdlKiJbeI7-qq5kk2NYJJ-3oxYFSyg7SB6vjDO73UxIvR5Wl_wR8crXLIfXJrgOuzSZTXvv_gu5bI2gUsWs9NCf20eb3X0S4oE1KA0naOzDocvahFY_YSDdId70vb8TIQCxeLBY18YwRZ1rdfEWXciRa-aCIyrT4uaZiFzqVjlPg88AT_Frpr5pdX4tyyhq1lpRhWDcw-U9GQ1bluNTKaDoxQY5dh2IA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:39.384-04:00, 2020-06-01T13:52:39.384-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 13:52:39.395 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:52:39.395 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
nTdqUfEpcNKJXDcoyGaoA9LqIHxhjgf4KTc1PB4p6MePtqf8y7W_YNPx5Rxg0WufhbEfWxdhZclPcsJQXTCboPUkgTJI3nemZ4RdhTG2ZxO88LEhNe57LXzdlKiJbeI7-qq5kk2NYJJ-3oxYFSyg7SB6vjDO73UxIvR5Wl_wR8crXLIfXJrgOuzSZTXvv_gu5bI2gUsWs9NCf20eb3X0S4oE1KA0naOzDocvahFY_YSDdId70vb8TIQCxeLBY18YwRZ1rdfEWXciRa-aCIyrT4uaZiFzqVjlPg88AT_Frpr5pdX4tyyhq1lpRhWDcw-U9GQ1bluNTKaDoxQY5dh2IA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:39.384-04:00, 2020-06-01T13:52:39.384-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 13:52:39.467 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) is posted (code: 204)
2017-06-152 13:52:39.468 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw']; FreshGoals: List()
2017-06-152 13:52:39.477 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 13:52:39.478 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.478 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.478 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:39.478 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:39.479 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 13:52:39.482 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:39.483 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:52:39.483 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg'; FreshGoals: List()
2017-06-152 13:52:39.484 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg',?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:39.484 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 13:52:39.484 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 13:52:39.485 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:39.486 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:52:39.486 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg'; FreshGoals: List()
2017-06-152 13:52:39.487 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:39.489 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:52:39.489 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:51:45.809-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:51:45.840-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:51:45.861-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Map(),Set()))
2017-06-152 13:52:39.492 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:52:39.493 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:39.493 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:52:39.493 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:52:39.493 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: 
2017-06-152 13:52:39.494 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:52:39.494 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:51:45.809-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:51:45.840-04:00),Set(),Map(),Map(),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:51:45.861-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Map(),Set()))
2017-06-152 13:52:39.494 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 13:52:39.495 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) has expired from prefetching cache
2017-06-152 13:52:39.495 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4) has expired from prefetching cache
2017-06-152 13:52:39.495 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 45 fetched (prebuffer 27): Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg)
2017-06-152 13:52:39.495 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg): List()
2017-06-152 13:52:39.496 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 13:52:39.496 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) has expired from prefetching cache
2017-06-152 13:52:39.496 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 46 fetched (prebuffer 27): Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg)
2017-06-152 13:52:39.497 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg): List()
2017-06-152 13:52:39.497 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:52:39.497 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) has expired from prefetching cache
2017-06-152 13:52:39.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 47 fetched (prebuffer 27): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:52:39.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:52:39.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:52:39.498 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:52:39.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 13:52:39.498 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) has expired from prefetching cache
2017-06-152 13:52:39.499 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 48 fetched (prebuffer 26): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:52:39.499 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:52:39.499 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:52:39.499 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:52:39.499 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4) has expired from prefetching cache
2017-06-152 13:52:39.499 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY) has expired from prefetching cache
2017-06-152 13:52:39.499 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) has expired from prefetching cache
2017-06-152 13:52:39.500 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 49 fetched (prebuffer 24): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:52:39.500 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:39.500 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 13:52:39.500 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:39.501 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM) has expired from prefetching cache
2017-06-152 13:52:39.501 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) has expired from prefetching cache
2017-06-152 13:52:39.501 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 50 fetched (prebuffer 23): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:39.501 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:39.501 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:39.501 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 13:52:39.502 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc) has expired from prefetching cache
2017-06-152 13:52:39.502 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U) has expired from prefetching cache
2017-06-152 13:52:39.502 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) has expired from prefetching cache
2017-06-152 13:52:39.502 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 51 fetched (prebuffer 21): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:39.502 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 13:52:39.503 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:52:39.504 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:52:40.496-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:52:40.497-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:52:40.503-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 13:52:39.504 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:52:40.496-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:52:40.497-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:52:40.503-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:52:39.507 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:52:39.508 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:39.509 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:39.509 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218)), 

2017-06-152 13:52:39.509 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_1597081222,_2624394692)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_358242722,_3595867096,_2624394692,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1597081222,_3595867096)), 

2017-06-152 13:52:39.510 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_358242722,_3595867096,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3595867096)))
2017-06-152 13:52:39.510 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_358242722,_3595867096,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3595867096)), 

2017-06-152 13:52:39.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 13:52:39.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_937757854,_1146983400,_1344004682,_261350134)), :(_937757854,advertise(_1146983400,_1344004682,_261350134)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_937757854,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1146983400,_286113382)), 

2017-06-152 13:52:39.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_358242722,advertise(_3595867096,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_358242722,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3595867096,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3595867096)))
2017-06-152 13:52:39.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_358242722,advertise(_3595867096,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_358242722,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3595867096,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3595867096)), 

2017-06-152 13:52:39.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:52:39.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:52:39.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_358242722; that.getClass=class prolog.terms.Var
2017-06-152 13:52:39.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_358242722; that.getClass=class prolog.terms.Var
2017-06-152 13:52:39.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3595867096; that.getClass=class prolog.terms.Var
2017-06-152 13:52:39.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3595867096; that.getClass=class prolog.terms.Var
2017-06-152 13:52:39.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:39.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:39.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086)), 

2017-06-152 13:52:39.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3093802364,_937501064)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3093802364,_937501064)), 

2017-06-152 13:52:39.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:39.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_286113382)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:39.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 13:52:39.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 13:52:39.515 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_286113382; that.getClass=class prolog.terms.Var
2017-06-152 13:52:39.515 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_286113382; that.getClass=class prolog.terms.Var
2017-06-152 13:52:39.515 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:39.517 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |   answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:39.519 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 13:52:39.532 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 13:52:39.533 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.533 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.533 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:52:39.533 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 2
2017-06-152 13:52:39.533 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 13:52:39.535 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postAdvertise(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 13:52:39.538 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 13:52:39.538 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 13:52:39.539 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 13:52:39.539 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 13:52:39.540 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 13:52:39.541 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 13:52:39.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:39.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:39.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:39.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 52 fetched (prebuffer 22): Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:52:39.575 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ): ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:52:39.575 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:52:39.575 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 13:52:39.584 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ:
OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
RNPkyYotf4HLHI_tZQ03sd1ADTszRRzUA-c_0In7LXA3w-e1iUW7nEvQ7hXbyCggNNHqtahpGn3-DeETPDwoutGw9BrKajgc7QVpKkVc6rtbe-Pu3OiJhQmbWX-1UQMEY9UJyekkKDGjN35yYJVzuub4Sa8Z1QVBQzXlx979YDDy9PWeWzRGAxPXilZiFqqMr2xReOBpV8pITgKx--u5eFVC_9kBL1fsb4v9vU78_Hhw4FbBaLBAGSoRZubVscsoe-FMJD6Rfnrzsld1tntwc1GEIDCEGKmR1wtTlfmuNjjkCC6LzYpWBzkbLkEUOPtopZWfJwyNC5w614szQBp1yA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:39.576-04:00, 2020-06-01T13:52:39.576-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 13:52:39.584 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 13:52:39.584 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
RNPkyYotf4HLHI_tZQ03sd1ADTszRRzUA-c_0In7LXA3w-e1iUW7nEvQ7hXbyCggNNHqtahpGn3-DeETPDwoutGw9BrKajgc7QVpKkVc6rtbe-Pu3OiJhQmbWX-1UQMEY9UJyekkKDGjN35yYJVzuub4Sa8Z1QVBQzXlx979YDDy9PWeWzRGAxPXilZiFqqMr2xReOBpV8pITgKx--u5eFVC_9kBL1fsb4v9vU78_Hhw4FbBaLBAGSoRZubVscsoe-FMJD6Rfnrzsld1tntwc1GEIDCEGKmR1wtTlfmuNjjkCC6LzYpWBzkbLkEUOPtopZWfJwyNC5w614szQBp1yA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T13:52:39.576-04:00, 2020-06-01T13:52:39.576-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 13:52:39.688 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) is posted (code: 204)
2017-06-152 13:52:39.689 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ']; FreshGoals: List()
2017-06-152 13:52:39.768 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 13:52:39.768 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.769 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:39.769 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:52:39.769 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:52:39.769 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 13:52:39.770 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]))
2017-06-152 13:52:39.771 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 13:52:39.771 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 13:52:39.772 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY) has expired from prefetching cache
2017-06-152 13:52:39.772 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo) has expired from prefetching cache
2017-06-152 13:52:39.773 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 13:52:39.773 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 13:52:40.177 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:52:40.177 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:52:40.178 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:52:40.178 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 53 fetched (prebuffer 21): Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 13:52:40.178 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs): ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:52:40.179 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:52:40.179 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 13:52:40.193 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs:
piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
HpysxZ2ByGmETq1Pu0pnRQyAup9AS7e7pyH8UtYrYN_NqvjnCdHe2liDaZRuzxfq5cLpKj3EDmmQVp6GAHsgACzAnGcDR5DzjnFF8SUXDYmG5SAW9bD5GjmbqeUa5PBBQfYq4PVtA8csCEW8u2edPCXPYD6gdKpMkIBlDe5QtfvOJRez4dxgyjo5l787re0QM07L7c7YVuaG-AjBENoRcmN-ZPfRcmughv7LXurCAgLUFePKMxYac6BOGJj_RR9kzRlVTRkWnFnY35UPZLUNdBtAjIbJaFY0cK8PVyjRraWcAJz8KaMEITOgJmdt3Nsj_OY6fSsp1ak3MpmSGP_mfw
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:52:40.180-04:00, 2020-06-01T13:52:40.180-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 13:52:40.193 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 13:52:40.194 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
HpysxZ2ByGmETq1Pu0pnRQyAup9AS7e7pyH8UtYrYN_NqvjnCdHe2liDaZRuzxfq5cLpKj3EDmmQVp6GAHsgACzAnGcDR5DzjnFF8SUXDYmG5SAW9bD5GjmbqeUa5PBBQfYq4PVtA8csCEW8u2edPCXPYD6gdKpMkIBlDe5QtfvOJRez4dxgyjo5l787re0QM07L7c7YVuaG-AjBENoRcmN-ZPfRcmughv7LXurCAgLUFePKMxYac6BOGJj_RR9kzRlVTRkWnFnY35UPZLUNdBtAjIbJaFY0cK8PVyjRraWcAJz8KaMEITOgJmdt3Nsj_OY6fSsp1ak3MpmSGP_mfw
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T13:52:40.180-04:00, 2020-06-01T13:52:40.180-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 13:52:40.423 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) is posted (code: 204)
2017-06-152 13:52:40.424 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]); solution(goals.head): ['piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs']; FreshGoals: List()
2017-06-152 13:52:40.461 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 13:52:40.462 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:40.462 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:52:40.462 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:52:40.462 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 2
2017-06-152 13:52:40.463 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 13:52:40.466 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:40.467 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:52:40.467 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 13:52:40.468 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:40.469 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 13:52:40.469 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 13:52:40.470 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:40.470 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:52:40.471 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 13:52:40.471 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:52:40.474 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:52:40.474 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,None,Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,None,Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,None,Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:52:40.476 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:52:40.477 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:40.477 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:40.477 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:52:40.478 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_2428519370,_3246296620)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3640563432,_3378910798,_3246296620,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2428519370,_3378910798)), 

2017-06-152 13:52:40.478 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3640563432,_3378910798,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3378910798)))
2017-06-152 13:52:40.479 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3640563432,_3378910798,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3378910798)), 

2017-06-152 13:52:40.479 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:52:40.479 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1512759994,_1863321660,_1115003616,_3143106694)), :(_1512759994,advertise(_1863321660,_1115003616,_3143106694)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1512759994,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1863321660,_3077192292)), 

2017-06-152 13:52:40.480 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_3640563432,advertise(_3378910798,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3640563432,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3378910798,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3378910798)))
2017-06-152 13:52:40.480 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_3640563432,advertise(_3378910798,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3640563432,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3378910798,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3378910798)), 

2017-06-152 13:52:40.480 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:52:40.481 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:52:40.481 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3640563432; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.481 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3640563432; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.482 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3378910798; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.482 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3378910798; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.482 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:40.482 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:40.483 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 13:52:40.483 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1490326876,_3063457340)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1490326876,_3063457340)), 

2017-06-152 13:52:40.483 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:40.484 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:40.484 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 13:52:40.484 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3435125848,_736118448)), :(_3613542628,allocate(_3435125848,_736118448)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3613542628,_2763570546)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_736118448,_2763570546)), 

2017-06-152 13:52:40.485 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_3613542628,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3613542628,_2763570546)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3077192292,_2763570546)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:40.485 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3077192292)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:40.485 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:52:40.486 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:52:40.486 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3640563432; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.486 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3640563432; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.487 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3378910798; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.487 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3378910798; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.487 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:40.488 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:40.488 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 13:52:40.488 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3640563432,_3378910798,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3378910798)), 

2017-06-152 13:52:40.488 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:52:40.489 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2530732192,_3190548748,_2060161860,_452584002)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_860011348|_3535828920]=_2060161860), :(_2530732192,advertise(_3190548748,_2060161860,_452584002)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_4105678614,_562661424,_3535828920,_2530732192)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3190548748,_562661424)), 

2017-06-152 13:52:40.489 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_860011348|_3535828920]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_3640563432,advertise(_3378910798,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_4105678614,_562661424,_3535828920,_3640563432)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3378910798,_562661424)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3378910798)))
2017-06-152 13:52:40.489 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_860011348|_3535828920]; that.getClass=class prolog.terms.Cons
2017-06-152 13:52:40.489 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_860011348|_3535828920]; that.getClass=class prolog.terms.Cons
2017-06-152 13:52:40.489 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_860011348|_3535828920]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:52:40.490 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_860011348|_3535828920]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:52:40.490 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:52:40.490 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:52:40.490 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_3378910798
[2]=>_3640563432
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:52:40.490 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:52:40.491 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,None,Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,None,Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,None,Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:52:40.491 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:52:40.492 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA) has expired from prefetching cache
2017-06-152 13:52:40.492 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 54 fetched (prebuffer 21): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 13:52:40.492 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 13:52:40.493 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:52:40.493 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 55 fetched (prebuffer 22): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 13:52:40.493 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 13:52:40.494 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 13:52:40.494 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 56 fetched (prebuffer 22): Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 13:52:40.494 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs): ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:52:40.495 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:52:40.495 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 13:52:40.495 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 57 fetched (prebuffer 22): Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:52:40.495 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ): ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:52:40.496 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:52:40.496 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:52:40.496 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 58 fetched (prebuffer 22): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:52:40.496 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:52:40.496 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:52:40.496 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:52:40.497 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 59 fetched (prebuffer 22): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:52:40.497 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:52:40.497 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:52:40.497 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:52:40.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 60 fetched (prebuffer 22): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:52:40.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:40.498 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:40.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 13:52:40.498 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 61 fetched (prebuffer 22): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:52:40.499 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:40.499 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:40.499 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 13:52:40.499 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 62 fetched (prebuffer 22): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:52:40.499 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 13:52:40.500 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:52:40.501 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:52:41.493-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:52:41.494-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:52:41.500-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 13:52:40.502 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:52:41.493-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:52:41.494-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:52:41.500-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:52:40.504 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:52:40.504 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:40.504 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:52:40.504 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:52:40.505 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_104279886,_3600541062)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2669481820,_4088986758,_3600541062,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_104279886,_4088986758)), 

2017-06-152 13:52:40.505 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2669481820,_4088986758,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4088986758)))
2017-06-152 13:52:40.505 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2669481820,_4088986758,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4088986758)), 

2017-06-152 13:52:40.505 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:52:40.506 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1296756960,_1173666586,_870595350,_109874464)), :(_1296756960,advertise(_1173666586,_870595350,_109874464)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1296756960,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1173666586,_492548320)), 

2017-06-152 13:52:40.506 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_2669481820,advertise(_4088986758,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2669481820,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4088986758,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4088986758)))
2017-06-152 13:52:40.506 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2669481820,advertise(_4088986758,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2669481820,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4088986758,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4088986758)), 

2017-06-152 13:52:40.506 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:52:40.507 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:52:40.507 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2669481820; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.507 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2669481820; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.507 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4088986758; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.508 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4088986758; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.508 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:40.508 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:40.508 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 13:52:40.509 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_4237808698,_4005133364)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_4237808698,_4005133364)), 

2017-06-152 13:52:40.509 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:40.509 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:40.509 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 13:52:40.510 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2352875854,_1294103704)), :(_257322754,allocate(_2352875854,_1294103704)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_257322754,_724290048)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1294103704,_724290048)), 

2017-06-152 13:52:40.510 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_257322754,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_257322754,_724290048)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_492548320,_724290048)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:52:40.510 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_492548320)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:52:40.510 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:52:40.510 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:52:40.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2669481820; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2669481820; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4088986758; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4088986758; that.getClass=class prolog.terms.Var
2017-06-152 13:52:40.511 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:40.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:52:40.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 13:52:40.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2669481820,_4088986758,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4088986758)), 

2017-06-152 13:52:40.512 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:52:40.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1445184082,_150723258,_3043601112,_3244756414)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2300466834|_1608925952]=_3043601112), :(_1445184082,advertise(_150723258,_3043601112,_3244756414)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2787196238,_1607655112,_1608925952,_1445184082)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_150723258,_1607655112)), 

2017-06-152 13:52:40.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2300466834|_1608925952]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_2669481820,advertise(_4088986758,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2787196238,_1607655112,_1608925952,_2669481820)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4088986758,_1607655112)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4088986758)))
2017-06-152 13:52:40.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2300466834|_1608925952]; that.getClass=class prolog.terms.Cons
2017-06-152 13:52:40.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2300466834|_1608925952]; that.getClass=class prolog.terms.Cons
2017-06-152 13:52:40.513 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2300466834|_1608925952]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:52:40.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2300466834|_1608925952]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:52:40.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:52:40.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:52:40.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_4088986758
[2]=>_2669481820
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:52:40.514 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:52:40.514 [ForkJoinPool-3-worker-9] [1;31mERROR[0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mRetry failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:36.770 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 13:56:36.771 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:56:36.771 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:56:36.771 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 13:56:36.772 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 3
2017-06-152 13:56:36.772 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 13:56:36.777 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:36.777 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:56:36.778 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg'; FreshGoals: List()
2017-06-152 13:56:36.779 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg',?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:36.780 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 13:56:36.780 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 13:56:36.781 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:36.782 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:56:36.782 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg'; FreshGoals: List()
2017-06-152 13:56:36.783 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:36.784 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:36.785 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:52:40.496-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:52:40.497-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:52:40.503-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:56:36.787 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:56:36.787 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:36.787 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:36.788 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218)), 

2017-06-152 13:56:36.788 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3845580370,_3981038404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1733095972,_1458073420,_3981038404,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3845580370,_1458073420)), 

2017-06-152 13:56:36.788 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1733095972,_1458073420,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1458073420)))
2017-06-152 13:56:36.789 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1733095972,_1458073420,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1458073420)), 

2017-06-152 13:56:36.789 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 13:56:36.789 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_79566772,_2798532500,_2803043514,_3012855066)), :(_79566772,advertise(_2798532500,_2803043514,_3012855066)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_79566772,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2798532500,_1180895082)), 

2017-06-152 13:56:36.790 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1733095972,advertise(_1458073420,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1733095972,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1458073420,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1458073420)))
2017-06-152 13:56:36.790 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1733095972,advertise(_1458073420,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1733095972,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1458073420,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1458073420)), 

2017-06-152 13:56:36.790 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:56:36.791 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:56:36.791 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1733095972; that.getClass=class prolog.terms.Var
2017-06-152 13:56:36.792 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1733095972; that.getClass=class prolog.terms.Var
2017-06-152 13:56:36.792 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1458073420; that.getClass=class prolog.terms.Var
2017-06-152 13:56:36.792 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1458073420; that.getClass=class prolog.terms.Var
2017-06-152 13:56:36.793 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:36.793 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:36.793 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086)), 

2017-06-152 13:56:36.794 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2428955300,_2945413850)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2428955300,_2945413850)), 

2017-06-152 13:56:36.794 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:36.794 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1180895082)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:36.795 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 13:56:36.795 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 13:56:36.795 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1180895082; that.getClass=class prolog.terms.Var
2017-06-152 13:56:36.796 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1180895082; that.getClass=class prolog.terms.Var
2017-06-152 13:56:36.796 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:36.796 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |   answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:36.797 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 13:56:47.497 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 3)
2017-06-152 13:56:47.497 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:56:47.498 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:56:47.498 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:56:47.498 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 3
2017-06-152 13:56:47.499 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3')?)
2017-06-152 13:56:47.503 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:47.504 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:56:47.504 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 13:56:47.506 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:47.507 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/3 (set29)'; FreshGoals: List()
2017-06-152 13:56:47.507 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): '8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4'; FreshGoals: List()
2017-06-152 13:56:47.508 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): '8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:47.509 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:56:47.509 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 13:56:47.510 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:47.511 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) has expired from prefetching cache
2017-06-152 13:56:47.512 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4
2017-06-152 13:56:47.512 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4
2017-06-152 13:56:47.522 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:56:47.522 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:56:47.523 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:56:47.523 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:47.524 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:52:41.493-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:52:41.494-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4),None,None,Set(),Map(),Map(),Set()))
2017-06-152 13:56:47.526 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:56:47.526 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:47.526 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:47.527 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:56:47.527 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_135302140,_4218572244)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_218937614,_1117545986,_4218572244,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_135302140,_1117545986)), 

2017-06-152 13:56:47.527 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_218937614,_1117545986,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1117545986)))
2017-06-152 13:56:47.528 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_218937614,_1117545986,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1117545986)), 

2017-06-152 13:56:47.528 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:56:47.529 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3462359750,_2787811892,_3464936246,_1854634130)), :(_3462359750,advertise(_2787811892,_3464936246,_1854634130)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3462359750,_1521944286)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2787811892,_1521944286)), 

2017-06-152 13:56:47.529 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_218937614,advertise(_1117545986,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_218937614,_1521944286)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1117545986,_1521944286)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1117545986)))
2017-06-152 13:56:47.529 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_218937614,_1117545986,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1117545986)), 

2017-06-152 13:56:47.530 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:56:47.530 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2826908862,_1406883212,_1738659980,_2227348304)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3578367410|_1572337058]=_1738659980), :(_2826908862,advertise(_1406883212,_1738659980,_2227348304)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_901456672,_2784165604,_1572337058,_2826908862)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1406883212,_2784165604)), 

2017-06-152 13:56:47.530 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3578367410|_1572337058]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_218937614,advertise(_1117545986,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_901456672,_2784165604,_1572337058,_218937614)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1117545986,_2784165604)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1117545986)))
2017-06-152 13:56:47.531 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3578367410|_1572337058]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:47.531 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3578367410|_1572337058]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:47.531 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3578367410|_1572337058]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:47.532 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3578367410|_1572337058]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:47.532 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:56:47.532 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:47.533 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_1117545986
[2]=>_218937614
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:56:47.533 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:56:47.533 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:52:41.493-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:52:41.494-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4),None,None,Set(),Map(),Map(),Set()))
2017-06-152 13:56:47.534 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:56:47.534 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) has expired from prefetching cache
2017-06-152 13:56:47.535 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 63 fetched (prebuffer 21): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 13:56:47.535 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 13:56:47.536 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:56:47.536 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 13:56:47.536 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) has expired from prefetching cache
2017-06-152 13:56:47.536 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) has expired from prefetching cache
2017-06-152 13:56:47.537 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 64 fetched (prebuffer 19): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 13:56:47.537 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 13:56:47.538 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4
2017-06-152 13:56:47.538 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4
2017-06-152 13:56:47.538 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4
2017-06-152 13:56:47.541 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:56:47.541 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:56:47.542 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:56:47.542 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4
2017-06-152 13:56:47.543 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4
2017-06-152 13:56:47.564 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:56:47.564 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:56:47.565 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:56:47.565 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:47.566 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:48.536-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:48.538-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4),None,Some(2017-06-01T13:56:48.565-04:00),Set(),Map(),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 13:56:47.566 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:48.536-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:48.538-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(8TghH0xn-RTFViu_kFX5Y4frnGXZJ0CGaYKwVOELHl4),None,Some(2017-06-01T13:56:48.565-04:00),Set(),Map(),Map(),Set()))
2017-06-152 13:56:47.568 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:56:47.568 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:47.568 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:47.569 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:56:47.569 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_1028641780,_3736537882)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_855216590,_30297258,_3736537882,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1028641780,_30297258)), 

2017-06-152 13:56:47.569 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_855216590,_30297258,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_30297258)))
2017-06-152 13:56:47.569 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_855216590,_30297258,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_30297258)), 

2017-06-152 13:56:47.569 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:56:47.570 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1130221332,_617935806,_3680321802,_2844126678)), :(_1130221332,advertise(_617935806,_3680321802,_2844126678)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1130221332,_67998364)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_617935806,_67998364)), 

2017-06-152 13:56:47.570 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_855216590,advertise(_30297258,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_855216590,_67998364)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_30297258,_67998364)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_30297258)))
2017-06-152 13:56:47.570 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_855216590,_30297258,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_30297258)), 

2017-06-152 13:56:47.570 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:56:47.571 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2261252256,_3080957026,_818809884,_1497350634)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3766759572|_1273909338]=_818809884), :(_2261252256,advertise(_3080957026,_818809884,_1497350634)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_167787478,_2895617004,_1273909338,_2261252256)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3080957026,_2895617004)), 

2017-06-152 13:56:47.571 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3766759572|_1273909338]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_855216590,advertise(_30297258,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_167787478,_2895617004,_1273909338,_855216590)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_30297258,_2895617004)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_30297258)))
2017-06-152 13:56:47.571 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3766759572|_1273909338]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:47.571 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3766759572|_1273909338]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:47.572 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3766759572|_1273909338]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:47.572 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3766759572|_1273909338]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:47.572 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:56:47.572 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:47.572 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_30297258
[2]=>_855216590
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:56:47.573 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:56:47.573 [ForkJoinPool-3-worker-11] [1;31mERROR[0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mRetry failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:52.585 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 13:56:52.585 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:56:52.586 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:56:52.586 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:56:52.586 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 4
2017-06-152 13:56:52.587 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 13:56:52.591 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:52.591 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:56:52.592 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 13:56:52.593 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:52.593 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 13:56:52.594 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 13:56:52.595 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:52.595 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:56:52.596 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 13:56:52.596 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:56:52.598 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:52.598 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:48.536-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:48.538-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:52:41.500-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:56:52.600 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:56:52.600 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:52.600 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:52.601 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:56:52.601 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_1409548042,_1607893206)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1317935162,_2482461310,_1607893206,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1409548042,_2482461310)), 

2017-06-152 13:56:52.601 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1317935162,_2482461310,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2482461310)))
2017-06-152 13:56:52.601 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1317935162,_2482461310,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2482461310)), 

2017-06-152 13:56:52.602 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:56:52.602 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3645324452,_863815530,_218982134,_604031362)), :(_3645324452,advertise(_863815530,_218982134,_604031362)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3645324452,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_863815530,_3292681146)), 

2017-06-152 13:56:52.602 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1317935162,advertise(_2482461310,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1317935162,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2482461310,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2482461310)))
2017-06-152 13:56:52.603 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1317935162,advertise(_2482461310,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1317935162,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2482461310,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2482461310)), 

2017-06-152 13:56:52.603 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:56:52.603 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:56:52.603 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1317935162; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.603 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1317935162; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.604 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2482461310; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.604 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2482461310; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.604 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:52.604 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:52.605 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 13:56:52.605 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_298892238,_1988916692)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_298892238,_1988916692)), 

2017-06-152 13:56:52.605 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:52.606 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:52.606 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 13:56:52.606 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1440935518,_2196478170)), :(_393301378,allocate(_1440935518,_2196478170)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_393301378,_38180972)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2196478170,_38180972)), 

2017-06-152 13:56:52.607 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_393301378,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_393301378,_38180972)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3292681146,_38180972)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:52.607 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3292681146)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:52.607 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:56:52.608 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:56:52.608 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1317935162; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.608 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1317935162; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.609 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2482461310; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.609 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2482461310; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.609 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:56:52.609 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:56:52.610 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 13:56:52.610 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1317935162,_2482461310,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2482461310)), 

2017-06-152 13:56:52.610 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:56:52.611 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1083455076,_2674359268,_48703702,_894719262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3583132358|_1888402378]=_48703702), :(_1083455076,advertise(_2674359268,_48703702,_894719262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1242868884,_3699375212,_1888402378,_1083455076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2674359268,_3699375212)), 

2017-06-152 13:56:52.611 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3583132358|_1888402378]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_1317935162,advertise(_2482461310,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1242868884,_3699375212,_1888402378,_1317935162)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2482461310,_3699375212)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2482461310)))
2017-06-152 13:56:52.611 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3583132358|_1888402378]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:52.612 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3583132358|_1888402378]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:52.612 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3583132358|_1888402378]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:52.612 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3583132358|_1888402378]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:52.612 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:56:52.612 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:52.613 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_2482461310
[2]=>_1317935162
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:56:52.613 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:56:52.614 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:48.536-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:48.538-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:52:41.500-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:56:52.614 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:56:52.614 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) has expired from prefetching cache
2017-06-152 13:56:52.615 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 65 fetched (prebuffer 19): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 13:56:52.615 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 13:56:52.616 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:56:52.616 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 13:56:52.616 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 66 fetched (prebuffer 19): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 13:56:52.617 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 13:56:52.617 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 13:56:52.617 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) has expired from prefetching cache
2017-06-152 13:56:52.618 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 67 fetched (prebuffer 19): Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 13:56:52.618 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs): ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:56:52.618 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 13:56:52.619 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:56:52.619 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 68 fetched (prebuffer 20): Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:56:52.619 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ): ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:56:52.620 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:56:52.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:56:52.620 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) has expired from prefetching cache
2017-06-152 13:56:52.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 69 fetched (prebuffer 20): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:56:52.621 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:56:52.621 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:56:52.621 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:56:52.621 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 70 fetched (prebuffer 21): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:56:52.622 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:56:52.622 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:56:52.622 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:56:52.622 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) has expired from prefetching cache
2017-06-152 13:56:52.622 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 71 fetched (prebuffer 21): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:56:52.622 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:56:52.622 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:56:52.623 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 13:56:52.623 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) has expired from prefetching cache
2017-06-152 13:56:52.623 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 72 fetched (prebuffer 21): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:56:52.623 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:56:52.623 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:56:52.624 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 13:56:52.624 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) has expired from prefetching cache
2017-06-152 13:56:52.624 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 73 fetched (prebuffer 21): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:56:52.624 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 13:56:52.625 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:52.626 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:53.616-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:53.617-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:56:53.625-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 13:56:52.627 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:53.616-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:53.617-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:56:53.625-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:56:52.629 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:56:52.630 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:52.630 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:56:52.631 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:56:52.631 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_2612801878,_2682894592)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1886836324,_1405737114,_2682894592,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2612801878,_1405737114)), 

2017-06-152 13:56:52.631 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1886836324,_1405737114,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1405737114)))
2017-06-152 13:56:52.632 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1886836324,_1405737114,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1405737114)), 

2017-06-152 13:56:52.632 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:56:52.632 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_696608052,_4202100924,_1031140448,_543553116)), :(_696608052,advertise(_4202100924,_1031140448,_543553116)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_696608052,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4202100924,_583768992)), 

2017-06-152 13:56:52.633 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1886836324,advertise(_1405737114,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1886836324,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1405737114,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1405737114)))
2017-06-152 13:56:52.633 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1886836324,advertise(_1405737114,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1886836324,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1405737114,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1405737114)), 

2017-06-152 13:56:52.633 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:56:52.634 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:56:52.634 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1886836324; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.634 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1886836324; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.635 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1405737114; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.635 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1405737114; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.635 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:52.635 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:52.635 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 13:56:52.636 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1865757788,_4235270958)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1865757788,_4235270958)), 

2017-06-152 13:56:52.636 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:52.636 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:52.636 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 13:56:52.636 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_4071220714,_2361489028)), :(_1267737748,allocate(_4071220714,_2361489028)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1267737748,_1061998242)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2361489028,_1061998242)), 

2017-06-152 13:56:52.637 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1267737748,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1267737748,_1061998242)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_583768992,_1061998242)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:56:52.637 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_583768992)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:56:52.637 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:56:52.637 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:56:52.637 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1886836324; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.638 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1886836324; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.638 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1405737114; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.638 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1405737114; that.getClass=class prolog.terms.Var
2017-06-152 13:56:52.638 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:56:52.638 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:56:52.639 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 13:56:52.639 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1886836324,_1405737114,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1405737114)), 

2017-06-152 13:56:52.639 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:56:52.639 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2205669908,_75884968,_3489388840,_2543519658)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2869020726|_2162334806]=_3489388840), :(_2205669908,advertise(_75884968,_3489388840,_2543519658)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2445346810,_3727213630,_2162334806,_2205669908)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_75884968,_3727213630)), 

2017-06-152 13:56:52.639 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2869020726|_2162334806]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_1886836324,advertise(_1405737114,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2445346810,_3727213630,_2162334806,_1886836324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1405737114,_3727213630)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1405737114)))
2017-06-152 13:56:52.640 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2869020726|_2162334806]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:52.640 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2869020726|_2162334806]; that.getClass=class prolog.terms.Cons
2017-06-152 13:56:52.640 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2869020726|_2162334806]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:52.640 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2869020726|_2162334806]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:56:52.640 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:56:52.641 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:56:52.641 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_1405737114
[2]=>_1886836324
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:56:52.641 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:56:52.641 [ForkJoinPool-3-worker-11] [1;31mERROR[0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mRetry failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:09.016 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 1)
2017-06-152 13:57:09.017 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:57:09.017 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:57:09.017 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:57:09.018 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 5
2017-06-152 13:57:09.018 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')?)
2017-06-152 13:57:09.024 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:09.024 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:57:09.025 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 13:57:09.026 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:09.027 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 13:57:09.028 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI'; FreshGoals: List()
2017-06-152 13:57:09.029 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:09.030 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:57:09.030 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 13:57:09.031 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:09.032 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI) has expired from prefetching cache
2017-06-152 13:57:09.033 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI
2017-06-152 13:57:09.033 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI
2017-06-152 13:57:09.223 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:57:09.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:57:09.224 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:57:09.225 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:09.225 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:53.616-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:53.617-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI),None,None,Set(),Map(),Map(),Set()))
2017-06-152 13:57:09.227 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:57:09.227 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:09.227 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:09.227 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:57:09.228 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3217530994,_3082329658)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1035842564,_3713205744,_3082329658,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3217530994,_3713205744)), 

2017-06-152 13:57:09.228 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1035842564,_3713205744,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3713205744)))
2017-06-152 13:57:09.228 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1035842564,_3713205744,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3713205744)), 

2017-06-152 13:57:09.229 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:57:09.229 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1578486296,_758105774,_4259465882,_3118181458)), :(_1578486296,advertise(_758105774,_4259465882,_3118181458)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1578486296,_1232000122)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_758105774,_1232000122)), 

2017-06-152 13:57:09.229 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1035842564,advertise(_3713205744,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1035842564,_1232000122)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3713205744,_1232000122)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3713205744)))
2017-06-152 13:57:09.229 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1035842564,_3713205744,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3713205744)), 

2017-06-152 13:57:09.229 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:57:09.230 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_455561550,_4118707754,_2426652138,_2941329024)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2413659908|_2303989754]=_2426652138), :(_455561550,advertise(_4118707754,_2426652138,_2941329024)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_106315694,_567575802,_2303989754,_455561550)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4118707754,_567575802)), 

2017-06-152 13:57:09.230 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2413659908|_2303989754]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_1035842564,advertise(_3713205744,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_106315694,_567575802,_2303989754,_1035842564)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3713205744,_567575802)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3713205744)))
2017-06-152 13:57:09.230 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2413659908|_2303989754]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:09.230 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2413659908|_2303989754]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:09.231 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2413659908|_2303989754]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:09.231 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2413659908|_2303989754]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:09.231 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:57:09.231 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:09.232 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_3713205744
[2]=>_1035842564
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:57:09.232 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:57:09.232 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:56:53.616-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:56:53.617-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI),None,None,Set(),Map(),Map(),Set()))
2017-06-152 13:57:09.233 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:57:09.233 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) has expired from prefetching cache
2017-06-152 13:57:09.233 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 74 fetched (prebuffer 20): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 13:57:09.233 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 13:57:09.234 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:57:09.234 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 13:57:09.234 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) has expired from prefetching cache
2017-06-152 13:57:09.235 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) has expired from prefetching cache
2017-06-152 13:57:09.235 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 75 fetched (prebuffer 18): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 13:57:09.235 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 13:57:09.236 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI
2017-06-152 13:57:09.236 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI
2017-06-152 13:57:09.236 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI
2017-06-152 13:57:09.250 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:57:09.251 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:57:09.251 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:57:09.251 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI
2017-06-152 13:57:09.252 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI
2017-06-152 13:57:09.281 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 13:57:09.282 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 13:57:09.282 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 13:57:09.283 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:09.283 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:10.234-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:10.236-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI),None,Some(2017-06-01T13:57:10.282-04:00),Set(),Map(),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 13:57:09.284 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:10.234-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:10.236-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(Mkm6f22_BpdCVEkgCGxA5aRCftiT8C5eWfIKDrd1_gI),None,Some(2017-06-01T13:57:10.282-04:00),Set(),Map(),Map(),Set()))
2017-06-152 13:57:09.285 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:57:09.286 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:09.286 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:09.286 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:57:09.287 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_1129497186,_1804650036)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3700174758,_1509594008,_1804650036,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1129497186,_1509594008)), 

2017-06-152 13:57:09.287 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3700174758,_1509594008,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1509594008)))
2017-06-152 13:57:09.287 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3700174758,_1509594008,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1509594008)), 

2017-06-152 13:57:09.288 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:57:09.288 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2372799254,_1612905960,_3714989908,_1367683378)), :(_2372799254,advertise(_1612905960,_3714989908,_1367683378)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2372799254,_2890839726)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1612905960,_2890839726)), 

2017-06-152 13:57:09.288 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_3700174758,advertise(_1509594008,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3700174758,_2890839726)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1509594008,_2890839726)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1509594008)))
2017-06-152 13:57:09.289 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3700174758,_1509594008,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1509594008)), 

2017-06-152 13:57:09.289 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:57:09.289 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3690255218,_2009908166,_263741612,_3600440370)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2861066960|_3142287028]=_263741612), :(_3690255218,advertise(_2009908166,_263741612,_3600440370)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1983575152,_1917144392,_3142287028,_3690255218)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2009908166,_1917144392)), 

2017-06-152 13:57:09.290 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2861066960|_3142287028]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_3700174758,advertise(_1509594008,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1983575152,_1917144392,_3142287028,_3700174758)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1509594008,_1917144392)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1509594008)))
2017-06-152 13:57:09.290 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2861066960|_3142287028]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:09.290 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2861066960|_3142287028]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:09.291 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2861066960|_3142287028]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:09.291 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2861066960|_3142287028]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:09.291 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:57:09.292 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:09.292 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_1509594008
[2]=>_3700174758
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:57:09.292 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:57:09.293 [ForkJoinPool-3-worker-13] [1;31mERROR[0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mRetry failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:22.990 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 13:57:22.991 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:57:22.991 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 13:57:22.991 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 13:57:22.991 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 6
2017-06-152 13:57:22.991 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 13:57:22.996 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:22.996 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 13:57:22.997 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 13:57:22.998 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:22.998 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 13:57:22.999 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 13:57:23.000 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:23.000 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 13:57:23.000 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 13:57:23.001 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 13:57:23.002 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:23.003 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:10.234-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:10.236-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:56:53.625-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:57:23.004 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:57:23.004 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:23.004 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:23.005 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:57:23.005 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_2800853736,_2928582534)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_613136030,_1828183568,_2928582534,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2800853736,_1828183568)), 

2017-06-152 13:57:23.005 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_613136030,_1828183568,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1828183568)))
2017-06-152 13:57:23.005 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_613136030,_1828183568,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1828183568)), 

2017-06-152 13:57:23.006 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:57:23.006 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1195038596,_2626814538,_3839117312,_922815956)), :(_1195038596,advertise(_2626814538,_3839117312,_922815956)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1195038596,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2626814538,_2803259974)), 

2017-06-152 13:57:23.006 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_613136030,advertise(_1828183568,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_613136030,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1828183568,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1828183568)))
2017-06-152 13:57:23.007 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_613136030,advertise(_1828183568,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_613136030,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1828183568,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1828183568)), 

2017-06-152 13:57:23.007 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:57:23.007 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:57:23.007 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_613136030; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.008 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_613136030; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.008 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1828183568; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.008 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1828183568; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.008 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:57:23.009 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:57:23.009 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 13:57:23.009 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2862259388,_3964171686)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2862259388,_3964171686)), 

2017-06-152 13:57:23.009 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:57:23.010 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:57:23.010 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 13:57:23.010 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3524823638,_3351854648)), :(_3100124416,allocate(_3524823638,_3351854648)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3100124416,_377664250)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3351854648,_377664250)), 

2017-06-152 13:57:23.011 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_3100124416,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3100124416,_377664250)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2803259974,_377664250)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:57:23.011 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2803259974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:57:23.011 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:57:23.012 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:57:23.012 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_613136030; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.012 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_613136030; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.012 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1828183568; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.013 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1828183568; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.013 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:57:23.013 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:57:23.013 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 13:57:23.014 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_613136030,_1828183568,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1828183568)), 

2017-06-152 13:57:23.014 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:57:23.014 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_14598214,_2389182106,_1987170930,_1969720100)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2202896702|_1289696026]=_1987170930), :(_14598214,advertise(_2389182106,_1987170930,_1969720100)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3032849072,_4256307622,_1289696026,_14598214)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2389182106,_4256307622)), 

2017-06-152 13:57:23.014 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2202896702|_1289696026]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_613136030,advertise(_1828183568,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3032849072,_4256307622,_1289696026,_613136030)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1828183568,_4256307622)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1828183568)))
2017-06-152 13:57:23.015 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2202896702|_1289696026]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:23.015 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_2202896702|_1289696026]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:23.015 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2202896702|_1289696026]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:23.016 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_2202896702|_1289696026]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:23.016 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:57:23.016 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:23.016 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_1828183568
[2]=>_613136030
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:57:23.016 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:57:23.017 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:10.234-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:10.236-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:56:53.625-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:57:23.018 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 13:57:23.018 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) has expired from prefetching cache
2017-06-152 13:57:23.018 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 76 fetched (prebuffer 18): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 13:57:23.019 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 13:57:23.019 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 13:57:23.019 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 13:57:23.020 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 77 fetched (prebuffer 18): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 13:57:23.020 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 13:57:23.020 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 13:57:23.021 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) has expired from prefetching cache
2017-06-152 13:57:23.021 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 78 fetched (prebuffer 18): Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 13:57:23.021 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs): ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:57:23.021 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 13:57:23.021 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:57:23.022 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 79 fetched (prebuffer 19): Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 13:57:23.022 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ): ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:57:23.022 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 13:57:23.022 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:57:23.023 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) has expired from prefetching cache
2017-06-152 13:57:23.023 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 80 fetched (prebuffer 19): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 13:57:23.023 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:57:23.023 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:57:23.023 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 13:57:23.023 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 81 fetched (prebuffer 20): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 13:57:23.024 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:57:23.024 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:57:23.024 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 13:57:23.024 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) has expired from prefetching cache
2017-06-152 13:57:23.024 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 82 fetched (prebuffer 20): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 13:57:23.024 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) has expired from prefetching cache
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 83 fetched (prebuffer 20): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 13:57:23.025 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) has expired from prefetching cache
2017-06-152 13:57:23.026 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 84 fetched (prebuffer 20): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 13:57:23.026 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 13:57:23.026 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:23.027 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:24.019-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:24.020-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:57:24.026-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 13:57:23.027 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:24.019-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:24.020-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:57:24.026-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 13:57:23.029 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 13:57:23.029 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:23.029 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 13:57:23.030 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 13:57:23.030 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_324631382,_2796289476)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1042531258,_1378988784,_2796289476,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_324631382,_1378988784)), 

2017-06-152 13:57:23.030 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1042531258,_1378988784,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1378988784)))
2017-06-152 13:57:23.030 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1042531258,_1378988784,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1378988784)), 

2017-06-152 13:57:23.031 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 13:57:23.031 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2339041322,_1926650206,_1388862124,_2360468534)), :(_2339041322,advertise(_1926650206,_1388862124,_2360468534)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2339041322,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1926650206,_1351007786)), 

2017-06-152 13:57:23.031 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1042531258,advertise(_1378988784,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1042531258,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1378988784,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1378988784)))
2017-06-152 13:57:23.031 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1042531258,advertise(_1378988784,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1042531258,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1378988784,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1378988784)), 

2017-06-152 13:57:23.031 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:57:23.032 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 13:57:23.032 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1042531258; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.032 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1042531258; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.032 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1378988784; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.032 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1378988784; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.033 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:57:23.033 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:57:23.033 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 13:57:23.033 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2438595020,_2153190512)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2438595020,_2153190512)), 

2017-06-152 13:57:23.034 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:57:23.034 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:57:23.034 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 13:57:23.034 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2193932312,_3889588612)), :(_2814599378,allocate(_2193932312,_3889588612)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2814599378,_2668565710)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3889588612,_2668565710)), 

2017-06-152 13:57:23.034 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_2814599378,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2814599378,_2668565710)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1351007786,_2668565710)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 13:57:23.035 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1351007786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 13:57:23.035 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:57:23.035 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 13:57:23.035 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1042531258; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.035 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1042531258; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.036 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1378988784; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.036 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1378988784; that.getClass=class prolog.terms.Var
2017-06-152 13:57:23.036 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:57:23.036 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 13:57:23.036 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 13:57:23.037 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1042531258,_1378988784,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1378988784)), 

2017-06-152 13:57:23.037 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 13:57:23.037 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_980402998,_1872836534,_3554152288,_882301104)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_1889852262|_400444994]=_3554152288), :(_980402998,advertise(_1872836534,_3554152288,_882301104)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_74367190,_2260724658,_400444994,_980402998)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1872836534,_2260724658)), 

2017-06-152 13:57:23.037 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_1889852262|_400444994]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_1042531258,advertise(_1378988784,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_74367190,_2260724658,_400444994,_1042531258)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1378988784,_2260724658)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1378988784)))
2017-06-152 13:57:23.037 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_1889852262|_400444994]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:23.038 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_1889852262|_400444994]; that.getClass=class prolog.terms.Cons
2017-06-152 13:57:23.038 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_1889852262|_400444994]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:23.038 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_1889852262|_400444994]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 13:57:23.038 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 13:57:23.038 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 13:57:23.039 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_1378988784
[2]=>_1042531258
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 13:57:23.039 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 13:57:23.039 [ForkJoinPool-3-worker-5] [1;31mERROR[0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mRetry failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 14:02:09.286 [Safelang-akka.actor.default-dispatcher-4] [34mINFO [0;39m [36mLocalActorRef[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - Message [akka.io.Tcp$Close$] from Actor[akka://Safelang/user/IO-HTTP/group-0/0#1096626464] to Actor[akka://Safelang/system/IO-TCP/selectors/$a/0#1100939671] was not delivered. [1] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
2017-06-152 14:19:00.027 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 1)
2017-06-152 14:19:00.028 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.028 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.028 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:19:00.028 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 7
2017-06-152 14:19:00.028 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')?)
2017-06-152 14:19:00.029 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(defpost(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]))
2017-06-152 14:19:00.031 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"), defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:19:00.031 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DstIP($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.19.2/24"(set29)'; FreshGoals: List()
2017-06-152 14:19:00.031 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4'; FreshGoals: List()
2017-06-152 14:19:00.032 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4' := label("Token for IP allocation/?DstIP($SetVersion)"); FreshGoals: List(defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:19:00.033 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:19:00.032-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.033 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.422-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.033 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); solution(goals.head): defcon(startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); FreshGoals: List()
2017-06-152 14:19:00.041 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8:
2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
T7Fruh3kHXnlmjh-QdgNzpSR8ipM3UH4DzlGb4Yc-AiQ4HrJB89w7Q5Bpn_KWNf8s0Ak9hg1AG_oCsdHsge5mfKWp8CtClRgYn7kK7qR7U9rFuxpmUDIXUuPn_OM1lmFVsVK4_D0xWOAiX3VVilmkBwbVb3uzcf4uu2-EJ8fEYzGqswJ4olf9lZQmDXYRWZ8LWVjL2CBLhI99zI5NrLxzxJ2dyJ6x3kNl-8IjC7vLqonGiuIDQBJtec-YMKbdAAC-Mq1gUOX_obm2kMfaRNHqle6qwaBGb7CMYGzBJ3XTIXD906o1R9DRnUehP8g-GP4_R3E_Ivi25a4L2gPtcKSHw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:19:00.034-04:00, 2020-06-01T14:19:00.034-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 14:19:00.041 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 14:19:00.041 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
T7Fruh3kHXnlmjh-QdgNzpSR8ipM3UH4DzlGb4Yc-AiQ4HrJB89w7Q5Bpn_KWNf8s0Ak9hg1AG_oCsdHsge5mfKWp8CtClRgYn7kK7qR7U9rFuxpmUDIXUuPn_OM1lmFVsVK4_D0xWOAiX3VVilmkBwbVb3uzcf4uu2-EJ8fEYzGqswJ4olf9lZQmDXYRWZ8LWVjL2CBLhI99zI5NrLxzxJ2dyJ6x3kNl-8IjC7vLqonGiuIDQBJtec-YMKbdAAC-Mq1gUOX_obm2kMfaRNHqle6qwaBGb7CMYGzBJ3XTIXD906o1R9DRnUehP8g-GP4_R3E_Ivi25a4L2gPtcKSHw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:19:00.034-04:00, 2020-06-01T14:19:00.034-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 14:19:00.060 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) is posted (code: 204)
2017-06-152 14:19:00.061 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postInitRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]); solution(goals.head): ['2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8']; FreshGoals: List()
2017-06-152 14:19:00.157 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:19:00.158 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.158 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.158 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:19:00.158 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 7
2017-06-152 14:19:00.158 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:19:00.159 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 14:19:00.160 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:19:00.161 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:19:00.161 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:19:00.161-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.161 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.982-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.162 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:19:00.169 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw:
Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
RhdxR3NJ5vDzlf1qJQLNhcqd8W8qSzQnG21Qap7pjOy2TIrMQ153foKV_fU7zdRdBs9NKXnRkwlNkQ-hTolmfDelIUkVyvkN5sAY8CQ-Pq58nAAz8j_-bAM2fTRX6dyHNSM2VIzlMCFNmMEcWZLmkyDlEZyEL9eDIC5K77FKPlPS805K_Mvu7LO-m3u0MkaLqCDPJpyEz1mI1c3drva6vGZNY7lH84ly9EKLB9d4siG4prGFfqHCrFbMcRx-1_oCVIbFikAgpQZToeVKvFirQ5W2bx5AFsiUW9tsz9DCbn8eAHklcg6tPvMNPUGfDNmoAbaO4LexfYlrxD2nNkSzcw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:19:00.162-04:00, 2020-06-01T14:19:00.162-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 14:19:00.169 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 14:19:00.169 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
RhdxR3NJ5vDzlf1qJQLNhcqd8W8qSzQnG21Qap7pjOy2TIrMQ153foKV_fU7zdRdBs9NKXnRkwlNkQ-hTolmfDelIUkVyvkN5sAY8CQ-Pq58nAAz8j_-bAM2fTRX6dyHNSM2VIzlMCFNmMEcWZLmkyDlEZyEL9eDIC5K77FKPlPS805K_Mvu7LO-m3u0MkaLqCDPJpyEz1mI1c3drva6vGZNY7lH84ly9EKLB9d4siG4prGFfqHCrFbMcRx-1_oCVIbFikAgpQZToeVKvFirQ5W2bx5AFsiUW9tsz9DCbn8eAHklcg6tPvMNPUGfDNmoAbaO4LexfYlrxD2nNkSzcw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:19:00.162-04:00, 2020-06-01T14:19:00.162-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 14:19:00.186 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) is posted (code: 204)
2017-06-152 14:19:00.187 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw']; FreshGoals: List()
2017-06-152 14:19:00.206 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:19:00.206 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.206 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.206 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:19:00.207 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 7
2017-06-152 14:19:00.207 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:19:00.210 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.210 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:19:00.210 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg'; FreshGoals: List()
2017-06-152 14:19:00.211 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg',?PathToken_1,ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.212 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:19:00.212 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 14:19:00.212 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.213 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:19:00.213 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg'; FreshGoals: List()
2017-06-152 14:19:00.214 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.215 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 14:19:00.215 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:52:40.496-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:52:40.497-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:52:40.503-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:19:00.216 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:19:00.216 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 14:19:00.216 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 14:19:00.216 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218)), 

2017-06-152 14:19:00.216 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_65716514,_1263405324)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4006891982,_1058013232,_1263405324,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_65716514,_1058013232)), 

2017-06-152 14:19:00.217 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4006891982,_1058013232,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1058013232)))
2017-06-152 14:19:00.217 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4006891982,_1058013232,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1058013232)), 

2017-06-152 14:19:00.217 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 14:19:00.217 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1806054688,_1369143088,_479004396,_2737026252)), :(_1806054688,advertise(_1369143088,_479004396,_2737026252)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1806054688,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1369143088,_4185307836)), 

2017-06-152 14:19:00.217 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_4006891982,advertise(_1058013232,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_4006891982,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1058013232,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1058013232)))
2017-06-152 14:19:00.217 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_4006891982,advertise(_1058013232,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_4006891982,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1058013232,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1058013232)), 

2017-06-152 14:19:00.217 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_4006891982; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_4006891982; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1058013232; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1058013232; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086)), 

2017-06-152 14:19:00.218 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1943949396,_101753508)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1943949396,_101753508)), 

2017-06-152 14:19:00.219 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.219 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4185307836)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.219 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.219 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.219 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4185307836; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.219 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4185307836; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.219 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.220 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |   answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 14:19:00.220 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 14:19:00.231 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:19:00.231 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.232 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.232 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:19:00.232 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 7
2017-06-152 14:19:00.232 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:19:00.234 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 14:19:00.236 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:19:00.236 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:19:00.236 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 14:19:00.237 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:19:00.238 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:19:00.238-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw))), Map($PathToken -> Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)))),
links: ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),
speaksForToken: None,
label: Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.238 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.540-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw))), Map($PathToken -> Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)))),
links: ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),
speaksForToken: None,
label: Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.239 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 14:19:00.246 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ:
OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
QZQKwwtQ1EAMkAVYWenP8YNS0Ua03_Ou4cKLPk-cBw4FVElmosL2ZrHkAwZHnKlYzs6L1etoJi2xtZ0P9kSSNlED3PrJkIjLvCOs0X06XZtzMQECZ3TruIzfPcuwkiN_Tkzy6OpgOObaDWi68IDbxsiCIvY_33GixHEZidfws29Hto6sXTL9Uobp9IIqb4xszVsgv3GGsGZl-luVMRaEE4oUvvsSkDGq4TjKQs0QxitKya1TWkN_axivih2fmDbTvZ-5UsjgrQ48OUA6JP46Q5E8Oauy2rI0PSXXXN0dBYuiqN2cojbQMp_Ys1JfLx6GmbqXDDRuxRMdt0bf0PKwZA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:19:00.240-04:00, 2020-06-01T14:19:00.240-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 14:19:00.246 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 14:19:00.247 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
QZQKwwtQ1EAMkAVYWenP8YNS0Ua03_Ou4cKLPk-cBw4FVElmosL2ZrHkAwZHnKlYzs6L1etoJi2xtZ0P9kSSNlED3PrJkIjLvCOs0X06XZtzMQECZ3TruIzfPcuwkiN_Tkzy6OpgOObaDWi68IDbxsiCIvY_33GixHEZidfws29Hto6sXTL9Uobp9IIqb4xszVsgv3GGsGZl-luVMRaEE4oUvvsSkDGq4TjKQs0QxitKya1TWkN_axivih2fmDbTvZ-5UsjgrQ48OUA6JP46Q5E8Oauy2rI0PSXXXN0dBYuiqN2cojbQMp_Ys1JfLx6GmbqXDDRuxRMdt0bf0PKwZA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:19:00.240-04:00, 2020-06-01T14:19:00.240-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 14:19:00.271 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) is posted (code: 204)
2017-06-152 14:19:00.271 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ']; FreshGoals: List()
2017-06-152 14:19:00.368 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:19:00.368 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.368 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.368 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:19:00.369 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 7
2017-06-152 14:19:00.369 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:19:00.370 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]))
2017-06-152 14:19:00.372 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:19:00.373 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:19:00.374 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:19:00.373-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ))), Map($Token -> OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)))),
links: ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ),
speaksForToken: None,
label: Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.374 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.772-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ))), Map($Token -> OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)))),
links: ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ),
speaksForToken: None,
label: Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:19:00.375 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:19:00.384 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs:
piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
bUpvv-A0cmIqshzVZnCrMHWc3afBfWo5orzM0iPN6LlCFuMxHTT_kspglsijZtp-bCtvydCvcBl6GGTd6_yxCPeSHf-rpewfQKBYN-CVvr_1nz0cBoxpldPfJLJSx-2y8GlDC1S-rkZXrFPOjoQlWPVLN02HYdqO7Y5Y5ZPnB18zNan-1d1VTskufZSvb0aLS-Bab02qgyfLc6fRcoHPUaUMxRn0Kc07eM7PktQx3MHov1YaHvbE0G-YWJCeTDElCAbhvJLFrMLY6YH-1tXtwMqsbWA7e3d-P003CtL-KlspbcnkpKuUGDTO05qPLgIdDiRMAyGh6TpEc7poh63OFQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:19:00.376-04:00, 2020-06-01T14:19:00.376-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 14:19:00.384 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 14:19:00.384 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
bUpvv-A0cmIqshzVZnCrMHWc3afBfWo5orzM0iPN6LlCFuMxHTT_kspglsijZtp-bCtvydCvcBl6GGTd6_yxCPeSHf-rpewfQKBYN-CVvr_1nz0cBoxpldPfJLJSx-2y8GlDC1S-rkZXrFPOjoQlWPVLN02HYdqO7Y5Y5ZPnB18zNan-1d1VTskufZSvb0aLS-Bab02qgyfLc6fRcoHPUaUMxRn0Kc07eM7PktQx3MHov1YaHvbE0G-YWJCeTDElCAbhvJLFrMLY6YH-1tXtwMqsbWA7e3d-P003CtL-KlspbcnkpKuUGDTO05qPLgIdDiRMAyGh6TpEc7poh63OFQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:19:00.376-04:00, 2020-06-01T14:19:00.376-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 14:19:00.395 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) is posted (code: 204)
2017-06-152 14:19:00.395 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]); solution(goals.head): ['piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs']; FreshGoals: List()
2017-06-152 14:19:00.413 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:19:00.414 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.414 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:19:00.414 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:19:00.414 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 7
2017-06-152 14:19:00.414 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:19:00.416 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.416 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:19:00.417 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 14:19:00.417 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.418 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 14:19:00.418 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 14:19:00.418 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.418 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:19:00.419 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 14:19:00.419 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:19:00.420 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 14:19:00.420 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:24.019-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:24.020-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:57:24.026-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:19:00.421 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:19:00.421 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 14:19:00.422 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 14:19:00.422 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 14:19:00.422 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_1906218800,_1268954862)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_772397518,_2232398846,_1268954862,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1906218800,_2232398846)), 

2017-06-152 14:19:00.422 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_772397518,_2232398846,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2232398846)))
2017-06-152 14:19:00.422 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_772397518,_2232398846,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2232398846)), 

2017-06-152 14:19:00.423 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:19:00.423 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_28160888,_1608933476,_1044448766,_3341414794)), :(_28160888,advertise(_1608933476,_1044448766,_3341414794)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_28160888,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1608933476,_2859707492)), 

2017-06-152 14:19:00.423 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_772397518,advertise(_2232398846,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_772397518,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2232398846,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2232398846)))
2017-06-152 14:19:00.423 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_772397518,advertise(_2232398846,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_772397518,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2232398846,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2232398846)), 

2017-06-152 14:19:00.423 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:19:00.424 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:19:00.424 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_772397518; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.424 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_772397518; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.424 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2232398846; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.425 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2232398846; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.425 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.425 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.425 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:19:00.425 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3355065358,_4037197818)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3355065358,_4037197818)), 

2017-06-152 14:19:00.426 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.426 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.426 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 14:19:00.426 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2039449028,_1319638556)), :(_1503938954,allocate(_2039449028,_1319638556)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1503938954,_3155972138)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1319638556,_3155972138)), 

2017-06-152 14:19:00.426 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1503938954,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1503938954,_3155972138)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2859707492,_3155972138)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.427 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2859707492)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.427 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:19:00.427 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:19:00.427 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_772397518; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.428 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_772397518; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.428 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2232398846; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.428 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2232398846; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.428 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:19:00.428 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:19:00.429 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:19:00.429 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_772397518,_2232398846,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2232398846)), 

2017-06-152 14:19:00.429 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 14:19:00.429 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3115869128,_3064904212,_3443350866,_2466175454)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3894570602|_715077472]=_3443350866), :(_3115869128,advertise(_3064904212,_3443350866,_2466175454)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_208611500,_1748701398,_715077472,_3115869128)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3064904212,_1748701398)), 

2017-06-152 14:19:00.430 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3894570602|_715077472]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_772397518,advertise(_2232398846,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_208611500,_1748701398,_715077472,_772397518)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2232398846,_1748701398)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2232398846)))
2017-06-152 14:19:00.430 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3894570602|_715077472]; that.getClass=class prolog.terms.Cons
2017-06-152 14:19:00.430 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3894570602|_715077472]; that.getClass=class prolog.terms.Cons
2017-06-152 14:19:00.430 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3894570602|_715077472]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:19:00.430 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3894570602|_715077472]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:19:00.430 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 14:19:00.431 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 14:19:00.431 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_2232398846
[2]=>_772397518
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 14:19:00.431 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 14:19:00.432 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T13:57:24.019-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T13:57:24.020-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T13:57:24.026-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:19:00.432 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 14:19:00.432 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) has expired from prefetching cache
2017-06-152 14:19:00.433 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 85 fetched (prebuffer 20): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 14:19:00.433 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 14:19:00.433 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 14:19:00.434 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 14:19:00.434 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) has expired from prefetching cache
2017-06-152 14:19:00.434 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) has expired from prefetching cache
2017-06-152 14:19:00.434 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 86 fetched (prebuffer 18): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 14:19:00.434 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 14:19:00.435 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 14:19:00.435 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) has expired from prefetching cache
2017-06-152 14:19:00.435 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 87 fetched (prebuffer 18): Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 14:19:00.436 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs): ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:19:00.436 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 14:19:00.436 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 88 fetched (prebuffer 19): Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:19:00.436 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ): ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:19:00.437 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 14:19:00.437 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) has expired from prefetching cache
2017-06-152 14:19:00.437 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:19:00.437 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 89 fetched (prebuffer 19): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:19:00.437 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:19:00.438 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:19:00.438 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:19:00.438 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 14:19:00.438 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 90 fetched (prebuffer 20): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) has expired from prefetching cache
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 91 fetched (prebuffer 20): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 14:19:00.439 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) has expired from prefetching cache
2017-06-152 14:19:00.440 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 92 fetched (prebuffer 20): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:19:00.440 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:19:00.440 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:19:00.440 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 14:19:00.440 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) has expired from prefetching cache
2017-06-152 14:19:00.440 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 93 fetched (prebuffer 20): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:19:00.440 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 14:19:00.441 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 14:19:00.442 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:19:01.433-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:19:01.435-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T14:19:01.441-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 14:19:00.442 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:19:01.433-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:19:01.435-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T14:19:01.441-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:19:00.444 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:19:00.445 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 14:19:00.445 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), 

2017-06-152 14:19:00.446 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 14:19:00.446 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_2475774596,_1080456096)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_892942664,_2234778264,_1080456096,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2475774596,_2234778264)), 

2017-06-152 14:19:00.446 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_892942664,_2234778264,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2234778264)))
2017-06-152 14:19:00.446 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_892942664,_2234778264,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2234778264)), 

2017-06-152 14:19:00.447 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:19:00.447 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2636662216,_4003520190,_313477466,_933931348)), :(_2636662216,advertise(_4003520190,_313477466,_933931348)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2636662216,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4003520190,_3916672108)), 

2017-06-152 14:19:00.448 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_892942664,advertise(_2234778264,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_892942664,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2234778264,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2234778264)))
2017-06-152 14:19:00.448 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_892942664,advertise(_2234778264,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_892942664,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2234778264,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2234778264)), 

2017-06-152 14:19:00.448 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:19:00.449 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:19:00.449 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_892942664; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.449 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_892942664; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.449 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2234778264; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.449 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2234778264; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.450 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.450 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.450 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:19:00.450 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_13560530,_1766037000)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_13560530,_1766037000)), 

2017-06-152 14:19:00.450 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.451 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.451 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 14:19:00.451 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_180441724,_2124779396)), :(_155869944,allocate(_180441724,_2124779396)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_155869944,_2110539278)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2124779396,_2110539278)), 

2017-06-152 14:19:00.451 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_155869944,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_155869944,_2110539278)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3916672108,_2110539278)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:19:00.451 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:19:00.451 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:19:00.452 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:19:00.452 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_892942664; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.452 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_892942664; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.452 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2234778264; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.452 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2234778264; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.453 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:19:00.454 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:19:00.454 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]; that.getClass=class prolog.terms.Cons
2017-06-152 14:19:00.454 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]; that.getClass=class prolog.terms.Cons
2017-06-152 14:19:00.454 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:19:00.454 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_892942664,advertise(_2234778264,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_892942664,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2234778264,_3916672108)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2234778264)), 

2017-06-152 14:19:00.455 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:19:00.455 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:19:00.455 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_892942664; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.455 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_892942664; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.455 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2234778264; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.455 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2234778264; that.getClass=class prolog.terms.Var
2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_892942664,_2234778264,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2234778264)), 

2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2107541880,_773181664,_1947347576,_1794240194)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3803013036|_1656685000]=_1947347576), :(_2107541880,advertise(_773181664,_1947347576,_1794240194)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2266736140,_1652150226,_1656685000,_2107541880)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_773181664,_1652150226)), 

2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3803013036|_1656685000]=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), :(_892942664,advertise(_2234778264,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2266736140,_1652150226,_1656685000,_892942664)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2234778264,_1652150226)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2234778264)))
2017-06-152 14:19:00.456 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3803013036|_1656685000]; that.getClass=class prolog.terms.Cons
2017-06-152 14:19:00.457 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[_3803013036|_1656685000]; that.getClass=class prolog.terms.Cons
2017-06-152 14:19:00.457 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3803013036|_1656685000]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:19:00.457 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[_3803013036|_1656685000]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:19:00.457 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 14:19:00.457 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 14:19:00.457 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[3]=>_2234778264
[2]=>_892942664
[1]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[0]=>ipv4"192.168.19.2/24"

2017-06-152 14:19:00.457 [ForkJoinPool-3-worker-7] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 14:19:00.458 [ForkJoinPool-3-worker-7] [1;31mERROR[0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mRetry failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))
2017-06-152 14:23:09.573 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 1)
2017-06-152 14:23:09.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:23:09.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:23:09.574 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')?)
2017-06-152 14:23:09.575 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(defpost(postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]))
2017-06-152 14:23:09.577 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"), defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token_1,ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:23:09.577 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DstIP($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.19.2/24"(set29)'; FreshGoals: List()
2017-06-152 14:23:09.577 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4'; FreshGoals: List()
2017-06-152 14:23:09.578 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4' := label("Token for IP allocation/?DstIP($SetVersion)"); FreshGoals: List(defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:23:09.579 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:23:09.579-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.579 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.422-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.580 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); solution(goals.head): defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); FreshGoals: List()
2017-06-152 14:23:09.587 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8:
2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
J1bXGdNmJcxwtW2TObiorzUoUyYk58XxDAtwAry4GGfWrO9PS9qWlZjlVjr75F7m15HKFtpbCfC2MWiFalENHe0c8AdHCUJSojng6NP7gIXBpqgLnTwBWGuNpFTDBDTboeOOBd7O5AXcqJcoXFK9kuIALH7Jz7u_Hj0dNKnaLUlmU8ttVTw9gCoL4X5oIMYpNPy78A75v5VpDS3cmVtiImqcTET2Tg0CFaXkJgZKl_60aRQ5lWMOyQnUKpGSVi24439eoJhYgaiMIztS9wv8PYozbXA06dOJtzruEIuitrNjknRJ8RORaWLC1j5FFNyi75Vpk3-S1i4mhkcFRrFqnA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:23:09.580-04:00, 2020-06-01T14:23:09.580-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 14:23:09.587 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 14:23:09.587 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
J1bXGdNmJcxwtW2TObiorzUoUyYk58XxDAtwAry4GGfWrO9PS9qWlZjlVjr75F7m15HKFtpbCfC2MWiFalENHe0c8AdHCUJSojng6NP7gIXBpqgLnTwBWGuNpFTDBDTboeOOBd7O5AXcqJcoXFK9kuIALH7Jz7u_Hj0dNKnaLUlmU8ttVTw9gCoL4X5oIMYpNPy78A75v5VpDS3cmVtiImqcTET2Tg0CFaXkJgZKl_60aRQ5lWMOyQnUKpGSVi24439eoJhYgaiMIztS9wv8PYozbXA06dOJtzruEIuitrNjknRJ8RORaWLC1j5FFNyi75Vpk3-S1i4mhkcFRrFqnA
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:23:09.580-04:00, 2020-06-01T14:23:09.580-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 14:23:09.593 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) is posted (code: 204)
2017-06-152 14:23:09.593 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]); solution(goals.head): ['2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8']; FreshGoals: List()
2017-06-152 14:23:09.683 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:23:09.683 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.683 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.683 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:23:09.684 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:23:09.684 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:23:09.685 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 14:23:09.686 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:23:09.687 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:23:09.688 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:23:09.687-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.688 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.982-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.688 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:23:09.697 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw:
Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
npqxbsT5pUDrkRo_atmAQdKq3rB3Xr_bHC3kb0uE6txrexa1tO11m-c_hpFNq_6aem1hWDQPbC0NDJVdpZBaUBk5o2mvgpMPaywwDHchNNOLvWWf2edzoZKhzpkqr76Zs8fUSq2YJjb2xZ4wSq5VfaSd4gJhI3v-r6Hk72lc9zPlUqj9RQXyMhkIbdEJGHkGsFXkdsVCxnZ-kWZStgFhg17uyPdUuxK0pXk720wc_3EiL-jlqaEjLCWsQmuKf-4G6OlYdsrcmoooH70zfoZnP37xMn9dkAjv_cQRZ4Xj_K-EZyl90_tkXSYoFzRY6kfTvdhOfLlUX7wIRsJc7pFA9w
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:23:09.689-04:00, 2020-06-01T14:23:09.689-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 14:23:09.697 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 14:23:09.697 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
npqxbsT5pUDrkRo_atmAQdKq3rB3Xr_bHC3kb0uE6txrexa1tO11m-c_hpFNq_6aem1hWDQPbC0NDJVdpZBaUBk5o2mvgpMPaywwDHchNNOLvWWf2edzoZKhzpkqr76Zs8fUSq2YJjb2xZ4wSq5VfaSd4gJhI3v-r6Hk72lc9zPlUqj9RQXyMhkIbdEJGHkGsFXkdsVCxnZ-kWZStgFhg17uyPdUuxK0pXk720wc_3EiL-jlqaEjLCWsQmuKf-4G6OlYdsrcmoooH70zfoZnP37xMn9dkAjv_cQRZ4Xj_K-EZyl90_tkXSYoFzRY6kfTvdhOfLlUX7wIRsJc7pFA9w
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:23:09.689-04:00, 2020-06-01T14:23:09.689-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 14:23:09.702 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) is posted (code: 204)
2017-06-152 14:23:09.702 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw']; FreshGoals: List()
2017-06-152 14:23:09.720 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:23:09.720 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.720 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.720 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:23:09.721 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:23:09.721 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:23:09.724 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.724 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:23:09.724 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg'; FreshGoals: List()
2017-06-152 14:23:09.725 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg',?PathToken_1,ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.725 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:23:09.726 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 14:23:09.726 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.727 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:23:09.727 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg'; FreshGoals: List()
2017-06-152 14:23:09.727 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.728 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))
2017-06-152 14:23:09.728 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:52:40.496-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:52:40.497-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:52:40.503-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:23:09.729 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:23:09.730 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.730 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.730 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218)), 

2017-06-152 14:23:09.730 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_1211300538,_1525084504)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1190656992,_472256288,_1525084504,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1211300538,_472256288)), 

2017-06-152 14:23:09.730 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1190656992,_472256288,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_472256288)))
2017-06-152 14:23:09.730 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1190656992,_472256288,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_472256288)), 

2017-06-152 14:23:09.730 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3273572660,_2938078270,_1473143494,_2059221008)), :(_3273572660,advertise(_2938078270,_1473143494,_2059221008)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3273572660,_1335845138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2938078270,_1335845138)), 

2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1190656992,advertise(_472256288,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1190656992,_1335845138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_472256288,_1335845138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_472256288)))
2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1190656992,advertise(_472256288,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1190656992,_1335845138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_472256288,_1335845138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_472256288)), 

2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1190656992; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1190656992; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.731 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_472256288; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_472256288; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1190656992,_472256288,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_472256288)), 

2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496)), 

2017-06-152 14:23:09.732 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_502399658,_957254528,_2866825480,_532888246)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_2477370550|_3736496072]=_2866825480), :(_502399658,advertise(_957254528,_2866825480,_532888246)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2008472862,_1889955796,_3736496072,_502399658)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_957254528,_1889955796)), 

2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_2477370550|_3736496072]=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]), :(_1190656992,advertise(_472256288,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2008472862,_1889955796,_3736496072,_1190656992)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_472256288,_1889955796)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_472256288)))
2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2477370550; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2477370550; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[]; this.getClass=class prolog.terms.Const; that=_3736496072; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[]; this.getClass=class prolog.terms.Const; that=_3736496072; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1190656992,advertise(_472256288,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2008472862,_1889955796,[],_1190656992)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_472256288,_1889955796)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_472256288)), 

2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.733 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1190656992; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1190656992; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_472256288; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_472256288; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.734 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 14:23:09.735 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])))
2017-06-152 14:23:09.735 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [7]=>[]
[6]=>iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
[5]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
[4]=>[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]
[3]=>_472256288
[2]=>_1190656992
[1]=>[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]
[0]=>ipv4"192.168.19.2/24"

2017-06-152 14:23:09.735 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 14:23:09.735 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T13:52:40.496-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T13:52:40.497-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T13:52:40.503-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:23:09.735 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 14:23:09.736 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 94 fetched (prebuffer 21): Token(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg)
2017-06-152 14:23:09.736 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg): List()
2017-06-152 14:23:09.736 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 14:23:09.736 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) has expired from prefetching cache
2017-06-152 14:23:09.736 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 95 fetched (prebuffer 21): Token(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg)
2017-06-152 14:23:09.736 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg): List()
2017-06-152 14:23:09.737 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 14:23:09.737 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) has expired from prefetching cache
2017-06-152 14:23:09.737 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 96 fetched (prebuffer 21): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:23:09.737 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:23:09.737 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 14:23:09.737 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 14:23:09.738 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) has expired from prefetching cache
2017-06-152 14:23:09.738 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) has expired from prefetching cache
2017-06-152 14:23:09.738 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 97 fetched (prebuffer 19): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:23:09.738 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:23:09.739 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:23:09.739 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 14:23:09.739 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:23:09.739 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) has expired from prefetching cache
2017-06-152 14:23:09.739 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 98 fetched (prebuffer 19): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:23:09.739 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) has expired from prefetching cache
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 99 fetched (prebuffer 19): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) has expired from prefetching cache
2017-06-152 14:23:09.740 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 100 fetched (prebuffer 19): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:23:09.741 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 14:23:09.741 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))
2017-06-152 14:23:09.741 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T14:23:10.736-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T14:23:10.737-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T14:23:10.741-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 14:23:09.742 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T14:23:10.736-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T14:23:10.737-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T14:23:10.741-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:23:09.743 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:23:09.743 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.743 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.743 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218)), 

2017-06-152 14:23:09.743 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_2947854698,_3276876658)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_47071274,_1079334760,_3276876658,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2947854698,_1079334760)), 

2017-06-152 14:23:09.743 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_47071274,_1079334760,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1079334760)))
2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_47071274,_1079334760,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1079334760)), 

2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1247846888,_2111852,_1889519186,_2610630974)), :(_1247846888,advertise(_2111852,_1889519186,_2610630974)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1247846888,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2111852,_3569060932)), 

2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_47071274,advertise(_1079334760,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_47071274,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1079334760,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1079334760)))
2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_47071274,advertise(_1079334760,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_47071274,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1079334760,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1079334760)), 

2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.744 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_47071274; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_47071274; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1079334760; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1079334760; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.745 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_47071274,advertise(_1079334760,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_47071274,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1079334760,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1079334760)), 

2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_47071274; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_47071274; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1079334760; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1079334760; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.746 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086)), 

2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3578864870,_1517471048)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3578864870,_1517471048)), 

2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_3569060932)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.747 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3569060932; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.748 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3569060932; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.748 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.748 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |   answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.748 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 14:23:09.762 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:23:09.762 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.762 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.763 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:23:09.763 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:23:09.763 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:23:09.765 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 14:23:09.784 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:23:09.784 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:23:09.785 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 14:23:09.785 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:23:09.786 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:23:09.786-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw))), Map($PathToken -> Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)))),
links: ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),
speaksForToken: None,
label: Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.786 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.540-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw))), Map($PathToken -> Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)))),
links: ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),
speaksForToken: None,
label: Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.787 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 14:23:09.796 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ:
OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
CZAdI5Jq-3PqhRdALRIXBzDL7EO0lEIR7dkw7h4Q8-ACFoXOGEKUz5BEv4_JO5yIyE7n8jYJqwZfyrIeU1eN3LGHVtcNs6S8iv8w_W1StMFivP8TOvehbuzeed486HoIe5-flLrr6zo6s7SRYZJ5J90VjcSX_XAwkq1NOw7Sc0rAqcu_skZVp-nLDk9NyZ-K0_K4C4AQ1IYZWdgB_FerwU9UeUoVOKHn2N6ZJeNNYeX7t03NajZ2flDrMyazVzrDQG7cOcEydJ2ueTZqjZLQavOpcnhsWjU2W57uv3GAAb0KPuRvagiaL1ATYQqwIP6-lL1llbTiF4jOvVNE9Vjfng
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:23:09.788-04:00, 2020-06-01T14:23:09.788-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 14:23:09.796 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 14:23:09.796 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
CZAdI5Jq-3PqhRdALRIXBzDL7EO0lEIR7dkw7h4Q8-ACFoXOGEKUz5BEv4_JO5yIyE7n8jYJqwZfyrIeU1eN3LGHVtcNs6S8iv8w_W1StMFivP8TOvehbuzeed486HoIe5-flLrr6zo6s7SRYZJ5J90VjcSX_XAwkq1NOw7Sc0rAqcu_skZVp-nLDk9NyZ-K0_K4C4AQ1IYZWdgB_FerwU9UeUoVOKHn2N6ZJeNNYeX7t03NajZ2flDrMyazVzrDQG7cOcEydJ2ueTZqjZLQavOpcnhsWjU2W57uv3GAAb0KPuRvagiaL1ATYQqwIP6-lL1llbTiF4jOvVNE9Vjfng
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:23:09.788-04:00, 2020-06-01T14:23:09.788-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 14:23:09.809 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) is posted (code: 204)
2017-06-152 14:23:09.809 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ']; FreshGoals: List()
2017-06-152 14:23:09.891 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:23:09.892 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.892 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.892 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:23:09.892 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:23:09.892 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:23:09.893 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]))
2017-06-152 14:23:09.894 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:23:09.894 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:23:09.895 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:23:09.894-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ))), Map($Token -> OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)))),
links: ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ),
speaksForToken: None,
label: Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.895 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.772-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ))), Map($Token -> OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)))),
links: ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ),
speaksForToken: None,
label: Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:23:09.895 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:23:09.904 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs:
piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
49aLZiGbR8qowyKVqiol_C9l8EA9l6KW57VjqJ_zMlvlKWlcO5d2xv_25dju-6ViAf-q0cDGeikXVvJ3hKJBx1L2Uf1n0V1eH0blCjnr5VcckhHHTESsl1B7bODEnBM9zOPbD44iTF4bC8fc_6Ivcpto7JZ95hX2AqaEjXPXRZGw7-KU6AWIsILpO9IJz1NvKd6tcms8_CUX_vv8lUw_hcqvbL8nINlwsc0ueSrPuupE9Kp0gRl4ZfBeihpwaPt58H_mJwXa4ypJVWuS-GT0b9tsJcEN48KIcwTNPJdMc5RerUm0kSAlNLCKq-Iwy2GYn-N4AoXNZkQeHaoTOZa1_Q
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:23:09.896-04:00, 2020-06-01T14:23:09.896-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 14:23:09.904 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 14:23:09.904 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
49aLZiGbR8qowyKVqiol_C9l8EA9l6KW57VjqJ_zMlvlKWlcO5d2xv_25dju-6ViAf-q0cDGeikXVvJ3hKJBx1L2Uf1n0V1eH0blCjnr5VcckhHHTESsl1B7bODEnBM9zOPbD44iTF4bC8fc_6Ivcpto7JZ95hX2AqaEjXPXRZGw7-KU6AWIsILpO9IJz1NvKd6tcms8_CUX_vv8lUw_hcqvbL8nINlwsc0ueSrPuupE9Kp0gRl4ZfBeihpwaPt58H_mJwXa4ypJVWuS-GT0b9tsJcEN48KIcwTNPJdMc5RerUm0kSAlNLCKq-Iwy2GYn-N4AoXNZkQeHaoTOZa1_Q
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:23:09.896-04:00, 2020-06-01T14:23:09.896-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 14:23:09.921 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) is posted (code: 204)
2017-06-152 14:23:09.921 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]); solution(goals.head): ['piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs']; FreshGoals: List()
2017-06-152 14:23:09.937 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:23:09.938 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.938 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:09.938 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:23:09.938 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:23:09.938 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:23:09.940 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.940 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:23:09.940 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 14:23:09.941 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.941 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 14:23:09.941 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 14:23:09.942 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.942 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:23:09.942 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 14:23:09.942 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:23:09.943 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))
2017-06-152 14:23:09.944 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:19:01.433-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:19:01.435-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T14:19:01.441-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:23:09.945 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:23:09.945 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.945 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.945 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 14:23:09.945 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_834162276,_4276940464)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1810004466,_1486175050,_4276940464,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_834162276,_1486175050)), 

2017-06-152 14:23:09.945 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1810004466,_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)))
2017-06-152 14:23:09.945 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1810004466,_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)), 

2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2880288082,_850229240,_1274582454,_3141974248)), :(_2880288082,advertise(_850229240,_1274582454,_3141974248)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2880288082,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_850229240,_2106043894)), 

2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1810004466,advertise(_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1810004466,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1486175050,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)))
2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1810004466,advertise(_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1810004466,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1486175050,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)), 

2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.946 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.947 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1810004466,advertise(_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1810004466,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1486175050,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)), 

2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.948 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_617359112,_2853597954)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_617359112,_2853597954)), 

2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_622403408,_1689374232)), :(_536891872,allocate(_622403408,_1689374232)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_536891872,_966236288)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1689374232,_966236288)), 

2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_536891872,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_536891872,_966236288)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2106043894,_966236288)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2106043894)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.949 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.950 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.951 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.951 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1810004466,_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)), 

2017-06-152 14:23:09.951 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 14:23:09.951 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3583624060,_1051858648,_488632254,_2580096772)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2186327394|_754603814]=_488632254), :(_3583624060,advertise(_1051858648,_488632254,_2580096772)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,_754603814,_3583624060)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1051858648,_526106836)), 

2017-06-152 14:23:09.951 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2186327394|_754603814]=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]), :(_1810004466,advertise(_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,_754603814,_1810004466)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1486175050,_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)))
2017-06-152 14:23:09.951 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2186327394; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.951 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2186327394; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=_754603814; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=_754603814; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1810004466,advertise(_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],_1810004466)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1486175050,_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)), 

2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.952 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1810004466,advertise(_1486175050,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],_1810004466)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1486175050,_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_1486175050)), 

2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.953 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_430415352,_3877280396,_4177947576,_949643564)), :(_430415352,advertise(_3877280396,_4177947576,_949643564)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_430415352,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3877280396,_502750106)), 

2017-06-152 14:23:09.954 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3464105752,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3464105752,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.955 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3464105752,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.956 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3464105752,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_502750106)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.957 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.958 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 14:23:09.959 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_789204050,_3835410848,_245587734,_2838494930)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3560595320|_3965037286]=_245587734), :(_789204050,advertise(_3835410848,_245587734,_2838494930)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_4179239828,_773163786,_3965037286,_789204050)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3835410848,_773163786)), 

2017-06-152 14:23:09.959 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3560595320|_3965037286]=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]), :(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_4179239828,_773163786,_3965037286,_3464105752)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_773163786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.959 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3560595320; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.959 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3560595320; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.959 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[]; this.getClass=class prolog.terms.Const; that=_3965037286; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.959 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[]; this.getClass=class prolog.terms.Const; that=_3965037286; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.959 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_4179239828,_773163786,[],_3464105752)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_773163786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.960 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_4179239828,_773163786,[],_3464105752)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_773163786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.961 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_3464105752,advertise(_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_4179239828,_773163786,[],_3464105752)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_526106836,_773163786)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.962 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_3464105752; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_526106836; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.963 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3464105752,_526106836,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_526106836)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1810004466; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1486175050; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.964 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.965 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.965 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.965 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] No solutions are found
2017-06-152 14:23:09.965 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] query: List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])))
2017-06-152 14:23:09.965 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] trail: [7]=>[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]
[6]=>bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
[5]=>weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
[4]=>[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]
[3]=>_1486175050
[2]=>_1810004466
[1]=>[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]
[0]=>ipv4"192.168.19.2/24"

2017-06-152 14:23:09.965 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.LogicEngine solveQuery}[0;39m - [LogicEngine solveQuery] orStack: 
2017-06-152 14:23:09.966 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery failure[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:19:01.433-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:19:01.435-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T14:19:01.441-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:23:09.966 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 14:23:09.966 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) has expired from prefetching cache
2017-06-152 14:23:09.966 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 101 fetched (prebuffer 19): Token(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A)
2017-06-152 14:23:09.966 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A): List()
2017-06-152 14:23:09.967 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 14:23:09.967 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 102 fetched (prebuffer 20): Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic)
2017-06-152 14:23:09.967 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic): List()
2017-06-152 14:23:09.967 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 14:23:09.967 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) has expired from prefetching cache
2017-06-152 14:23:09.968 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 103 fetched (prebuffer 20): Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 14:23:09.968 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs): ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:23:09.968 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:23:09.968 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 14:23:09.968 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 104 fetched (prebuffer 21): Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:23:09.968 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ): ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:23:09.969 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:23:09.969 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 14:23:09.969 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 105 fetched (prebuffer 21): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:23:09.969 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:23:09.969 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:23:09.969 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 14:23:09.970 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 106 fetched (prebuffer 21): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:23:09.970 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:23:09.970 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:23:09.970 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 14:23:09.970 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 107 fetched (prebuffer 21): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:23:09.971 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:23:09.971 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:23:09.971 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 14:23:09.971 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 108 fetched (prebuffer 21): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:23:09.971 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:23:09.971 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:23:09.972 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache refresh}[0;39m - refreshing token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 14:23:09.972 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 109 fetched (prebuffer 21): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:23:09.972 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 14:23:09.973 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))
2017-06-152 14:23:09.973 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:23:10.967-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:23:10.967-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T14:23:10.973-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
[[31mQuery retry[0m]
2017-06-152 14:23:09.974 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - [[31mQuery retry[0m]: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))   
contexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:23:10.967-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:23:10.967-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T14:23:10.973-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:23:09.975 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:23:09.975 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.975 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:09.975 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_701689902,_1771138408)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1103086924,_3262151594,_1771138408,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_701689902,_3262151594)), 

2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1103086924,_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)))
2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1103086924,_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)), 

2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2090709066,_2676320412,_548367236,_1615055120)), :(_2090709066,advertise(_2676320412,_548367236,_1615055120)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2090709066,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2676320412,_4056758962)), 

2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1103086924,advertise(_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1103086924,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3262151594,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)))
2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1103086924,advertise(_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1103086924,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3262151594,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)), 

2017-06-152 14:23:09.976 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.977 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1103086924,advertise(_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1103086924,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3262151594,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)), 

2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.978 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1152937374,_521207238)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1152937374,_521207238)), 

2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 14:23:09.979 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1634049148,_4192535112)), :(_2125886582,allocate(_1634049148,_4192535112)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2125886582,_3889195178)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4192535112,_3889195178)), 

2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_2125886582,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2125886582,_3889195178)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4056758962,_3889195178)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.980 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.981 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.981 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.981 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.981 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.981 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.981 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1103086924,advertise(_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1103086924,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3262151594,_4056758962)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)), 

2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:23:09.982 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:23:09.983 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.983 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1103086924,_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)), 

2017-06-152 14:23:09.983 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 14:23:09.983 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2853932624,_2067607064,_3068522700,_3524545410)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2752198302|_936673768]=_3068522700), :(_2853932624,advertise(_2067607064,_3068522700,_3524545410)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2939049038,_3742782066,_936673768,_2853932624)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2067607064,_3742782066)), 

2017-06-152 14:23:09.983 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_2752198302|_936673768]=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]), :(_1103086924,advertise(_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2939049038,_3742782066,_936673768,_1103086924)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3262151594,_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)))
2017-06-152 14:23:09.983 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2752198302; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.983 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2752198302; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.984 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=_936673768; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.984 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=_936673768; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.984 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1103086924,advertise(_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2939049038,_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],_1103086924)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3262151594,_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)), 

2017-06-152 14:23:09.984 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.984 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.985 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.985 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.985 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.985 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.985 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.985 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.985 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1103086924,advertise(_3262151594,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2939049038,_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],_1103086924)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3262151594,_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3262151594)), 

2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_1103086924; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.986 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3262151594; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.987 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2939049038,_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.991 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2939049038,_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.992 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:23:09.992 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_575942856,_2954636970,_1817030850,_27654906)), :(_575942856,advertise(_2954636970,_1817030850,_27654906)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_575942856,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2954636970,_2197051510)), 

2017-06-152 14:23:09.992 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_2939049038,advertise(_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2939049038,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3742782066,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.992 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2939049038,advertise(_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2939049038,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3742782066,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.992 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.993 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.993 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.993 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.993 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.993 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.993 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.994 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.994 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.994 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.994 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.994 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2939049038,advertise(_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2939049038,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3742782066,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.994 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.995 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:23:09.995 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.995 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.995 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.995 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.996 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:23:09.996 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:23:09.996 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.996 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2939049038,advertise(_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2939049038,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3742782066,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.996 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.996 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.997 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.997 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.997 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.997 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.997 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.997 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:23:09.998 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.998 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:23:09.998 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:23:09.998 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2939049038,advertise(_3742782066,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2939049038,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3742782066,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3742782066)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:09.998 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.998 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:23:09.999 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.999 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2939049038; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.999 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.999 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_3742782066; that.getClass=class prolog.terms.Var
2017-06-152 14:23:09.999 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:09.999 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:10.000 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:23:10.000 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3536609276,_3540389574)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3536609276,_3540389574)), 

2017-06-152 14:23:10.000 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:10.000 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_2197051510)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:23:10.000 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:23:10.000 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:23:10.001 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2197051510; that.getClass=class prolog.terms.Var
2017-06-152 14:23:10.001 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_2197051510; that.getClass=class prolog.terms.Var
2017-06-152 14:23:10.001 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:23:10.001 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |   answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:23:10.002 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 14:23:10.012 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:23:10.013 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:10.013 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:23:10.013 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:23:10.013 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:23:10.013 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:23:10.014 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]))
2017-06-152 14:23:10.016 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:23:10.017 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 14:23:10.017 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 14:23:10.018 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:23:10.019 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
2017-06-152 14:23:10.019 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
2017-06-152 14:23:10.088 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:23:10.089 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:23:10.089 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:23:10.089 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 110 fetched (prebuffer 22): Token(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg)
2017-06-152 14:23:10.089 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg): ArrayBuffer(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 14:23:10.090 [ForkJoinPool-3-worker-11] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 14:23:10.090 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 14:23:10.097 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg:
1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
1jbiL9yLquEWGkAt56tpOMpq76LHxKxLEgaIae2j9tAx-4YNwMcBXbmO7tBuSgoV2d3Y83T1S6WCfBzhiy9L9RwB3v3hydE0uZ1sA7xqSPQm3Du3z3QKGGyghzt5TD02THhXJWH2DnFYxpu-28CpK2DbM5JRUgtxjtrbXOf2esOalMkcld7TmAUnkwb7Gz3wsgkLthgiH7caezjNcTHaNCMdB9-YfqED6XdArXiUzeuTERdcpKaZI1cLVlELSvENR7oYsB0U9ZfLZC4J1iFOf2IElJQfZTc93vOWAbV0aqGGurOry-kvSyksN-nBrLIX40K77fv35hmE-5ejuWcFXA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:23:10.091-04:00, 2020-06-01T14:23:10.091-04:00, PT720H
SHA256withRSA
Advertise/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.19.2/24"/2 (set29)

advertise(ipv4"192.168.19.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs').
2017-06-152 14:23:10.098 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
2017-06-152 14:23:10.098 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
1jbiL9yLquEWGkAt56tpOMpq76LHxKxLEgaIae2j9tAx-4YNwMcBXbmO7tBuSgoV2d3Y83T1S6WCfBzhiy9L9RwB3v3hydE0uZ1sA7xqSPQm3Du3z3QKGGyghzt5TD02THhXJWH2DnFYxpu-28CpK2DbM5JRUgtxjtrbXOf2esOalMkcld7TmAUnkwb7Gz3wsgkLthgiH7caezjNcTHaNCMdB9-YfqED6XdArXiUzeuTERdcpKaZI1cLVlELSvENR7oYsB0U9ZfLZC4J1iFOf2IElJQfZTc93vOWAbV0aqGGurOry-kvSyksN-nBrLIX40K77fv35hmE-5ejuWcFXA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:23:10.091-04:00, 2020-06-01T14:23:10.091-04:00, PT720H
SHA256withRSA
Advertise/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.19.2/24"/2 (set29)

advertise(ipv4"192.168.19.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs').
2017-06-152 14:23:10.159 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg) is posted (code: 204)
2017-06-152 14:23:10.159 [ForkJoinPool-3-worker-9] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]); solution(goals.head): ['1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg']; FreshGoals: List()
2017-06-152 14:28:10.160 [Safelang-akka.actor.default-dispatcher-7] [34mINFO [0;39m [36mLocalActorRef[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - Message [akka.io.Tcp$Close$] from Actor[akka://Safelang/user/IO-HTTP/group-0/1#-243052232] to Actor[akka://Safelang/system/IO-TCP/selectors/$a/1#-1478421111] was not delivered. [2] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
2017-06-152 14:35:55.458 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(as2)
2017-06-152 14:35:55.458 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('as2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:55.458 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:55.458 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:35:55.458 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:35:55.458 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('as2')?)
2017-06-152 14:35:55.459 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('as2'); solution(goals.head): postIdSet('as2'); FreshGoals: List(defpost(postIdSet('as2'), [makeMyIdentitySet('as2')]))
2017-06-152 14:35:55.459 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('as2'); solution(goals.head): makeMyIdentitySet('as2'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:55.459 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:55.460 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:55.460-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,spec(interpolate(argsFun(identity set for ,as2,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB, $CN -> as2)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 14:35:55.460 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: Some(2020-05-29T14:52:54.393-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:52:54.393-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:51:55.152-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,spec(identity set for as2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(iP6kAhF3XdhID8JlEFCfIPxZ7oLuiopL4W2JogvE0POXI8K648U8EHNgr9nTA3OlZNEKAlReg0FlJ8UTJqBtyB5sPkHLHmsWG91QB9YZZk2Tj-grd9A8mVkV_VSMS_rvo7YyqQEjcovmzqSQqEuwBmWnHCrvZF-MXQqTEkZxI6EnFYlFQ2SMKr8Mt27LSSaDDrPw8319TUjAYkyLwM64OYgs4WcWdf6PfbvwQLLyg71oJQ_lA-fP0cTIVVlyPMpP93cgbJqFehH4pgxQ4bJsSexDAtKpJv0AsEPTZ5A71_cX66oum3WhEOVNa9a2lXbjI0WmdSoD8dWzHJ3Q6lCKKw),
setData: None
2017-06-152 14:35:55.461 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('as2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 14:35:55.468 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24:
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
1JcB4dBbxssj9PkaLUhIIxkJlEy0aU2rMBLwjwc2YEU9if1uAOlAz8xozrkFJunvii_RETosfExeTuGydwVmJ-IVtA37C-y0ABjDRL2wlbRNsThY03XoKoQc59LSpkPJWK4a-iS5AZNsDiTevwdbsHviewLPNcgpBIP_3-oD6rqf0ql8QB3yMi9C95qy6ANRAdJ_Lo8oaKDadDZ54Aj6eYE511qCYK9X5ryE02dFtmRIy1_D0GayW-UuJGbp6IN0kmdWN04uam7tUxpjxTnBgzkrUkTANiYAfaGsimZx884ycWFVnl-RnP7LNH2KmRdgxj3PaOvf-gmn1bWVr_ZK9Q
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:55.461-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').
2017-06-152 14:35:55.468 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:35:55.468 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
1JcB4dBbxssj9PkaLUhIIxkJlEy0aU2rMBLwjwc2YEU9if1uAOlAz8xozrkFJunvii_RETosfExeTuGydwVmJ-IVtA37C-y0ABjDRL2wlbRNsThY03XoKoQc59LSpkPJWK4a-iS5AZNsDiTevwdbsHviewLPNcgpBIP_3-oD6rqf0ql8QB3yMi9C95qy6ANRAdJ_Lo8oaKDadDZ54Aj6eYE511qCYK9X5ryE02dFtmRIy1_D0GayW-UuJGbp6IN0kmdWN04uam7tUxpjxTnBgzkrUkTANiYAfaGsimZx884ycWFVnl-RnP7LNH2KmRdgxj3PaOvf-gmn1bWVr_ZK9Q
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:55.461-04:00, 2020-05-29T14:52:54.393-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ETws9p5sS5wTuOmJgiPEfxwZ8aMHxxrpoyBvntJMhuzWKIk8kGNi74uqBSxggwiE2gNwP5jdqbxYsQNawvy7N31RLxeWPt5K8fFp9jsyEhfYMdFwJTRmw4jymRwXiLOp1kMXs6Csy8W5n5IG6FezMgKuY2Wsthee8vx3hcCWLH6B12sfUEo8M8j8kktOktNpdHgKXB777WucHMLaeR_QzTqgJHsdlnKgKiFvzFfcSEpwtouLv5RXBNK6_BaCc_B3oVlskTyTzu_PKMpawZGsZdnBGsNwzxDRkkZuh6h_kQ3rCCboMDKx9XZ7s-Pd5x0OfEXZqFBuWkXbNKHJAWLgQIDAQAB'):-spec('identity set for as2').
2017-06-152 14:35:55.916 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) is posted (code: 204)
2017-06-152 14:35:55.916 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('as2'), [makeMyIdentitySet('as2')]); solution(goals.head): ['weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24']; FreshGoals: List()
2017-06-152 14:35:55.956 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:55.956 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:55.956 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:55.957 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:35:55.957 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:35:55.957 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 14:35:55.957 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 14:35:55.958 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:55.958 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:55.959 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:55.959-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: ArrayBuffer(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:55.959 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:57.797-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:55.960 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 14:35:55.972 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4:
xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
v2iRWub0GSnwGRwo8nFPlmYCFqHsxhfE8UztKtySQbUDiA0FGQ3FfIUaWIJfO1rOPbqS4mJ_NkdNGsIlASvP7nt9yyEW0o4gpioZDVQW84zD8QOy_MzO9rUHUyGHYdGkQmn8KKumkTOs9Jc4cmN2Ng7oERuVgvz27oYA5eXdBi_JfivFuLX69aaXyK71DTpgkSGa_Q4jPVhA_NQHKmhKROIwSiurztxIBAfRvK7lqPvoEwS_ibvwNXIqk6zPsU1pyQqADAiFbrugDpivzQKKeD-mtR8ZeeoTjR89s5wpNXRLV4w4PqjUPijz1gqHRf74TfTqcqmgIws5t_d-_dO54g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:55.960-04:00, 2020-06-01T14:35:55.960-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:35:55.972 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
2017-06-152 14:35:55.972 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
v2iRWub0GSnwGRwo8nFPlmYCFqHsxhfE8UztKtySQbUDiA0FGQ3FfIUaWIJfO1rOPbqS4mJ_NkdNGsIlASvP7nt9yyEW0o4gpioZDVQW84zD8QOy_MzO9rUHUyGHYdGkQmn8KKumkTOs9Jc4cmN2Ng7oERuVgvz27oYA5eXdBi_JfivFuLX69aaXyK71DTpgkSGa_Q4jPVhA_NQHKmhKROIwSiurztxIBAfRvK7lqPvoEwS_ibvwNXIqk6zPsU1pyQqADAiFbrugDpivzQKKeD-mtR8ZeeoTjR89s5wpNXRLV4w4PqjUPijz1gqHRf74TfTqcqmgIws5t_d-_dO54g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:55.960-04:00, 2020-06-01T14:35:55.960-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:35:56.076 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4) is posted (code: 204)
2017-06-152 14:35:56.076 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4']; FreshGoals: List()
2017-06-152 14:35:56.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:56.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:35:56.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:35:56.088 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 14:35:56.088 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 14:35:56.089 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 14:35:56.089 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:56.089-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3779426542,_4081069010)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3779426542,_4081069010))), Map(?Prcpl -> _3779426542, ?Prefix -> _4081069010, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_4277175190,_589687310)), :(_3899483276,allocate(_4277175190,_589687310)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3899483276,_444726504)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_589687310,_444726504))), Map(?Prcpl -> _4277175190, ?Prefix -> _589687310, ?UpStream -> _3899483276, ?PrefixSet -> _444726504)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:56.090 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:58.173-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:56.090 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 14:35:56.102 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A:
GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
hMXs5BWySbezTWldlTRbH5Qg1tBUHInqhNlw_CEqx4DaUPlUW76B39-Ei8Zik3IAUTb6W2r-uRM1dn5uklv4M5tgz07WfqWTxNPB0BOfqmbwDLCHtN9uck4epIong83dKRNN3mVjfp-fBcDKL1R5Cx-bCFSE4d-N_khq79ySDzOhFxLoJ4-oYMJ2NFA5-DUCaLTajv3BXDk8PKfpucO1MIUZqYd1z78Ffdw61M6qQ8k14JUFQInyIPEKmPiIWUe5BQeHc-e7PlIe55WJQAvtU0T30Ub4d2YP2Sje13yJe9oxubB0yEGhHZe4pjqFKTuqNnKfKb5ep2wm-MLndZxr4Q
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:56.091-04:00, 2020-06-01T14:35:56.091-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:56.102 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
2017-06-152 14:35:56.102 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A
hMXs5BWySbezTWldlTRbH5Qg1tBUHInqhNlw_CEqx4DaUPlUW76B39-Ei8Zik3IAUTb6W2r-uRM1dn5uklv4M5tgz07WfqWTxNPB0BOfqmbwDLCHtN9uck4epIong83dKRNN3mVjfp-fBcDKL1R5Cx-bCFSE4d-N_khq79ySDzOhFxLoJ4-oYMJ2NFA5-DUCaLTajv3BXDk8PKfpucO1MIUZqYd1z78Ffdw61M6qQ8k14JUFQInyIPEKmPiIWUe5BQeHc-e7PlIe55WJQAvtU0T30Ub4d2YP2Sje13yJe9oxubB0yEGhHZe4pjqFKTuqNnKfKb5ep2wm-MLndZxr4Q
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:56.091-04:00, 2020-06-01T14:35:56.091-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:56.269 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A) is posted (code: 204)
2017-06-152 14:35:56.269 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A']; FreshGoals: List()
2017-06-152 14:35:56.282 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:56.282 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.282 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.283 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:35:56.283 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:35:56.283 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 14:35:56.284 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 14:35:56.284 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 14:35:56.286 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:56.285-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_588811400,_963734002,_4060218496,_3014973658)), :(_588811400,advertise(_963734002,_4060218496,_3014973658)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_588811400,_1412390632)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_963734002,_1412390632))), Map(?DstIP -> _963734002, ?Path -> _4060218496, ?DstIPSet -> _1412390632, ?Speaker -> _588811400, ?AS -> _3014973658)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3869487974,_73903414,_285276008,_1073091518)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3291844516|_4244808712]=_285276008), :(_3869487974,advertise(_73903414,_285276008,_1073091518)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3937376118,_1699414654,_4244808712,_3869487974)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_73903414,_1699414654))), Map(?DstIP -> _73903414, ?Path -> _285276008, ?DstIPSet -> _1699414654, ?Speaker -> _3869487974, ?AS -> _1073091518, ?Head -> _3291844516, ?Tail -> _4244808712, ?P -> _3937376118))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_225176028,_3835768476)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1931682136,_1313244592,_3835768476,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_225176028,_1313244592))), Map(?DstIP -> _225176028, ?Path -> _3835768476, ?Dst -> _1931682136, ?DstIPSet -> _1313244592, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:56.286 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:58.530-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:56.287 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 14:35:56.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic:
mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
yfSnXiPs7muncUXbOZDkNq-uJAqIa4wgZeDo3TDm0BhhwyN0_Yz083t3eY-yPisOatlW6pb_S_uf3U82YuRtC5aKEsjLA6TiuhmXeGaR9-jxAIS6k5oeRRigr_uVXV8x3Vwu4RX7NrqJQ-YLyRztVf3KRfKlfQrKyaUsaRrknD6GNCzio0-C-AD4YxUnnLOaYSnqJ6ccfCNlKcIbU3N6MeIpp9wVv3MTlUgcpSG3XCZInVny8wxpsQNr2hQI3ZZAV8_wvzXGjWoN809rKnwvyrfTCYc8tZKQxrZVHfQ7WZkpXffAKQB64WBP3RWjwZX_iBIRZr9dxGJzy_UAa9AyMA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:56.288-04:00, 2020-06-01T14:35:56.288-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),?DstIP<:?DstIPSet.
2017-06-152 14:35:56.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
2017-06-152 14:35:56.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic
yfSnXiPs7muncUXbOZDkNq-uJAqIa4wgZeDo3TDm0BhhwyN0_Yz083t3eY-yPisOatlW6pb_S_uf3U82YuRtC5aKEsjLA6TiuhmXeGaR9-jxAIS6k5oeRRigr_uVXV8x3Vwu4RX7NrqJQ-YLyRztVf3KRfKlfQrKyaUsaRrknD6GNCzio0-C-AD4YxUnnLOaYSnqJ6ccfCNlKcIbU3N6MeIpp9wVv3MTlUgcpSG3XCZInVny8wxpsQNr2hQI3ZZAV8_wvzXGjWoN809rKnwvyrfTCYc8tZKQxrZVHfQ7WZkpXffAKQB64WBP3RWjwZX_iBIRZr9dxGJzy_UAa9AyMA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:56.288-04:00, 2020-06-01T14:35:56.288-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),?DstIP<:?DstIPSet.
2017-06-152 14:35:56.437 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) is posted (code: 204)
2017-06-152 14:35:56.438 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic']; FreshGoals: List()
2017-06-152 14:35:56.446 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:56.446 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.446 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.447 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:35:56.447 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:35:56.447 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 14:35:56.447 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 14:35:56.448 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:56.448 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:56.449 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:56.449-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,allowStitch(_1912601466,_3431491140,_75304026,_1032199450,_2989241850)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,endorsePA(_1008328636)), :(_1008328636,endorse(_1912601466)), :(_1912601466,stitch(_3431491140,_75304026,_1032199450,_2989241850))), Map(?Bob -> _1912601466, ?BobSlice -> _3431491140, ?ReservID -> _75304026, ?Slice -> _1032199450, ?Node -> _2989241850, ?PA -> _1008328636)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:56.449 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:58.921-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,allowStitch(_3505011640,_3700007538,_249159676,_4258211236,_2088367710)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,endorsePA(_3983692176)), :(_3983692176,endorse(_3505011640)), :(_3505011640,stitch(_3700007538,_249159676,_4258211236,_2088367710))), Map(?Bob -> _3505011640, ?BobSlice -> _3700007538, ?ReservID -> _249159676, ?Slice -> _4258211236, ?Node -> _2088367710, ?PA -> _3983692176)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:56.450 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 14:35:56.466 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM:
oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
36XKYCCvWuNHy6SG7uISFJ_p6sRA18drlQYPvN_a0I0zePRjj60ILMSPuRnr23hXxXdYv8ZoE-wfN-n8ZU-p5TSoMFw-X8FcrEjcGJLiD2i-0JCani5dvcF2s_C2O6a3LrHRfM4GIU5i7Ek7_AMzrjsRZENcpdJXaXlcd71EfQ744SQOK_vWPyHCdAr4fWboyFiCyRNwK7hAPFVQVgEuSPnJ5xZ8Q1Gi6GVIzaWXHOW5zmEuUJ0zfzxle2_rS41LO1FAMD8WzAmg2GiKiEzbQiJYUCs0ENe6v_XPfzH00KsPWZHtdYloRZmelud0N0pn21EdE2hFbLByidnF0Z4pMA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:56.451-04:00, 2020-06-01T14:35:56.451-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:56.466 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
2017-06-152 14:35:56.467 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM
36XKYCCvWuNHy6SG7uISFJ_p6sRA18drlQYPvN_a0I0zePRjj60ILMSPuRnr23hXxXdYv8ZoE-wfN-n8ZU-p5TSoMFw-X8FcrEjcGJLiD2i-0JCani5dvcF2s_C2O6a3LrHRfM4GIU5i7Ek7_AMzrjsRZENcpdJXaXlcd71EfQ744SQOK_vWPyHCdAr4fWboyFiCyRNwK7hAPFVQVgEuSPnJ5xZ8Q1Gi6GVIzaWXHOW5zmEuUJ0zfzxle2_rS41LO1FAMD8WzAmg2GiKiEzbQiJYUCs0ENe6v_XPfzH00KsPWZHtdYloRZmelud0N0pn21EdE2hFbLByidnF0Z4pMA
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:35:56.451-04:00, 2020-06-01T14:35:56.451-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:56.639 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM) is posted (code: 204)
2017-06-152 14:35:56.640 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['oK2tOEDKPzhCO_ggsgRTljBwhv9dk6iWQViqi8FSLFM']; FreshGoals: List()
2017-06-152 14:35:56.662 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(pa)
2017-06-152 14:35:56.662 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('pa')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.663 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.663 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:35:56.663 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:35:56.663 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('pa')?)
2017-06-152 14:35:56.664 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('pa'); solution(goals.head): postIdSet('pa'); FreshGoals: List(defpost(postIdSet('pa'), [makeMyIdentitySet('pa')]))
2017-06-152 14:35:56.665 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('pa'); solution(goals.head): makeMyIdentitySet('pa'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:56.666 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:56.667 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:56.666-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,spec(interpolate(argsFun(identity set for ,pa,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB, $CN -> pa)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 14:35:56.667 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: Some(2020-05-28T18:50:05.724-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-28T18:50:05.724-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:51:59.487-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,spec(identity set for pa))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(HhUtb7X2EWJONbQ5E1yzKyA2LTrMCW5RZQf7nT7YbIZY0vLCYnd_QIPcgw8-dQiROxkCUqQG2BJN7t182H0w4qzdxC10ok3Twtrm6wohb5V4MkIxYlWiKLaIHPT1AeFFq5Nc7Ojr0ZJKKwZ7zhAFGXH430TzQVrgBp2t7vUpqw7B-_HEGiZXts_5_WAKV3ta9AUZ-ve2uvMJu-5eNvCqbhAdi4hL40LPfLtHLZbuWMRlhilw6lRAogGXU5gDJi1TKbNXtqBbb-dzu9uT32BY8umWDuW9ZpTKGPkcVDXZJSZ7g7KR2u4MGbhTVuaD3bXDMY3m_pwo4F_apmonpewbdQ),
setData: None
2017-06-152 14:35:56.668 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('pa'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'pa',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 14:35:56.692 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc:
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
XeTEiecr96JxsGYjKCWA3tBE1Gsctl8tXhCI_7Bll9ZFNd63lH9D_VRVH9x-kBHgW1tTb0B7GU4mOcn1yKAEz_9brYX017sHbIqw92jPfrDLGvFOwH-7YlvNdC2SyTz2J2KNeYIG_nsR9h6GqVxBaLv_OquYSI73IEKlsB4sOF1rAPuzfoTw82tBYrXqpY-wO9xd6wmTfNqRoRUdGwpBLx8sYJLziqp53fOR42X1h1Mti_ifm-qxLYNoZ0T6chsQgb-W6QkUWWwgzQCRnAIp2NbgSX5KA-kJAWzMMsWeSNIq0Oi3RzGsF9-TPxOpcUgLkk-tavYili4jIlpRO3pXLw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:56.669-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').
2017-06-152 14:35:56.693 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:35:56.693 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
XeTEiecr96JxsGYjKCWA3tBE1Gsctl8tXhCI_7Bll9ZFNd63lH9D_VRVH9x-kBHgW1tTb0B7GU4mOcn1yKAEz_9brYX017sHbIqw92jPfrDLGvFOwH-7YlvNdC2SyTz2J2KNeYIG_nsR9h6GqVxBaLv_OquYSI73IEKlsB4sOF1rAPuzfoTw82tBYrXqpY-wO9xd6wmTfNqRoRUdGwpBLx8sYJLziqp53fOR42X1h1Mti_ifm-qxLYNoZ0T6chsQgb-W6QkUWWwgzQCRnAIp2NbgSX5KA-kJAWzMMsWeSNIq0Oi3RzGsF9-TPxOpcUgLkk-tavYili4jIlpRO3pXLw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:56.669-04:00, 2020-05-28T18:50:05.724-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDcNsdaMrpNDYQ4AUpbDPg0eRVw-6X_11sGvHpZtAClOeJGbsTDvcaR9aLo2sBSA0mScGapvwF_myg7K97AM0q5gc3GizrCgNpFKjaDEdu1LdwQtTfw6Iu2usHFxDtPy7EpM5o6xLrE-sImVC2moHoP6ztb2pgqFeARVQEZe-Nn-ZIiO9HgAKcvTyVmaCSd7Mj5uroPaF7LSl7xejHs8gS1KHSsNvyMcSW8YQaiPt1Kbv55gXLIBFmd7r2-ggqEfBRkjyii8HcjMGro7ydrunGWQuM5R9Dl2m2bdEuOecgnq96LC5RLR5KWCuCU830jO3uFSveXL7hJBAt9WnT6spQIDAQAB'):-spec('identity set for pa').
2017-06-152 14:35:56.794 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) is posted (code: 204)
2017-06-152 14:35:56.794 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('pa'), [makeMyIdentitySet('pa')]); solution(goals.head): ['KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc']; FreshGoals: List()
2017-06-152 14:35:56.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:56.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:56.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:35:56.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:35:56.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 14:35:56.805 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 14:35:56.805 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:56.806 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:56.807 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:56.806-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,link(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($Self -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: ArrayBuffer(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:56.807 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:59.616-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,link(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($Self -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: ArrayBuffer(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:56.809 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 14:35:56.820 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ:
eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
ceXdTngfa84ZK_lqmMDQBkYSGr6x_Pqu2990WGk3cMzZpXkUg6CbJRX7yrXfGENNGjty79qh12sf2pd3XT85lYzwYcYSNPvBHeXDysseF6CR9shguWd7Gmsim68HWlP_1jR6sIOxSg7LxB2NELBmhMdzCclv0QxWWZAw0Sa5ylZ-1VELoQOrbQUUDHRhRMQ6kAWBXyvEbKCJ1CXhawAo2WYTstdgP5JxqASgEm31h-vV1lpMjBAzG2zx_uUCwDqlUbjqLnfFamv1VnL6OvD94u93iGgMhRsSyku-CLU0OBqX8qOoQ9v6k5stDrQ69lR-td0uAyalm4RzOreCS8IA7Q
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:56.810-04:00, 2020-06-01T14:35:56.810-04:00, PT720H
SHA256withRSA
subject(set29)

link('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:35:56.820 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
2017-06-152 14:35:56.821 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ
ceXdTngfa84ZK_lqmMDQBkYSGr6x_Pqu2990WGk3cMzZpXkUg6CbJRX7yrXfGENNGjty79qh12sf2pd3XT85lYzwYcYSNPvBHeXDysseF6CR9shguWd7Gmsim68HWlP_1jR6sIOxSg7LxB2NELBmhMdzCclv0QxWWZAw0Sa5ylZ-1VELoQOrbQUUDHRhRMQ6kAWBXyvEbKCJ1CXhawAo2WYTstdgP5JxqASgEm31h-vV1lpMjBAzG2zx_uUCwDqlUbjqLnfFamv1VnL6OvD94u93iGgMhRsSyku-CLU0OBqX8qOoQ9v6k5stDrQ69lR-td0uAyalm4RzOreCS8IA7Q
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:56.810-04:00, 2020-06-01T14:35:56.810-04:00, PT720H
SHA256withRSA
subject(set29)

link('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:35:57.196 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ) is posted (code: 204)
2017-06-152 14:35:57.197 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ']; FreshGoals: List()
2017-06-152 14:35:57.205 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:57.206 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.206 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.206 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:35:57.206 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:35:57.207 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 14:35:57.207 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 14:35:57.208 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 14:35:57.210 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:57.209-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_1343802742,_1436455336)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1343802742,_1436455336))), Map(?Prcpl -> _1343802742, ?Prefix -> _1436455336, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_1290259298,_465700586)), :(_2351369112,allocate(_1290259298,_465700586)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_2351369112,_764803172)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_465700586,_764803172))), Map(?Prcpl -> _1290259298, ?Prefix -> _465700586, ?UpStream -> _2351369112, ?PrefixSet -> _764803172)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:57.210 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:59.922-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_1583069806,_1436881432)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1583069806,_1436881432))), Map(?Prcpl -> _1583069806, ?Prefix -> _1436881432, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_3781863678,_1656633966)), :(_3786757276,allocate(_3781863678,_1656633966)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_3786757276,_2650640224)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_1656633966,_2650640224))), Map(?Prcpl -> _3781863678, ?Prefix -> _1656633966, ?UpStream -> _3786757276, ?PrefixSet -> _2650640224)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:57.211 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 14:35:57.233 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18:
je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
hyMAGFwEqLzv0RK7vZAlqKckiGyeMDyRHinUIpwssT3Gutjgt3mcWuz3ludLbdmwWsTQCYO0r9tROoZvT5LTbbOSnxdJp4Kdwy0WmwSUiewdQUTMioXCqbTGkKAmPqh_M--CVuS6flX602rY4axVSbSFT7LIXIJprbZpaj_2-XnuhV-SfVVS3zf4G2xFnPqyZO0scRClRoyqmvsxUZV8Fril0P6nGUB-miDbb8V-WOeNqv8KgKl1rPck9Gh9NgPUcef0QBOoAjXoCKuAHYVeohOCDbLWUBAfdx1v0JQxs6Onrre3Y6LS-yAsmp-P5R6ApJaYqJLXn-EIcKunAkC7HQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:57.213-04:00, 2020-06-01T14:35:57.213-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:57.234 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
2017-06-152 14:35:57.234 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18
hyMAGFwEqLzv0RK7vZAlqKckiGyeMDyRHinUIpwssT3Gutjgt3mcWuz3ludLbdmwWsTQCYO0r9tROoZvT5LTbbOSnxdJp4Kdwy0WmwSUiewdQUTMioXCqbTGkKAmPqh_M--CVuS6flX602rY4axVSbSFT7LIXIJprbZpaj_2-XnuhV-SfVVS3zf4G2xFnPqyZO0scRClRoyqmvsxUZV8Fril0P6nGUB-miDbb8V-WOeNqv8KgKl1rPck9Gh9NgPUcef0QBOoAjXoCKuAHYVeohOCDbLWUBAfdx1v0JQxs6Onrre3Y6LS-yAsmp-P5R6ApJaYqJLXn-EIcKunAkC7HQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:57.213-04:00, 2020-06-01T14:35:57.213-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:57.416 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18) is posted (code: 204)
2017-06-152 14:35:57.416 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18']; FreshGoals: List()
2017-06-152 14:35:57.425 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:57.425 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.425 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.425 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:35:57.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:35:57.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 14:35:57.426 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 14:35:57.427 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 14:35:57.428 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:57.428-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_2400671914,_3803964018,_272695046,_725226332)), :(_2400671914,advertise(_3803964018,_272695046,_725226332)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_2400671914,_517860504)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_3803964018,_517860504))), Map(?DstIP -> _3803964018, ?Path -> _272695046, ?DstIPSet -> _517860504, ?Speaker -> _2400671914, ?AS -> _725226332)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_591926594,_887572194,_3485217744,_1072996242)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,[_1567981354|_1403769392]=_3485217744), :(_591926594,advertise(_887572194,_3485217744,_1072996242)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_2108123430,_3878961422,_1403769392,_591926594)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_887572194,_3878961422))), Map(?DstIP -> _887572194, ?Path -> _3485217744, ?DstIPSet -> _3878961422, ?Speaker -> _591926594, ?AS -> _1072996242, ?Head -> _1567981354, ?Tail -> _1403769392, ?P -> _2108123430))), StrLit(route2) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,route(_290389740,_477729958)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_1523654742,_514336306,_477729958,KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_290389740,_514336306))), Map(?DstIP -> _290389740, ?Path -> _477729958, ?Dst -> _1523654742, ?DstIPSet -> _514336306, $Self -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:57.428 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:00.140-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_2021073556,_2843440536,_2054890352,_633144250)), :(_2021073556,advertise(_2843440536,_2054890352,_633144250)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,ownPrefix(_2021073556,_3827295770)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_2843440536,_3827295770))), Map(?DstIP -> _2843440536, ?Path -> _2054890352, ?DstIPSet -> _3827295770, ?Speaker -> _2021073556, ?AS -> _633144250)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_2545588404,_897149328,_4178844758,_3793762904)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,[_2702983568|_1591192010]=_4178844758), :(_2545588404,advertise(_897149328,_4178844758,_3793762904)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_108591338,_3848917126,_1591192010,_2545588404)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_897149328,_3848917126))), Map(?DstIP -> _897149328, ?Path -> _4178844758, ?DstIPSet -> _3848917126, ?Speaker -> _2545588404, ?AS -> _3793762904, ?Head -> _2702983568, ?Tail -> _1591192010, ?P -> _108591338))), StrLit(route2) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,route(_2805611898,_1145063854)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,authorizedAdvertise(_2235455076,_779635620,_1145063854,KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,isInRange(_2805611898,_779635620))), Map(?DstIP -> _2805611898, ?Path -> _1145063854, ?Dst -> _2235455076, ?DstIPSet -> _779635620, $Self -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:57.429 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 14:35:57.441 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY:
ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
OSLxzGE1naZXIKSgE0rZKzFUh75UnGXVLtIAxYqilLA0ZimC8Hfbopcvx3INOiLD1IftTHMEhMHoqruqFaapTQ1mPf5RUBOsmlTLpBWA30X39gYbN00wLvQQU7cjmK1h6KPDjqpX97DAmvhbaZaJQYUTmkwnAoxkNCTMSNEGDgFbSHyurpnSdgdG2SidHz08Tj5nIhmgNFeVZaRrt-e6p9dEc7Lt0Yi2Kib8w9rJGiJEEuy0VbH9c3z0vpu9wlX9IpTYc9fobs_EjV5lQd1Tcm2LWN3LiSyQ9HR4YsYkUv0Ebe2mx1NQ6BXzyAk--XiwqnE5ddTstFDmo3juBCezsQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:57.430-04:00, 2020-06-01T14:35:57.430-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'),?DstIP<:?DstIPSet.
2017-06-152 14:35:57.441 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
2017-06-152 14:35:57.441 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY
OSLxzGE1naZXIKSgE0rZKzFUh75UnGXVLtIAxYqilLA0ZimC8Hfbopcvx3INOiLD1IftTHMEhMHoqruqFaapTQ1mPf5RUBOsmlTLpBWA30X39gYbN00wLvQQU7cjmK1h6KPDjqpX97DAmvhbaZaJQYUTmkwnAoxkNCTMSNEGDgFbSHyurpnSdgdG2SidHz08Tj5nIhmgNFeVZaRrt-e6p9dEc7Lt0Yi2Kib8w9rJGiJEEuy0VbH9c3z0vpu9wlX9IpTYc9fobs_EjV5lQd1Tcm2LWN3LiSyQ9HR4YsYkUv0Ebe2mx1NQ6BXzyAk--XiwqnE5ddTstFDmo3juBCezsQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:57.430-04:00, 2020-06-01T14:35:57.430-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'),?DstIP<:?DstIPSet.
2017-06-152 14:35:57.791 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY) is posted (code: 204)
2017-06-152 14:35:57.791 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY']; FreshGoals: List()
2017-06-152 14:35:57.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:57.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:35:57.803 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:35:57.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 14:35:57.804 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 14:35:57.805 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:57.805 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:57.806 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:57.806-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,allowStitch(_659365032,_2584677372,_2278608440,_1014935030,_1939431052)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorsePA(_2418797544)), :(_2418797544,endorse(_659365032)), :(_659365032,stitch(_2584677372,_2278608440,_1014935030,_1939431052))), Map(?Bob -> _659365032, ?BobSlice -> _2584677372, ?ReservID -> _2278608440, ?Slice -> _1014935030, ?Node -> _1939431052, ?PA -> _2418797544)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:57.806 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:00.454-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,allowStitch(_2441836250,_1498630144,_3766947992,_792515530,_3838528848)), :(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorsePA(_656091776)), :(_656091776,endorse(_2441836250)), :(_2441836250,stitch(_1498630144,_3766947992,_792515530,_3838528848))), Map(?Bob -> _2441836250, ?BobSlice -> _1498630144, ?ReservID -> _3766947992, ?Slice -> _792515530, ?Node -> _3838528848, ?PA -> _656091776)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:57.807 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 14:35:57.821 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY:
TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
Vb5Y4gakO3HZqXWFkFpRusngX6lxAN_RcQyZq3Ainss5FJpguH01cfIoVgiL56ih0WLyYSQzJUG8tn2xMIyp1i4fGIWn1-AapYgnAMaqXaNPsDQxWSw9n-RuEBSTd8dsxx0s2EZLMK4yYB23lo8lB931EE4MgoDReKbzJjOSBz1Sj_xbv5A7e5jdTQ9i7KNtJUFhRiG-WB3F5eOopmECwbQJ3S_kwsSQh1BH3tNgHIoMdkORu40i_5lrMuDIwNVx1GzAH19nGwMPV9kYCovBor6nOFFUX9e8J_fL_BczqKJ2ozQifl6-UWM-HkOaXTan4EbeoMwoIco8EnKv7y4Eqw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:57.808-04:00, 2020-06-01T14:35:57.808-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:57.822 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
2017-06-152 14:35:57.822 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY
Vb5Y4gakO3HZqXWFkFpRusngX6lxAN_RcQyZq3Ainss5FJpguH01cfIoVgiL56ih0WLyYSQzJUG8tn2xMIyp1i4fGIWn1-AapYgnAMaqXaNPsDQxWSw9n-RuEBSTd8dsxx0s2EZLMK4yYB23lo8lB931EE4MgoDReKbzJjOSBz1Sj_xbv5A7e5jdTQ9i7KNtJUFhRiG-WB3F5eOopmECwbQJ3S_kwsSQh1BH3tNgHIoMdkORu40i_5lrMuDIwNVx1GzAH19nGwMPV9kYCovBor6nOFFUX9e8J_fL_BczqKJ2ozQifl6-UWM-HkOaXTan4EbeoMwoIco8EnKv7y4Eqw
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:35:57.808-04:00, 2020-06-01T14:35:57.808-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:57.950 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY) is posted (code: 204)
2017-06-152 14:35:57.950 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['TJ1QeBE13yEjK4TQU553Surpl-I7TZ0chKFGcV6cTWY']; FreshGoals: List()
2017-06-152 14:35:57.961 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(client2)
2017-06-152 14:35:57.961 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('client2')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.961 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:57.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:35:57.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:35:57.962 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('client2')?)
2017-06-152 14:35:57.963 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('client2'); solution(goals.head): postIdSet('client2'); FreshGoals: List(defpost(postIdSet('client2'), [makeMyIdentitySet('client2')]))
2017-06-152 14:35:57.964 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('client2'); solution(goals.head): makeMyIdentitySet('client2'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:57.964 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:57.965 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:57.965-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,spec(interpolate(argsFun(identity set for ,client2,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB, $CN -> client2)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 14:35:57.966 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: Some(2020-05-29T14:52:59.138-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:52:59.138-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:00.774-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,spec(identity set for client2))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(MaAwiQTG1N01zJ6_TE75y24jOVFtokG_8oyDdZkuZ8dF7UnIYbf6p56_Ccggh1B2t1mutpT9Kry_PAj5illqgpUengbN_u9RAQhCSGqqkTouZCTc7Esr75vELWYAH977Im4474hu7owHlzZ9vz0XiDEhTkCBdcz-hLEh5JvlbpCKlBFhgcx2QW5ke38_wlj-X2FNC_MMsZZzgD5PJHoQthmPyemqtIwE6dlcSR3RTuG4SkS_jJcJmODFMXQOsL-N5ASmh2BfFq8D4LYIMTI0sq3ADfc6A6jg55bEabNEJ4TcMWQcybDTADe-08d0M0WDVtnT-TCYV8AZGBrYW-UTWQ),
setData: None
2017-06-152 14:35:57.967 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('client2'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client2',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 14:35:57.988 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8:
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
jGOK5Ifxz8-hTmyrpYlXUeagkZ1hORDpx7abvedosl-VtnukGr9mQjU9KzCEyCNsgNjjc98i-makj73dh9PNZ7rT1ttdJIi1EdTpDMG5scitBZ_8W4C0_kI2Z6Uc5CRve44nCTecYL8hhtTsncMBdf7lHjvqij1bQ7xux9-_dmC7mnTc8IZMFFhFqNjDxv3ZlyJAuhC6mY_I2crAtCTpYVloM4Ne8ghF5KapW25RXwY9GEakwF19kdrNgjAS7elbN9vVW9QLoLUa55xEUhQ7ej-4pkeJ9YfobWdxHByJEsy_Rg2hKXEV8K8rY9kDxyem95lBFyxsKz8N75RMwjhpDA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:57.968-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').
2017-06-152 14:35:57.988 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:35:57.988 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
jGOK5Ifxz8-hTmyrpYlXUeagkZ1hORDpx7abvedosl-VtnukGr9mQjU9KzCEyCNsgNjjc98i-makj73dh9PNZ7rT1ttdJIi1EdTpDMG5scitBZ_8W4C0_kI2Z6Uc5CRve44nCTecYL8hhtTsncMBdf7lHjvqij1bQ7xux9-_dmC7mnTc8IZMFFhFqNjDxv3ZlyJAuhC6mY_I2crAtCTpYVloM4Ne8ghF5KapW25RXwY9GEakwF19kdrNgjAS7elbN9vVW9QLoLUa55xEUhQ7ej-4pkeJ9YfobWdxHByJEsy_Rg2hKXEV8K8rY9kDxyem95lBFyxsKz8N75RMwjhpDA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:57.968-04:00, 2020-05-29T14:52:59.138-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArfmCN6-LRGEfbVkQdTOvcIy7UkaHzwwpAq75cYZwyvEVEH_6tzp2JaMGDKIyNAxjA_Yh0e3H7RseLyZtmNvl8QCRfTxOqfVqgJTTBBHG8zX1n3Lx4KfOnv4VGjE-BehKr8Aqe2piz_v7Q8X9fdE0E73irWkIl8S3JZOzG-PAR91XsJLIBtrkpf9Vnuz74wjgr9GhQWVl-vuwuHtUe-qQ93xiWbwzeKVmrict5C6bcY4QGwEGsumFy1ZdKr37oza1BNxTW3Ilr73a2-8NbrFSmFO7-bkBs60LkxzRox8C0FGkasoRMBhemDTD-SAn90OjYbqEAVAJGfktvdljtEYduQIDAQAB'):-spec('identity set for client2').
2017-06-152 14:35:58.073 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) is posted (code: 204)
2017-06-152 14:35:58.073 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('client2'), [makeMyIdentitySet('client2')]); solution(goals.head): ['V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8']; FreshGoals: List()
2017-06-152 14:35:58.083 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:58.084 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.084 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.084 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:35:58.084 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:35:58.084 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 14:35:58.085 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 14:35:58.085 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:58.085 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:58.086 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:58.086-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Self -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)))),
links: ArrayBuffer(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:58.086 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:00.952-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Self -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:58.087 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 14:35:58.096 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo:
_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
czaTN17cZ7RrlllvuFQ-zqAOjbGagcydSIoEyo18EzE57ZFe-MRQTvutGT8uITZLK1vaDmenTLcJcFs8QzwGbO6jAWg_CHU93rXngrmuqSjdvKjWL4Szo6m5XK8RknK-uQ6j0ncGakMd3zoaMx1N4nWzqi4-B9tZdXn-_6k2z0t1FegbikggZRTvRPIHfevsGOi0r3xc-WrSU0mB0nDRvqdotMGZjK2Hjp1hTgkOt7Bgs-7uzqN6cAdFcthr1CVmbHi_YGe9JsZevLoQs5AgaSaYIC7gUzuXbNUX-toNmsKocoFJfXWkBTplzK7Gq9IScvIcBh_ckUqm9tWnxbk9YA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.087-04:00, 2020-06-01T14:35:58.087-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:35:58.096 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
2017-06-152 14:35:58.096 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
czaTN17cZ7RrlllvuFQ-zqAOjbGagcydSIoEyo18EzE57ZFe-MRQTvutGT8uITZLK1vaDmenTLcJcFs8QzwGbO6jAWg_CHU93rXngrmuqSjdvKjWL4Szo6m5XK8RknK-uQ6j0ncGakMd3zoaMx1N4nWzqi4-B9tZdXn-_6k2z0t1FegbikggZRTvRPIHfevsGOi0r3xc-WrSU0mB0nDRvqdotMGZjK2Hjp1hTgkOt7Bgs-7uzqN6cAdFcthr1CVmbHi_YGe9JsZevLoQs5AgaSaYIC7gUzuXbNUX-toNmsKocoFJfXWkBTplzK7Gq9IScvIcBh_ckUqm9tWnxbk9YA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.087-04:00, 2020-06-01T14:35:58.087-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:35:58.352 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo) is posted (code: 204)
2017-06-152 14:35:58.352 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo']; FreshGoals: List()
2017-06-152 14:35:58.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:58.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:35:58.361 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:35:58.361 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 14:35:58.362 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 14:35:58.362 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 14:35:58.364 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:58.363-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_1274248114,_1560275832)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1274248114,_1560275832))), Map(?Prcpl -> _1274248114, ?Prefix -> _1560275832, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_2234595084,_934429098)), :(_3863773700,allocate(_2234595084,_934429098)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_3863773700,_1162555806)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_934429098,_1162555806))), Map(?Prcpl -> _2234595084, ?Prefix -> _934429098, ?UpStream -> _3863773700, ?PrefixSet -> _1162555806)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:58.364 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:01.143-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_1221511020,_3973341390)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1221511020,_3973341390))), Map(?Prcpl -> _1221511020, ?Prefix -> _3973341390, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_1862968306,_1926342732)), :(_1276826844,allocate(_1862968306,_1926342732)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_1276826844,_42418048)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_1926342732,_42418048))), Map(?Prcpl -> _1862968306, ?Prefix -> _1926342732, ?UpStream -> _1276826844, ?PrefixSet -> _42418048)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:58.364 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 14:35:58.379 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY:
YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
Jn1nLjMz-xKYfmulAgCRHyTCE2hw0JKOsgv5F3h-hptL7cf6CPyVpNAdo7JUDW-xWQlso-wWBWn1ECFST4vWBuD7EIW4cs-XnO9BHaVIzURuTU7zm1X9lM6bnnh7ztTVviSM75Xi_2KIImYNCQDxt4zGHor-K_5o5fKWRii_1n5l_6C1Cm0TgYjEdIL9Evlmz3Z6D9O7hkfTX4qIF2FodpMOYAmcdqowsJ97Izzgn5CJrl8dbNZEa6LTmwibUaAutphSs7ID9hBg3szYME0Q97BtSjsNdRD5Hbm7lzOEiNN2hZkZOvN4flSVjhouzf_p4wUx36U4L3qn8TBdMfdwlg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.365-04:00, 2020-06-01T14:35:58.365-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:58.379 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
2017-06-152 14:35:58.379 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY
Jn1nLjMz-xKYfmulAgCRHyTCE2hw0JKOsgv5F3h-hptL7cf6CPyVpNAdo7JUDW-xWQlso-wWBWn1ECFST4vWBuD7EIW4cs-XnO9BHaVIzURuTU7zm1X9lM6bnnh7ztTVviSM75Xi_2KIImYNCQDxt4zGHor-K_5o5fKWRii_1n5l_6C1Cm0TgYjEdIL9Evlmz3Z6D9O7hkfTX4qIF2FodpMOYAmcdqowsJ97Izzgn5CJrl8dbNZEa6LTmwibUaAutphSs7ID9hBg3szYME0Q97BtSjsNdRD5Hbm7lzOEiNN2hZkZOvN4flSVjhouzf_p4wUx36U4L3qn8TBdMfdwlg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.365-04:00, 2020-06-01T14:35:58.365-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:58.545 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY) is posted (code: 204)
2017-06-152 14:35:58.546 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY']; FreshGoals: List()
2017-06-152 14:35:58.558 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:58.559 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.559 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.559 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:35:58.559 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:35:58.559 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 14:35:58.560 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 14:35:58.560 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 14:35:58.561 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:58.561-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_532303854,_4206281180,_2981356622,_3283587040)), :(_532303854,advertise(_4206281180,_2981356622,_3283587040)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_532303854,_247426374)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_4206281180,_247426374))), Map(?DstIP -> _4206281180, ?Path -> _2981356622, ?DstIPSet -> _247426374, ?Speaker -> _532303854, ?AS -> _3283587040)), StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_1129051500,_1844762846,_323203598,_3882039420)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,[_4204753256|_828798156]=_323203598), :(_1129051500,advertise(_1844762846,_323203598,_3882039420)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_1069245228,_3253017726,_828798156,_1129051500)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_1844762846,_3253017726))), Map(?DstIP -> _1844762846, ?Path -> _323203598, ?DstIPSet -> _3253017726, ?Speaker -> _1129051500, ?AS -> _3882039420, ?Head -> _4204753256, ?Tail -> _828798156, ?P -> _1069245228))), StrLit(route2) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,route(_3236962586,_3274894812)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_645166228,_3466304200,_3274894812,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_3236962586,_3466304200))), Map(?DstIP -> _3236962586, ?Path -> _3274894812, ?Dst -> _645166228, ?DstIPSet -> _3466304200, $Self -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:58.562 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:01.487-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_2384636656,_3660245732,_1585444320,_1293961532)), :(_2384636656,advertise(_3660245732,_1585444320,_1293961532)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ownPrefix(_2384636656,_3620609858)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_3660245732,_3620609858))), Map(?DstIP -> _3660245732, ?Path -> _1585444320, ?DstIPSet -> _3620609858, ?Speaker -> _2384636656, ?AS -> _1293961532)), StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_1530827412,_4199529702,_3026805562,_318402298)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,[_3170890754|_1003546614]=_3026805562), :(_1530827412,advertise(_4199529702,_3026805562,_318402298)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_3294561028,_68356298,_1003546614,_1530827412)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_4199529702,_68356298))), Map(?DstIP -> _4199529702, ?Path -> _3026805562, ?DstIPSet -> _68356298, ?Speaker -> _1530827412, ?AS -> _318402298, ?Head -> _3170890754, ?Tail -> _1003546614, ?P -> _3294561028))), StrLit(route2) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,route(_1192211374,_4200334318)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,authorizedAdvertise(_3341244546,_1542344180,_4200334318,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,isInRange(_1192211374,_1542344180))), Map(?DstIP -> _1192211374, ?Path -> _4200334318, ?Dst -> _3341244546, ?DstIPSet -> _1542344180, $Self -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:58.563 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 14:35:58.578 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s:
lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
MjSX2-6ICLq2AmeAuYxt9dJEHsVN8GmpV16QMSZAk88TRXz-OGeofAM1HIXQNnRQnvpW4dpBmX6X2u0jERFK0y0gwJB8DknIUJlk4HgQ1F3xBxdef5v6-SBKFSV8mDrhpXfVn3XqE9n6ynVGN-truKzVM3eaDV7SWRMiXJ8DrLZaeLip6htcJUPndTBTpO7gSRcS9eZ9z39EYeNJL1kUpG4YLcJfge2SYXV1Fot6t4jbtKxQJiVFr5kE1KlML4noE2ZEvobb3Gyph1fGI8R_HAXE1prB-EoNumWa0uc_E7IhQp3WQNZ4aKiOk4Gl0cEOSXwYYao2wgYOqZ_ya06ixg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.564-04:00, 2020-06-01T14:35:58.564-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'),?DstIP<:?DstIPSet.
2017-06-152 14:35:58.578 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
2017-06-152 14:35:58.578 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s
MjSX2-6ICLq2AmeAuYxt9dJEHsVN8GmpV16QMSZAk88TRXz-OGeofAM1HIXQNnRQnvpW4dpBmX6X2u0jERFK0y0gwJB8DknIUJlk4HgQ1F3xBxdef5v6-SBKFSV8mDrhpXfVn3XqE9n6ynVGN-truKzVM3eaDV7SWRMiXJ8DrLZaeLip6htcJUPndTBTpO7gSRcS9eZ9z39EYeNJL1kUpG4YLcJfge2SYXV1Fot6t4jbtKxQJiVFr5kE1KlML4noE2ZEvobb3Gyph1fGI8R_HAXE1prB-EoNumWa0uc_E7IhQp3WQNZ4aKiOk4Gl0cEOSXwYYao2wgYOqZ_ya06ixg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.564-04:00, 2020-06-01T14:35:58.564-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'),?DstIP<:?DstIPSet.
2017-06-152 14:35:58.673 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s) is posted (code: 204)
2017-06-152 14:35:58.674 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['lTXdyh61nNRv_hY5my-On0yYh18eixeufA_IageEE8s']; FreshGoals: List()
2017-06-152 14:35:58.681 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:58.681 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.681 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.681 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:35:58.682 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:35:58.682 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 14:35:58.682 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 14:35:58.683 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:58.684 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:58.685 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:58.684-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,allowStitch(_4278265862,_2110257436,_4130596370,_383916550,_3780460996)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,endorsePA(_2736286698)), :(_2736286698,endorse(_4278265862)), :(_4278265862,stitch(_2110257436,_4130596370,_383916550,_3780460996))), Map(?Bob -> _4278265862, ?BobSlice -> _2110257436, ?ReservID -> _4130596370, ?Slice -> _383916550, ?Node -> _3780460996, ?PA -> _2736286698)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:58.685 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:01.635-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,allowStitch(_3413256940,_3427150766,_2253793410,_3882960024,_3155040208)), :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,endorsePA(_1088962724)), :(_1088962724,endorse(_3413256940)), :(_3413256940,stitch(_3427150766,_2253793410,_3882960024,_3155040208))), Map(?Bob -> _3413256940, ?BobSlice -> _3427150766, ?ReservID -> _2253793410, ?Slice -> _3882960024, ?Node -> _3155040208, ?PA -> _1088962724)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:58.685 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 14:35:58.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY:
B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
BH8024s6r_Szxuh5oGOYcbRdYiX6l1TudW4WVybUBrl7q8yZEBcfWpKv7TMdgnLV9rEszYo3xuQ830yjfrczUol5UP7Tw9SlK9mjlUfkkLOK0NFvQ3hIVOZeLCjRohKDs1eD9IgsEn9aibfRVnMe_BKgeqflnew1fLuqFrkDRRaAl8-JIwXqfh5SGdh5JtDKY0C-hzesgUUPgfFqmWWY_I8UmFm0-xCIXNNXlo7vt-LEShJjEKPfVljgzKaWFgEKTPUs7Zs3LQZLAaKbedY4Mjc3Yuujl_HcoyKvQrRsny_rLdL7poomDFhiL7vKrfHaeQhYnk5XGEae0uboZuVaHg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.686-04:00, 2020-06-01T14:35:58.686-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:58.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
2017-06-152 14:35:58.699 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY
BH8024s6r_Szxuh5oGOYcbRdYiX6l1TudW4WVybUBrl7q8yZEBcfWpKv7TMdgnLV9rEszYo3xuQ830yjfrczUol5UP7Tw9SlK9mjlUfkkLOK0NFvQ3hIVOZeLCjRohKDs1eD9IgsEn9aibfRVnMe_BKgeqflnew1fLuqFrkDRRaAl8-JIwXqfh5SGdh5JtDKY0C-hzesgUUPgfFqmWWY_I8UmFm0-xCIXNNXlo7vt-LEShJjEKPfVljgzKaWFgEKTPUs7Zs3LQZLAaKbedY4Mjc3Yuujl_HcoyKvQrRsny_rLdL7poomDFhiL7vKrfHaeQhYnk5XGEae0uboZuVaHg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:35:58.686-04:00, 2020-06-01T14:35:58.686-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:58.899 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY) is posted (code: 204)
2017-06-152 14:35:58.899 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['B1fkt3nhh_1OYlJawUNtjO1AXh1FG-pwOgLxwonCTdY']; FreshGoals: List()
2017-06-152 14:35:58.908 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(client1)
2017-06-152 14:35:58.909 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('client1')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.909 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:58.909 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:35:58.910 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:35:58.910 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('client1')?)
2017-06-152 14:35:58.910 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('client1'); solution(goals.head): postIdSet('client1'); FreshGoals: List(defpost(postIdSet('client1'), [makeMyIdentitySet('client1')]))
2017-06-152 14:35:58.911 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('client1'); solution(goals.head): makeMyIdentitySet('client1'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:58.912 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:58.912 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:58.912-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,spec(interpolate(argsFun(identity set for ,client1,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB, $CN -> client1)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 14:35:58.913 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: Some(2020-05-29T14:52:59.725-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:52:59.725-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:02.001-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,spec(identity set for client1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(FWD1uiHPb9wuNIKl4F_QXZzDH373dvMQrC8PIeemLocIFoHqY7Q6QB9DIVIVqDwvi_rmbOsRAmbmUuz4bK6MG0fAQ9PcJZa-xpVNX2wrcHV2w8EaS3plcKkFSl0-g7fiotLGrSoEfbLrYshFEDjTa2Htp5kdawxQbfVKnKahoVhDf-RUulYtEuGN_zu6i_kXbATfxrAP63B5lL4vW9ScTmRMp5ck-1oEUlgV1jAXBXwZ72ecauXwYfmjNiude0h2p9fc5G2-eUoTk6pF0WNGvvCxt9QnkYIsZJGDeygl6xMAmE-3J9ygK9G8m1AiVN00g-yFAc7EBnUT7jcCYSIhGA),
setData: None
2017-06-152 14:35:58.913 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('client1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'client1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 14:35:58.927 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8:
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
qs8tt2YTzOMqfOhPtWu_TDwQzQAYdAzamcW6p_CggNXhle1VGpkJ_7gs5hH8wqeU3p5jz5rZdMhBlrErApOSWEpfg2Iqg0g_P5vTXe9BeaP05HISO5UYFYOnc3zq37c3DJbGbypOsRExs_-PPxgZZ_Hhk6e4EWs5lGbYnwfx5KWCbBWfJKEZ3FTMj-xYTrLXeePuUeFjBy6EBA3BL4U8vNfem7Czcuh2YMNvtegCryGxKeFzu4czHfoKEAFBGm46lrapOenaS806HPP5WBjuhdI3ZS7-mWBOdfNBBcqvTM_9h9dCkEwJVk0DhtZ1hbvRpVdYy-4tCEygfiv341WQcQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:58.914-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').
2017-06-152 14:35:58.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:35:58.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
qs8tt2YTzOMqfOhPtWu_TDwQzQAYdAzamcW6p_CggNXhle1VGpkJ_7gs5hH8wqeU3p5jz5rZdMhBlrErApOSWEpfg2Iqg0g_P5vTXe9BeaP05HISO5UYFYOnc3zq37c3DJbGbypOsRExs_-PPxgZZ_Hhk6e4EWs5lGbYnwfx5KWCbBWfJKEZ3FTMj-xYTrLXeePuUeFjBy6EBA3BL4U8vNfem7Czcuh2YMNvtegCryGxKeFzu4czHfoKEAFBGm46lrapOenaS806HPP5WBjuhdI3ZS7-mWBOdfNBBcqvTM_9h9dCkEwJVk0DhtZ1hbvRpVdYy-4tCEygfiv341WQcQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:58.914-04:00, 2020-05-29T14:52:59.725-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5XMg2teaO2rKinyeZ-d0whqIM1A56MgUndYHvvDm01kWcxb9qD9oNkTSp5B6ePlMSnxEzRE7kXx3Yl6dwK8v1lXLUpV6cRXWnTjb7WWNPtXLivjekpihpOC4eCHWLDZyp7Bz-KNxO6w8rJyZaoQOPPJSiEvG-kB73ysbJgpcBOBtazdTq8V1GcwpdU9rAK4TU8veqpmjazgmG77hEtdM9h9kZzDt200c0aKPIHlmGlKu3ptiHaqqz3dxU5EFvC-xc6sNIxT-RqC6TdJNqPnH5fY22Dl27Us-fJzi7slS6Hu8CkojnthA9cadmw1F06_8lbwaU_nxs_Gt-B8yhVLsOQIDAQAB'):-spec('identity set for client1').
2017-06-152 14:35:59.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) is posted (code: 204)
2017-06-152 14:35:59.139 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('client1'), [makeMyIdentitySet('client1')]); solution(goals.head): ['iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8']; FreshGoals: List()
2017-06-152 14:35:59.146 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:59.146 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.146 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.147 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:35:59.147 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:35:59.147 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 14:35:59.147 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 14:35:59.148 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:59.148 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:35:59.149 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:59.148-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Self -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))),
links: ArrayBuffer(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:59.149 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:02.090-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Self -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:35:59.149 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 14:35:59.160 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs:
p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
lAhGHqntn3TYkma8QJNb_ki1F0ZqEOFX6KFKpZSpipXeGffg5dzt_kpifP1uqKxPSLACMBhorSI35EXjcof2HBrPzvZ1VZtyqoivDJcT0_BYyrsMp8Ief8GcrGW_RT0XOMYS-BZT7w7F5ca2Q0Ts7kj0jC0zvYxuUEYTUbZrzWfE_USdZs8cljdORm7xCoCACrcY-7t9wPGwJsx22xc8ou4nrA3pV_vMwfYHzl5x9FgRhDKmfNuJlccfDPdJuhKJzTM9IcNw1e-vtmkOh70kGipg_81mSTcjeIOvgg-gHnbFAAHScFfFQP6NDlQ3rgpEvNVQCLjOj7RCJWWgJZP7sQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.149-04:00, 2020-06-01T14:35:59.149-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:35:59.160 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
2017-06-152 14:35:59.160 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
lAhGHqntn3TYkma8QJNb_ki1F0ZqEOFX6KFKpZSpipXeGffg5dzt_kpifP1uqKxPSLACMBhorSI35EXjcof2HBrPzvZ1VZtyqoivDJcT0_BYyrsMp8Ief8GcrGW_RT0XOMYS-BZT7w7F5ca2Q0Ts7kj0jC0zvYxuUEYTUbZrzWfE_USdZs8cljdORm7xCoCACrcY-7t9wPGwJsx22xc8ou4nrA3pV_vMwfYHzl5x9FgRhDKmfNuJlccfDPdJuhKJzTM9IcNw1e-vtmkOh70kGipg_81mSTcjeIOvgg-gHnbFAAHScFfFQP6NDlQ3rgpEvNVQCLjOj7RCJWWgJZP7sQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.149-04:00, 2020-06-01T14:35:59.149-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:35:59.540 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs) is posted (code: 204)
2017-06-152 14:35:59.540 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs']; FreshGoals: List()
2017-06-152 14:35:59.548 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:59.549 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.549 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.549 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:35:59.549 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:35:59.550 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 14:35:59.550 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 14:35:59.551 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 14:35:59.552 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:59.551-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_1640025298,_2378691506)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1640025298,_2378691506))), Map(?Prcpl -> _1640025298, ?Prefix -> _2378691506, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_1643089596,_3518214772)), :(_3060953804,allocate(_1643089596,_3518214772)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_3060953804,_94010834)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_3518214772,_94010834))), Map(?Prcpl -> _1643089596, ?Prefix -> _3518214772, ?UpStream -> _3060953804, ?PrefixSet -> _94010834)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:59.552 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:02.186-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_421366194,_1433508086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_421366194,_1433508086))), Map(?Prcpl -> _421366194, ?Prefix -> _1433508086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_1890600070,_2786259886)), :(_1387761350,allocate(_1890600070,_2786259886)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_1387761350,_2346195534)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_2786259886,_2346195534))), Map(?Prcpl -> _1890600070, ?Prefix -> _2786259886, ?UpStream -> _1387761350, ?PrefixSet -> _2346195534)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:59.553 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 14:35:59.565 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM:
VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
bSIP6nhwDFFPqRSg3TcogzDXt2rTwiJbTiwT9knUdS8dCrkwIBXgizWTLz245nRto52jre963pOg4inWRMPYJgLh8qQMJCxMtucbaiPQ2XjYHiv_mIuCDMCs5jQ_3oQenXiZD4y0JaKCE8aOQgIiJXMHu7EpRctAVayNL9GBMj-FHXwnJ0a0lFIXaNfT7cAbqet7l8iiYmkMxyhiKvdHtDY9VpGeqvWW5EQ8qMOp9sx-46Q4guRfdYQPeif_vFIl8Zw9nVbNPz_axeVyZAP6kV38hlyjKbQnaIKq7SdpXQq4IExB7-ftpBDlGEOn8_vwND0PAnwMT8EYZHFYQZlAhw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.553-04:00, 2020-06-01T14:35:59.553-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:59.565 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
2017-06-152 14:35:59.565 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM
bSIP6nhwDFFPqRSg3TcogzDXt2rTwiJbTiwT9knUdS8dCrkwIBXgizWTLz245nRto52jre963pOg4inWRMPYJgLh8qQMJCxMtucbaiPQ2XjYHiv_mIuCDMCs5jQ_3oQenXiZD4y0JaKCE8aOQgIiJXMHu7EpRctAVayNL9GBMj-FHXwnJ0a0lFIXaNfT7cAbqet7l8iiYmkMxyhiKvdHtDY9VpGeqvWW5EQ8qMOp9sx-46Q4guRfdYQPeif_vFIl8Zw9nVbNPz_axeVyZAP6kV38hlyjKbQnaIKq7SdpXQq4IExB7-ftpBDlGEOn8_vwND0PAnwMT8EYZHFYQZlAhw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.553-04:00, 2020-06-01T14:35:59.553-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:35:59.611 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM) is posted (code: 204)
2017-06-152 14:35:59.612 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['VxnbyjO2AY2qBPPHQkUuE7rZOdNWKvhJBNubu1y4NAM']; FreshGoals: List()
2017-06-152 14:35:59.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:59.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:35:59.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:35:59.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 14:35:59.621 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 14:35:59.621 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 14:35:59.622 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:59.622-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_1644227796,_755535424,_4144549626,_1840129940)), :(_1644227796,advertise(_755535424,_4144549626,_1840129940)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_1644227796,_162332856)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_755535424,_162332856))), Map(?DstIP -> _755535424, ?Path -> _4144549626, ?DstIPSet -> _162332856, ?Speaker -> _1644227796, ?AS -> _1840129940)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_1623119170,_3497040048,_3456014252,_2889336426)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,[_984949354|_1867819156]=_3456014252), :(_1623119170,advertise(_3497040048,_3456014252,_2889336426)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_1445859620,_1144555804,_1867819156,_1623119170)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_3497040048,_1144555804))), Map(?DstIP -> _3497040048, ?Path -> _3456014252, ?DstIPSet -> _1144555804, ?Speaker -> _1623119170, ?AS -> _2889336426, ?Head -> _984949354, ?Tail -> _1867819156, ?P -> _1445859620))), StrLit(route2) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,route(_3607975298,_500652030)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_978764368,_3148282990,_500652030,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_3607975298,_3148282990))), Map(?DstIP -> _3607975298, ?Path -> _500652030, ?Dst -> _978764368, ?DstIPSet -> _3148282990, $Self -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:59.623 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:02.406-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_112857052,_2708848722,_750637678,_2708749850)), :(_112857052,advertise(_2708848722,_750637678,_2708749850)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ownPrefix(_112857052,_1986396422)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_2708848722,_1986396422))), Map(?DstIP -> _2708848722, ?Path -> _750637678, ?DstIPSet -> _1986396422, ?Speaker -> _112857052, ?AS -> _2708749850)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_2015234248,_3136457478,_3145135788,_4250836724)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,[_1972285918|_1510641362]=_3145135788), :(_2015234248,advertise(_3136457478,_3145135788,_4250836724)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_1455804584,_1583697338,_1510641362,_2015234248)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_3136457478,_1583697338))), Map(?DstIP -> _3136457478, ?Path -> _3145135788, ?DstIPSet -> _1583697338, ?Speaker -> _2015234248, ?AS -> _4250836724, ?Head -> _1972285918, ?Tail -> _1510641362, ?P -> _1455804584))), StrLit(route2) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,route(_1600464872,_1360481992)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,authorizedAdvertise(_690984146,_1565721808,_1360481992,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,isInRange(_1600464872,_1565721808))), Map(?DstIP -> _1600464872, ?Path -> _1360481992, ?Dst -> _690984146, ?DstIPSet -> _1565721808, $Self -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:59.623 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 14:35:59.637 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token __qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw:
__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
CApGEH8OrVUHYEQa--4dToCXcOSab-GD_muheiuQD4_-LmdbmcnrlTrkWd83CjyTauaaRHBx_kXhS_IPRcmtyXXgYJrVyAd_yR6IY6H4xvwGS8PTtz8-zo9Gy1qBSOXYTbx63xZpm4c7jOseeN5WOYctw7xbupUO2PvZc2qAtDuZt8enBp6s78T5GAQyciYByRKU8yotSl4TzRMQBx2lsDSmGMC8-mi2pyCSmXLpewVD7iauE_ZJU0C0OWVLfjLdgeT-DrmbyeS-WDkwCkLVSajzMwAaMcwHZE44Toqxt4-N3GrDFJJ1W2W7mvui5OtaTg20AdFYOq4sshTbVLA_5w
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.624-04:00, 2020-06-01T14:35:59.624-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),?DstIP<:?DstIPSet.
2017-06-152 14:35:59.637 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: __qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
2017-06-152 14:35:59.638 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  __qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw
CApGEH8OrVUHYEQa--4dToCXcOSab-GD_muheiuQD4_-LmdbmcnrlTrkWd83CjyTauaaRHBx_kXhS_IPRcmtyXXgYJrVyAd_yR6IY6H4xvwGS8PTtz8-zo9Gy1qBSOXYTbx63xZpm4c7jOseeN5WOYctw7xbupUO2PvZc2qAtDuZt8enBp6s78T5GAQyciYByRKU8yotSl4TzRMQBx2lsDSmGMC8-mi2pyCSmXLpewVD7iauE_ZJU0C0OWVLfjLdgeT-DrmbyeS-WDkwCkLVSajzMwAaMcwHZE44Toqxt4-N3GrDFJJ1W2W7mvui5OtaTg20AdFYOq4sshTbVLA_5w
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.624-04:00, 2020-06-01T14:35:59.624-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),?DstIP<:?DstIPSet.
2017-06-152 14:35:59.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw) is posted (code: 204)
2017-06-152 14:35:59.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['__qp_1zZdkrGiOA2Y3YqiMqRXYT9LEJUj1nFu1-bevw']; FreshGoals: List()
2017-06-152 14:35:59.843 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:35:59.843 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.843 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.843 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:35:59.844 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:35:59.844 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 14:35:59.844 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 14:35:59.845 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:59.845 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:35:59.846 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:59.846-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,allowStitch(_2208456208,_3925794944,_861984070,_2853377856,_986754764)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,endorsePA(_624210934)), :(_624210934,endorse(_2208456208)), :(_2208456208,stitch(_3925794944,_861984070,_2853377856,_986754764))), Map(?Bob -> _2208456208, ?BobSlice -> _3925794944, ?ReservID -> _861984070, ?Slice -> _2853377856, ?Node -> _986754764, ?PA -> _624210934)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:59.846 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:02.763-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,allowStitch(_281786610,_592454844,_2622048468,_476246952,_1344525566)), :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,endorsePA(_4076097410)), :(_4076097410,endorse(_281786610)), :(_281786610,stitch(_592454844,_2622048468,_476246952,_1344525566))), Map(?Bob -> _281786610, ?BobSlice -> _592454844, ?ReservID -> _2622048468, ?Slice -> _476246952, ?Node -> _1344525566, ?PA -> _4076097410)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:35:59.847 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 14:35:59.862 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ:
jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
aOaFEfoxbqaHqrEka7kBLsYbi9KDHVv-M1SWNW7PFOnlzb72f176eKF42rsgSiiW0a-L3T1oeYWByOhgrbPf6hgfPcsihx-fsiUOHa84BZCUSvQZkaNwB071j6-hr0XKtE4fVP_UCMcodqmu4xo-hoJ2czBdeS7AgRjhuv96qmril_Z-GP9V1rIE142EKd34lAuykitepB2VikimGVe6GZUzeQPdJizBX76YzRG8lKWHeXOeiPOBkEU29K7iexxINoYeB_SmgPvV6pUNoe-V-r9QKf5cnVy68U1TRYfR0gpNDxSsHTv6cdVVhT0arpa2BjZvgQq01OLpPadeAfulig
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.848-04:00, 2020-06-01T14:35:59.848-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:59.862 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
2017-06-152 14:35:59.863 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ
aOaFEfoxbqaHqrEka7kBLsYbi9KDHVv-M1SWNW7PFOnlzb72f176eKF42rsgSiiW0a-L3T1oeYWByOhgrbPf6hgfPcsihx-fsiUOHa84BZCUSvQZkaNwB071j6-hr0XKtE4fVP_UCMcodqmu4xo-hoJ2czBdeS7AgRjhuv96qmril_Z-GP9V1rIE142EKd34lAuykitepB2VikimGVe6GZUzeQPdJizBX76YzRG8lKWHeXOeiPOBkEU29K7iexxINoYeB_SmgPvV6pUNoe-V-r9QKf5cnVy68U1TRYfR0gpNDxSsHTv6cdVVhT0arpa2BjZvgQq01OLpPadeAfulig
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:35:59.848-04:00, 2020-06-01T14:35:59.848-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:35:59.956 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ) is posted (code: 204)
2017-06-152 14:35:59.957 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['jHZ7-9j-nb1fHHc-fn2F7-INWMqQeskhltuRwNxRoSQ']; FreshGoals: List()
2017-06-152 14:35:59.972 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(rpkiroot)
2017-06-152 14:35:59.973 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('rpkiroot')? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.973 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:35:59.973 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:35:59.973 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:35:59.974 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('rpkiroot')?)
2017-06-152 14:35:59.974 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('rpkiroot'); solution(goals.head): postIdSet('rpkiroot'); FreshGoals: List(defpost(postIdSet('rpkiroot'), [makeMyIdentitySet('rpkiroot')]))
2017-06-152 14:35:59.976 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('rpkiroot'); solution(goals.head): makeMyIdentitySet('rpkiroot'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:59.976 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:35:59.977 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:35:59.977-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,spec(interpolate(argsFun(identity set for ,rpkiroot,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB, $CN -> rpkiroot)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 14:35:59.977 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: Some(2020-05-29T14:53:00.958-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:53:00.958-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:03.050-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,spec(identity set for rpkiroot))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(P9obuivItbtSd4IG4NzKDWWs_DpYQzITSkncj4ylfmPPAxNzyC2I9EP1Yl2JufrhOC7Z8R009oZn9X4hj4yKk51To9dAfl1CfR_KhntjZJOiQWzysttnNVeGALQ_44_e8m3ln01Ll6e72WhrojghSkqQTDcgEEA69w-R9mYOLhUa9CxT9oCpH8zPGFRxnmZBIXURtytionIALKR2Nh4FDdgYe2LhfEL9g0owq8MSLJiXbyWXD42wGrvpSh5eD57eTu3ts5ecPHBiaLPXCt95n2nX-MBNwECE3gHLrpWazGkFQZvj6fw8Os4rIiKO0of5xuwh9hDuq2sBYxeoOUT-6A),
setData: None
2017-06-152 14:35:59.978 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('rpkiroot'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'rpkiroot',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 14:35:59.991 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA:
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
huRZWQ2X4D_V1h02h0lxoCx6uGf2fsdIHtQc7xG1PXHQ8mwx4OoxnzamStWLDJj5P8uL4Gz_jpcO4HOYwK-02Js3Z8oY_bf6cgwYRpzPbI7ePXnINZ7QPghMDrLOtVtQ9G-OL3XShBFbYPGKtxVp_yKTDawyQBcuZH8IJvSF24MBtey2aZ8MNZZ8euA1TYDnPu_0Cf5Kc_W7PrCVsfOFaaVkN-SqX8tGfwCAnSuDBHQRMoR-gy4f_7M6sDcqY6GpP7XbddmO32uFkjWuLIWFqfF4SxSY603KOJ8wIlTBb2bO7J1eAhkmOFAJ2gEQ4fR_RAeHBHfaSHl6PcplZ9jHDw
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:35:59.978-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').
2017-06-152 14:35:59.991 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:35:59.991 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
huRZWQ2X4D_V1h02h0lxoCx6uGf2fsdIHtQc7xG1PXHQ8mwx4OoxnzamStWLDJj5P8uL4Gz_jpcO4HOYwK-02Js3Z8oY_bf6cgwYRpzPbI7ePXnINZ7QPghMDrLOtVtQ9G-OL3XShBFbYPGKtxVp_yKTDawyQBcuZH8IJvSF24MBtey2aZ8MNZZ8euA1TYDnPu_0Cf5Kc_W7PrCVsfOFaaVkN-SqX8tGfwCAnSuDBHQRMoR-gy4f_7M6sDcqY6GpP7XbddmO32uFkjWuLIWFqfF4SxSY603KOJ8wIlTBb2bO7J1eAhkmOFAJ2gEQ4fR_RAeHBHfaSHl6PcplZ9jHDw
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:35:59.978-04:00, 2020-05-29T14:53:00.958-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArb1sh2TLIDdDKw9PFMMAbTn2S9wk1nomr7yHcKw1ddeCSIDtFawahv_-rRS-BYe3tMCNac7muExEmRC3SCZt1saBVCcVRYxfJ334CzbQVxSFnlyIHgBzH23WaRFcJ5MVjnHezjpdTH5UGb0SQpXQf2-ZiLxyFCin_ai9WiaU0IuWvnHJwWAUJ4H-Wt72AlIoKDS-XAJj90v_r9fepqiO0oqjc-kQF8tsAcbDkcLmPK4GWBamLMgwYJFSZ99svam4e6-perq62LWz4z6OteUrASMr9MehcuNxQ0CheW1fqSGx_IkkAy6fvLDTwi2eQMPQwXOQs-Qarr3o_zPQBG6I6QIDAQAB'):-spec('identity set for rpkiroot').
2017-06-152 14:36:00.180 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) is posted (code: 204)
2017-06-152 14:36:00.180 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('rpkiroot'), [makeMyIdentitySet('rpkiroot')]); solution(goals.head): ['UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA']; FreshGoals: List()
2017-06-152 14:36:00.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:00.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:36:00.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:36:00.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 14:36:00.189 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 14:36:00.189 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:36:00.190 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:36:00.190 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:00.190-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,link(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA))), Map($Self -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)))),
links: ArrayBuffer(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:00.190 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:03.276-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,link(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA))), Map($Self -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)))),
links: ArrayBuffer(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:00.191 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 14:36:00.205 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo:
gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
UWhBJdceoZkhG0C1Ee6ICmUf1JA1t770EaAvIOIAqmpVXthFAVJ2LQTZsI5um0ScuPJRY_RfQGyN-acbTF_-J-GjFwhFMwqnfkB1W827L3-_2C7Zp4QnYQ6zUpn7_RjhJwBP_4kKPnSGpCYWkuQbngGr2RddqR-QJZTN2MHz1Ai2bkIZVkGkqdY50uwJaEUL0ed5Pb9MDECV0uA-h1c1fnYpPDtKNy1a50n61yghz6_g9Eq2OnCPfkR-toSr2xotcTM4k0_uxbSQUVHr0uWq2Q_XaoeqX_BPlj-RRmBd_06HkRqfPOixqP5T-v34Hdcg0-OYNZOPeGn0N4sSqvhwZA
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.191-04:00, 2020-06-01T14:36:00.191-04:00, PT720H
SHA256withRSA
subject(set29)

link('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').
2017-06-152 14:36:00.206 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
2017-06-152 14:36:00.206 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo
UWhBJdceoZkhG0C1Ee6ICmUf1JA1t770EaAvIOIAqmpVXthFAVJ2LQTZsI5um0ScuPJRY_RfQGyN-acbTF_-J-GjFwhFMwqnfkB1W827L3-_2C7Zp4QnYQ6zUpn7_RjhJwBP_4kKPnSGpCYWkuQbngGr2RddqR-QJZTN2MHz1Ai2bkIZVkGkqdY50uwJaEUL0ed5Pb9MDECV0uA-h1c1fnYpPDtKNy1a50n61yghz6_g9Eq2OnCPfkR-toSr2xotcTM4k0_uxbSQUVHr0uWq2Q_XaoeqX_BPlj-RRmBd_06HkRqfPOixqP5T-v34Hdcg0-OYNZOPeGn0N4sSqvhwZA
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.191-04:00, 2020-06-01T14:36:00.191-04:00, PT720H
SHA256withRSA
subject(set29)

link('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA').
2017-06-152 14:36:00.292 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo) is posted (code: 204)
2017-06-152 14:36:00.292 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['gZEJZO6_xcQugfemUcdbLe3fvfhFu5TlMywJs_Y2TDo']; FreshGoals: List()
2017-06-152 14:36:00.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:00.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:36:00.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:36:00.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 14:36:00.301 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 14:36:00.301 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 14:36:00.302 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:00.302-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_3142687062,_1487665162)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3142687062,_1487665162))), Map(?Prcpl -> _3142687062, ?Prefix -> _1487665162, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_2813102106,_1264925032)), :(_2093589114,allocate(_2813102106,_1264925032)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_2093589114,_2074431040)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_1264925032,_2074431040))), Map(?Prcpl -> _2813102106, ?Prefix -> _1264925032, ?UpStream -> _2093589114, ?PrefixSet -> _2074431040)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:00.302 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:03.426-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_3096106358,_3662034294)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3096106358,_3662034294))), Map(?Prcpl -> _3096106358, ?Prefix -> _3662034294, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_3937248822,_3140166252)), :(_1424257306,allocate(_3937248822,_3140166252)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_1424257306,_3202495348)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_3140166252,_3202495348))), Map(?Prcpl -> _3937248822, ?Prefix -> _3140166252, ?UpStream -> _1424257306, ?PrefixSet -> _3202495348)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:00.303 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 14:36:00.315 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc:
symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
ULWDzS4Yp2EzXgLCBiWUe1kVrWC7dAa0N9rC2g1nQDCRToXwFbqUA38edr2PUe4Llpb_Lei9fxMjnELcGfZtKglJ4QKm-NjzpaEGac_EpiWqOcuu-dvRa3y9E0_0B1KiY7MJTWnN6mgA_LaexbgZyT4ZcaWu9rRZWkak3Tw4latQBht0X0CVAcSuOhw_hjc-pLamZk6UBK5lbbuyKGAfo77BxLwoTbpJvoPBXzeAhdNVAV8Sgucbt8CEnHRoKw43fw0OIIpCh2zlAD2k3wsxQ7jeKi2Rc8l7sVrMo5lNPVHgCsdpEm3P2o0fi7CAOlaula8IimzqO6bBsdg-dNPKdg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.303-04:00, 2020-06-01T14:36:00.303-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:36:00.315 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
2017-06-152 14:36:00.315 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc
ULWDzS4Yp2EzXgLCBiWUe1kVrWC7dAa0N9rC2g1nQDCRToXwFbqUA38edr2PUe4Llpb_Lei9fxMjnELcGfZtKglJ4QKm-NjzpaEGac_EpiWqOcuu-dvRa3y9E0_0B1KiY7MJTWnN6mgA_LaexbgZyT4ZcaWu9rRZWkak3Tw4latQBht0X0CVAcSuOhw_hjc-pLamZk6UBK5lbbuyKGAfo77BxLwoTbpJvoPBXzeAhdNVAV8Sgucbt8CEnHRoKw43fw0OIIpCh2zlAD2k3wsxQ7jeKi2Rc8l7sVrMo5lNPVHgCsdpEm3P2o0fi7CAOlaula8IimzqO6bBsdg-dNPKdg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.303-04:00, 2020-06-01T14:36:00.303-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:36:00.516 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc) is posted (code: 204)
2017-06-152 14:36:00.517 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['symzEtVlJtTphJQpSszyl3tUQdw2dC4-3uM9b92tGRc']; FreshGoals: List()
2017-06-152 14:36:00.524 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:00.525 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.525 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.525 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:36:00.525 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:36:00.525 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 14:36:00.526 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 14:36:00.527 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 14:36:00.528 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:00.528-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_4153841980,_854338116,_1586637418,_718853460)), :(_4153841980,advertise(_854338116,_1586637418,_718853460)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_4153841980,_1757730378)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_854338116,_1757730378))), Map(?DstIP -> _854338116, ?Path -> _1586637418, ?DstIPSet -> _1757730378, ?Speaker -> _4153841980, ?AS -> _718853460)), StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_975793948,_4096258888,_431614700,_1468086550)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,[_648138100|_3973572442]=_431614700), :(_975793948,advertise(_4096258888,_431614700,_1468086550)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_988782246,_1710774628,_3973572442,_975793948)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_4096258888,_1710774628))), Map(?DstIP -> _4096258888, ?Path -> _431614700, ?DstIPSet -> _1710774628, ?Speaker -> _975793948, ?AS -> _1468086550, ?Head -> _648138100, ?Tail -> _3973572442, ?P -> _988782246))), StrLit(route2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,route(_1293603522,_514072844)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_1509471952,_4268554226,_514072844,UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_1293603522,_4268554226))), Map(?DstIP -> _1293603522, ?Path -> _514072844, ?Dst -> _1509471952, ?DstIPSet -> _4268554226, $Self -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:00.529 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:03.776-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_1685825086,_1541957628,_3325703270,_1584437300)), :(_1685825086,advertise(_1541957628,_3325703270,_1584437300)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,ownPrefix(_1685825086,_3884167058)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_1541957628,_3884167058))), Map(?DstIP -> _1541957628, ?Path -> _3325703270, ?DstIPSet -> _3884167058, ?Speaker -> _1685825086, ?AS -> _1584437300)), StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_4283220760,_3921830290,_866776486,_3366728574)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,[_1348558192|_2857723934]=_866776486), :(_4283220760,advertise(_3921830290,_866776486,_3366728574)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_3610098742,_2125689454,_2857723934,_4283220760)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_3921830290,_2125689454))), Map(?DstIP -> _3921830290, ?Path -> _866776486, ?DstIPSet -> _2125689454, ?Speaker -> _4283220760, ?AS -> _3366728574, ?Head -> _1348558192, ?Tail -> _2857723934, ?P -> _3610098742))), StrLit(route2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,route(_627247636,_611812158)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,authorizedAdvertise(_2650883978,_2076472870,_611812158,UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,isInRange(_627247636,_2076472870))), Map(?DstIP -> _627247636, ?Path -> _611812158, ?Dst -> _2650883978, ?DstIPSet -> _2076472870, $Self -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:00.529 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 14:36:00.543 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8:
1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
Ia0hSFKXGzho4ZzaH6n6QZ5hoVJlQK4cvqRwbp2lh9f3RWzDVkeg-eoVyUUEPaC-Yr81pm1bCWUsKqb6RQoV2RPWV2KNB5rKH3XOyZSY-Vwm7_jm0D-iueW0mKvxHDx1Cy3KeqBEgrNgte1qEEYUDQeOkWvaQ1E4bsf7GVnEWRZ5_bcOtgxq5ODIyLVZBlKsFy657wRZWmhDWfQOX69nMltvlsdzFITUGybtlnL9314XKqJqNDiX4RXZpYSJaf6kSE_cS9r-Qg7oznlLmq4p5d_1y2lZSsd2vXNYxhs7-Jj5b-IFUThQ04G_rilaquFDZiFSVPqOPsBbIINgDn0lkA
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.530-04:00, 2020-06-01T14:36:00.530-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'),?DstIP<:?DstIPSet.
2017-06-152 14:36:00.543 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
2017-06-152 14:36:00.543 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8
Ia0hSFKXGzho4ZzaH6n6QZ5hoVJlQK4cvqRwbp2lh9f3RWzDVkeg-eoVyUUEPaC-Yr81pm1bCWUsKqb6RQoV2RPWV2KNB5rKH3XOyZSY-Vwm7_jm0D-iueW0mKvxHDx1Cy3KeqBEgrNgte1qEEYUDQeOkWvaQ1E4bsf7GVnEWRZ5_bcOtgxq5ODIyLVZBlKsFy657wRZWmhDWfQOX69nMltvlsdzFITUGybtlnL9314XKqJqNDiX4RXZpYSJaf6kSE_cS9r-Qg7oznlLmq4p5d_1y2lZSsd2vXNYxhs7-Jj5b-IFUThQ04G_rilaquFDZiFSVPqOPsBbIINgDn0lkA
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.530-04:00, 2020-06-01T14:36:00.530-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA'),?DstIP<:?DstIPSet.
2017-06-152 14:36:00.609 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8) is posted (code: 204)
2017-06-152 14:36:00.609 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8']; FreshGoals: List()
2017-06-152 14:36:00.616 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:00.616 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.616 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.617 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:36:00.617 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:36:00.617 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 14:36:00.618 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 14:36:00.618 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:36:00.619 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:36:00.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:00.619-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allowStitch(_57012586,_986395174,_3751482596,_168196116,_650385054)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,endorsePA(_1174235746)), :(_1174235746,endorse(_57012586)), :(_57012586,stitch(_986395174,_3751482596,_168196116,_650385054))), Map(?Bob -> _57012586, ?BobSlice -> _986395174, ?ReservID -> _3751482596, ?Slice -> _168196116, ?Node -> _650385054, ?PA -> _1174235746)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:00.620 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:03.934-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allowStitch(_1120291340,_2050587800,_2102388134,_3545177622,_2729023576)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,endorsePA(_314961192)), :(_314961192,endorse(_1120291340)), :(_1120291340,stitch(_2050587800,_2102388134,_3545177622,_2729023576))), Map(?Bob -> _1120291340, ?BobSlice -> _2050587800, ?ReservID -> _2102388134, ?Slice -> _3545177622, ?Node -> _2729023576, ?PA -> _314961192)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:00.621 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 14:36:00.633 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U:
h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
Bw2ZFr0UEs1SDAHr1VQ4_jxQVwnSLbmhISOaVYFHLK2v--o25CKUMo3IkdczcGccz_dgsJ0QU5aAzd7ok_NdBLoYxdr09Gy9wbRnMJbKlQTGZQ4LTa-V6MVjR4DbjbtFxstTWmvR8vMjbAt_hGwySIl7QOta-8wFgoS2lHAXQUWbUrF72UmUWYpc5E4VI-fAiJUhPYe8eeTtq0B9weq6BolX0MgfAKq-sMBsFJJ7S11IAMEVP02ZXI98JojjsM3tWy92pnTu_wgolj9QBrenCV97octYEoolZilXUebPji9R0gj3CmXc8zirFBi1Q39a7_AJtqdqA6YLUotsJkRcNw
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.621-04:00, 2020-06-01T14:36:00.621-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:36:00.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
2017-06-152 14:36:00.634 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U
Bw2ZFr0UEs1SDAHr1VQ4_jxQVwnSLbmhISOaVYFHLK2v--o25CKUMo3IkdczcGccz_dgsJ0QU5aAzd7ok_NdBLoYxdr09Gy9wbRnMJbKlQTGZQ4LTa-V6MVjR4DbjbtFxstTWmvR8vMjbAt_hGwySIl7QOta-8wFgoS2lHAXQUWbUrF72UmUWYpc5E4VI-fAiJUhPYe8eeTtq0B9weq6BolX0MgfAKq-sMBsFJJ7S11IAMEVP02ZXI98JojjsM3tWy92pnTu_wgolj9QBrenCV97octYEoolZilXUebPji9R0gj3CmXc8zirFBi1Q39a7_AJtqdqA6YLUotsJkRcNw
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:00.621-04:00, 2020-06-01T14:36:00.621-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:36:00.976 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U) is posted (code: 204)
2017-06-152 14:36:00.977 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['h6vcGHZVYlxyPF5wEQ2eYxpOUQUeZb5cslkkyFyC35U']; FreshGoals: List()
2017-06-152 14:36:00.984 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(as1)
2017-06-152 14:36:00.985 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIdSet('as1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.985 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:00.985 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:00.985 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:36:00.986 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIdSet('as1')?)
2017-06-152 14:36:00.986 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIdSet('as1'); solution(goals.head): postIdSet('as1'); FreshGoals: List(defpost(postIdSet('as1'), [makeMyIdentitySet('as1')]))
2017-06-152 14:36:00.987 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMyIdentitySet('as1'); solution(goals.head): makeMyIdentitySet('as1'); FreshGoals: List(spec('Construct the identity set for self'), defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:36:00.988 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the identity set for self'); solution(goals.head): spec('Construct the identity set for self'); FreshGoals: List(defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)))
2017-06-152 14:36:00.988 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:00.988-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,spec(interpolate(argsFun(identity set for ,as1,))))), Map($SelfKey -> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB, $CN -> as1)))),
links: List(),
speaksForToken: None,
label: ,
signature: None,
setData: None
2017-06-152 14:36:00.989 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: Some(2020-05-29T14:53:01.975-04:00),
speakersFreshUtil: None,
issuerFreshUntil: Some(2020-05-29T14:53:01.975-04:00),
validatedSpeaker: false,
validated: true,
resetTime: Some(2017-07-01T13:52:04.179-04:00),
queries: List(),
statements: Map(StrLit(_principal) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,principal(MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,spec(identity set for as1))), Map()))),
links: List(),
speaksForToken: None,
label: ,
signature: Some(GYqVMsEicfan21ukhPW0xSygmpF3zcbcT3sYieHOKjV7mHjHk2UCnboc8-D1oUZ36uA64kyHDlFohktkIN3xetddzobQv2K3dDSch5etsG4y4wOGPjsr68WdHJPC0B1hY_GO1fXHXwomUktddU6kLKj1BWg7RQiJzPKEy1R02q_8W4DJ01cH3iwaY6scMM-k1d491iRbIDLsGV0bi62dnmQb6I8Y2a6Px5jHxE8LFa-G5GACVkIRlwYqiPXEKW5B0GX4hJYPKl2Z9b2Yvxj6SOwGePiN_zPhWeQavYZK_YAPu-0Q1k7UtBbXfA0wpIsvFVleVvoiphdWdE2F3iODxQ),
setData: None
2017-06-152 14:36:00.989 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); solution(goals.head): defcon(makeMyIdentitySet('as1'), SetTerm(id = StrLit(0mUbu1bYwv9RBfIjkNOBRw); argRefs = StrLit($SelfKey),StrLit($CN),StrLit($Self); args = ?SelfKey_1,'as1',?Self_1; template = SlogSetTemplate(Map(StrLit(_principal) -> Set(StyStmt(List(principal($_3913207006), spec(interpolate(argsFun(identity set for ,_767270178,)))), Map($SelfKey -> $_3913207006, $CN -> _767270178)))),None)); FreshGoals: List()
2017-06-152 14:36:01.004 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E:
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
QLViyiisnavOjva_8hoJYHty856UfBRsResUh2BO4KSHcSe55jREMtbYv2zZ_k_I484NYcyDMFX8FZ_ekHc6FuCaaWEfzBtRw5oXwb_bA91Bxda_JAbLYM2NOmt3GufrmsJadyZDlIMwoxWB9GMT5isdGBFGWW5TOEZeQo7CtEdbPMKxH6oS0AYW_BEVDnSpnfcMjgKyRI_np5RxTT87v-Urr0xmB3b-_QurzCzgVD3WfQlM1xprym1wBaoTHuXbVjonWvHKtuTmCtzXiU2XfM9IGtEOrTtAVxV7gfgK2D3CGMadGnIXQ4Kf7VSBrEJ8JiCKE16hIgg9MXhGX9G7mw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:00.990-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').
2017-06-152 14:36:01.004 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:01.004 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
QLViyiisnavOjva_8hoJYHty856UfBRsResUh2BO4KSHcSe55jREMtbYv2zZ_k_I484NYcyDMFX8FZ_ekHc6FuCaaWEfzBtRw5oXwb_bA91Bxda_JAbLYM2NOmt3GufrmsJadyZDlIMwoxWB9GMT5isdGBFGWW5TOEZeQo7CtEdbPMKxH6oS0AYW_BEVDnSpnfcMjgKyRI_np5RxTT87v-Urr0xmB3b-_QurzCzgVD3WfQlM1xprym1wBaoTHuXbVjonWvHKtuTmCtzXiU2XfM9IGtEOrTtAVxV7gfgK2D3CGMadGnIXQ4Kf7VSBrEJ8JiCKE16hIgg9MXhGX9G7mw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:00.990-04:00, 2020-05-29T14:53:01.975-04:00, PT720H
SHA256withRSA


principal('MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn_lUMfmUqJcI-oeDc5lhhIxrCTC11kfXroFrDfdjDEZzDiMYQwLYg8GmPlgDNdWsnzNDVeRWJBqXiQRLMdpw5qKZwsfDqYW6YS-jAOlY485hwHVFdUWJ84BV81xQh6-pfu69376vKRvjSlkv28eV1neYx-CVZYRR1geJDq9MRBnTWpoag1ahTTjRpjrgKhV9hdLPQ9qf4qhCoHz94OBHUqoL9aTR0oFJCos2nSGQH-9G7XNpu3YGa_b3cwjrnmd4YhcalJLeKoiT4SxUZR69BmLVCdCtIpRLyZy-707Z9DuQ8Z4tK25x8nIPdcwZHIUfA_gLnsmoG1nRSf_m5F0aBwIDAQAB'):-spec('identity set for as1').
2017-06-152 14:36:01.045 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) is posted (code: 204)
2017-06-152 14:36:01.045 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIdSet('as1'), [makeMyIdentitySet('as1')]); solution(goals.head): ['bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E']; FreshGoals: List()
2017-06-152 14:36:01.052 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:01.053 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postSubjectSet()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.053 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.053 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:01.054 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:36:01.054 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postSubjectSet()?)
2017-06-152 14:36:01.054 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postSubjectSet(); solution(goals.head): postSubjectSet(); FreshGoals: List(defpost(postSubjectSet(), [makeMySubjectSet()]))
2017-06-152 14:36:01.055 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeMySubjectSet(); solution(goals.head): makeMySubjectSet(); FreshGoals: List(spec('Construct the subject set for self'), defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:36:01.055 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Construct the subject set for self'); solution(goals.head): spec('Construct the subject set for self'); FreshGoals: List(defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)))
2017-06-152 14:36:01.056 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:01.056-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),
links: ArrayBuffer(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:01.056 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.220-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:01.057 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); solution(goals.head): defcon(makeMySubjectSet(), SetTerm(id = StrLit(Tje_WvXEd37nENcW8rcL3w); argRefs = StrLit($Self),StrLit($SetVersion),StrLit($SelfKey); args = ?Self_1,?SetVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_3075638208,))))), Map($Self -> $_3204996462, $SetVersion -> _3075638208))), StrLit(_link) -> Set(StyStmt(List(link($_3204996462)), Map($Self -> $_3204996462, $SetVersion -> _3075638208)))),None)); FreshGoals: List()
2017-06-152 14:36:01.070 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4:
IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
ng1G6URiHa5hsY0J5ZTQGDHR9FF6VcSeJLshwvG7w9s7gRXMUMnFN0rc6XR91XbShmqX99fE5EgCcNP39NZFgI8RQPbfFDJm0QhC7ibuiF2CMtMh2kear24_NlRrpqQtQV4mhqNZHeFxLUllXCkQfA9SW1NOzgp_rI71z9ARqnICkC1L1GF89saK-NeN1f2GiDbV-j_xjzwcrDr-dUeXQa-ZyVAV_rHJPXyIC3a_-Kt0OUNAJJYgXndaWmeowvYjclBZnMzKQdOGydtOCnN_qv5wi3oz8jveVNRqQhU-BAdtObPGHP0Ez4SxIoEmD7xC2LIrt_xMaj_kI21HKIDyXw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.058-04:00, 2020-06-01T14:36:01.058-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:01.070 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
2017-06-152 14:36:01.070 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
ng1G6URiHa5hsY0J5ZTQGDHR9FF6VcSeJLshwvG7w9s7gRXMUMnFN0rc6XR91XbShmqX99fE5EgCcNP39NZFgI8RQPbfFDJm0QhC7ibuiF2CMtMh2kear24_NlRrpqQtQV4mhqNZHeFxLUllXCkQfA9SW1NOzgp_rI71z9ARqnICkC1L1GF89saK-NeN1f2GiDbV-j_xjzwcrDr-dUeXQa-ZyVAV_rHJPXyIC3a_-Kt0OUNAJJYgXndaWmeowvYjclBZnMzKQdOGydtOCnN_qv5wi3oz8jveVNRqQhU-BAdtObPGHP0Ez4SxIoEmD7xC2LIrt_xMaj_kI21HKIDyXw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.058-04:00, 2020-06-01T14:36:01.058-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:01.096 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4) is posted (code: 204)
2017-06-152 14:36:01.096 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postSubjectSet(), [makeMySubjectSet()]); solution(goals.head): ['IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4']; FreshGoals: List()
2017-06-152 14:36:01.103 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:01.103 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postOwnPrefixPolicy()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.103 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.103 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:01.103 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:36:01.103 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postOwnPrefixPolicy()?)
2017-06-152 14:36:01.104 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postOwnPrefixPolicy(); solution(goals.head): postOwnPrefixPolicy(); FreshGoals: List(defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]))
2017-06-152 14:36:01.104 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ownPrefixPolicy(); solution(goals.head): ownPrefixPolicy(); FreshGoals: List(defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)))
2017-06-152 14:36:01.105 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:01.105-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_986436722,_3423947092)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_986436722,_3423947092))), Map(?Prcpl -> _986436722, ?Prefix -> _3423947092, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3240198698,_338585624)), :(_1898079914,allocate(_3240198698,_338585624)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1898079914,_370925106)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_338585624,_370925106))), Map(?Prcpl -> _3240198698, ?Prefix -> _338585624, ?UpStream -> _1898079914, ?PrefixSet -> _370925106)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:01.106 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.340-04:00),
queries: List(),
statements: Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),
links: List(),
speaksForToken: None,
label: own prefix policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:01.106 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); solution(goals.head): defcon(ownPrefixPolicy(), SetTerm(id = StrLit(njV-6Q4s2GmnM9d92RMy-Q); argRefs = StrLit($RpkiRoot),StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?RpkiRoot_1,?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(own prefix policy(,_916529796,))))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796))), StrLit(ownPrefix2) -> Set(StyStmt(List(ownPrefix(_2437565404,_2975977160), :($_1424923808,allocate(_2437565404,_2975977160))), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)), StyStmt(List(ownPrefix(_2437565404,_2975977160), :(_952324720,allocate(_2437565404,_2975977160)), ownPrefix(_952324720,_122282734), isInRange(_2975977160,_122282734)), Map(?Prcpl -> _2437565404, ?Prefix -> _2975977160, $RpkiRoot -> $_1424923808, ?UpStream -> _952324720, ?PrefixSet -> _122282734, $PolicyVersion -> _916529796)))),None)); FreshGoals: List()
2017-06-152 14:36:01.122 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg:
MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
Ogfp04xYDeMJcOH-z2y6CyxFLSyDNGj6Q8hO_vvx3BH9Zq951DFqZAvxfGAS0q4wxrM8wd0e79WoFSj2umduXArvBicQvjlxaoyDGqX6cUEXc-pyDEY1_ggkkuLdwOlOxNEE9ZDE0MSNoPmk6YSHjzUSOaNubG9nBcuPcbKaLl-lHP5_PXcC_nE_CvmIbyD6HNspdv2H20n0wfR_vRR8SrL7EyO4Ehfp0XC2Tkp81MpNUChUef5qBalsZNoC6zap-lcRlRS7crat7VkjKSkNsN2i3rHbtu-iMexliEOw9SjR340gDvsssomQXz9tVf64dlxB2kUBNRShqPONvhzyWA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.107-04:00, 2020-06-01T14:36:01.107-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:36:01.122 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
2017-06-152 14:36:01.122 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg
Ogfp04xYDeMJcOH-z2y6CyxFLSyDNGj6Q8hO_vvx3BH9Zq951DFqZAvxfGAS0q4wxrM8wd0e79WoFSj2umduXArvBicQvjlxaoyDGqX6cUEXc-pyDEY1_ggkkuLdwOlOxNEE9ZDE0MSNoPmk6YSHjzUSOaNubG9nBcuPcbKaLl-lHP5_PXcC_nE_CvmIbyD6HNspdv2H20n0wfR_vRR8SrL7EyO4Ehfp0XC2Tkp81MpNUChUef5qBalsZNoC6zap-lcRlRS7crat7VkjKSkNsN2i3rHbtu-iMexliEOw9SjR340gDvsssomQXz9tVf64dlxB2kUBNRShqPONvhzyWA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.107-04:00, 2020-06-01T14:36:01.107-04:00, PT720H
SHA256withRSA
own prefix policy(policy23)

ownPrefix(?Prcpl,?Prefix):-'UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA':allocate(?Prcpl,?Prefix).
ownPrefix(?Prcpl,?Prefix):-?UpStream:allocate(?Prcpl,?Prefix),ownPrefix(?UpStream,?PrefixSet),?Prefix<:?PrefixSet.
2017-06-152 14:36:01.350 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg) is posted (code: 204)
2017-06-152 14:36:01.350 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postOwnPrefixPolicy(), [ownPrefixPolicy()]); solution(goals.head): ['MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg']; FreshGoals: List()
2017-06-152 14:36:01.357 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:01.357 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postRoutingPolicy()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.358 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.358 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:01.358 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:36:01.358 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postRoutingPolicy()?)
2017-06-152 14:36:01.359 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postRoutingPolicy(); solution(goals.head): postRoutingPolicy(); FreshGoals: List(defpost(postRoutingPolicy(), [routingPolicy()]))
2017-06-152 14:36:01.360 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: routingPolicy(); solution(goals.head): routingPolicy(); FreshGoals: List(defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)))
2017-06-152 14:36:01.361 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:01.361-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4232323274,_1047989316,_910879386,_3816103170)), :(_4232323274,advertise(_1047989316,_910879386,_3816103170)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_4232323274,_1072313302)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1047989316,_1072313302))), Map(?DstIP -> _1047989316, ?Path -> _910879386, ?DstIPSet -> _1072313302, ?Speaker -> _4232323274, ?AS -> _3816103170)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3094949186,_3624279788,_2463151586,_4241117420)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_2359845130|_1706155788]=_2463151586), :(_3094949186,advertise(_3624279788,_2463151586,_4241117420)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1926826492,_3694819962,_1706155788,_3094949186)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3624279788,_3694819962))), Map(?DstIP -> _3624279788, ?Path -> _2463151586, ?DstIPSet -> _3694819962, ?Speaker -> _3094949186, ?AS -> _4241117420, ?Head -> _2359845130, ?Tail -> _1706155788, ?P -> _1926826492))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_324399302,_4193715230)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1138443316,_1295855518,_4193715230,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_324399302,_1295855518))), Map(?DstIP -> _324399302, ?Path -> _4193715230, ?Dst -> _1138443316, ?DstIPSet -> _1295855518, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:01.362 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.414-04:00),
queries: List(),
statements: Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),
links: List(),
speaksForToken: None,
label: routing policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:01.362 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); solution(goals.head): defcon(routingPolicy(), SetTerm(id = StrLit(x0W_YmcRpBRxt3M4JC8rGg); argRefs = StrLit($Self),StrLit($PolicyVersion),StrLit($SelfKey); args = ?Self_1,?PolicyVersion_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(routing policy(,_2047307156,))))), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(authorizedAdvertise4) -> Set(StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), ownPrefix(_2979045362,_4057709338), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)), StyStmt(List(authorizedAdvertise(_2979045362,_554434754,_3703363048,_2327383996), [_2989129596|_2667905352]=_3703363048, :(_2979045362,advertise(_554434754,_3703363048,_2327383996)), authorizedAdvertise(_2858373716,_4057709338,_2667905352,_2979045362), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156))), StrLit(route2) -> Set(StyStmt(List(route(_554434754,_3703363048), authorizedAdvertise(_2985364348,_4057709338,_3703363048,$_4095806902), isInRange(_554434754,_4057709338)), Map(?DstIP -> _554434754, ?Path -> _3703363048, ?Dst -> _2985364348, ?DstIPSet -> _4057709338, $Self -> $_4095806902, ?Speaker -> _2979045362, ?AS -> _2327383996, ?Head -> _2989129596, ?Tail -> _2667905352, ?P -> _2858373716, $PolicyVersion -> _2047307156)))),None)); FreshGoals: List()
2017-06-152 14:36:01.378 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg:
sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
T1x-lEsexjbwzQv2PO33ZbywqjAdF1cSXgK9ts2y3HNlFaP0rq6kJfZgOcE2OcLMlM5qwRu01LyQJO7ko9tBpSkaQPyNpqgS82k5WD4SR_qzyaY5pw0UAPv5Ft6Pl2_d4MI4yVwi9HW8sQrmc9nRSmXoZNeuXE7LZh78vr8O7I6673sdmqxnjB9jY8fYuIR9hBN1MGJvHGQvu59gJCecQMfcSNBKDXE5OGZkOoEsUKSXHbbdrj4a2o6aCGIihjsETgTNT71WaFjrIsRry0UO--QhLRsKN5sHC0TN3T1CONZVqzRRj3qip3NfDbf_3kcTJLBdV2pa8Vx-Uz2kQO8E0Q
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.364-04:00, 2020-06-01T14:36:01.364-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),?DstIP<:?DstIPSet.
2017-06-152 14:36:01.378 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
2017-06-152 14:36:01.378 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg
T1x-lEsexjbwzQv2PO33ZbywqjAdF1cSXgK9ts2y3HNlFaP0rq6kJfZgOcE2OcLMlM5qwRu01LyQJO7ko9tBpSkaQPyNpqgS82k5WD4SR_qzyaY5pw0UAPv5Ft6Pl2_d4MI4yVwi9HW8sQrmc9nRSmXoZNeuXE7LZh78vr8O7I6673sdmqxnjB9jY8fYuIR9hBN1MGJvHGQvu59gJCecQMfcSNBKDXE5OGZkOoEsUKSXHbbdrj4a2o6aCGIihjsETgTNT71WaFjrIsRry0UO--QhLRsKN5sHC0TN3T1CONZVqzRRj3qip3NfDbf_3kcTJLBdV2pa8Vx-Uz2kQO8E0Q
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.364-04:00, 2020-06-01T14:36:01.364-04:00, PT720H
SHA256withRSA
routing policy(policy23)

authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-?Speaker:advertise(?DstIP,?Path,?AS),ownPrefix(?Speaker,?DstIPSet),?DstIP<:?DstIPSet.
authorizedAdvertise(?Speaker,?DstIP,?Path,?AS):-[?Head|?Tail]=?Path,?Speaker:advertise(?DstIP,?Path,?AS),authorizedAdvertise(?P,?DstIPSet,?Tail,?Speaker),?DstIP<:?DstIPSet.
route(?DstIP,?Path):-authorizedAdvertise(?Dst,?DstIPSet,?Path,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),?DstIP<:?DstIPSet.
2017-06-152 14:36:01.657 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg) is posted (code: 204)
2017-06-152 14:36:01.657 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postRoutingPolicy(), [routingPolicy()]); solution(goals.head): ['sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg']; FreshGoals: List()
2017-06-152 14:36:01.664 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List()
2017-06-152 14:36:01.664 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postStitchPolicy()? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.664 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.664 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:01.665 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:36:01.665 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postStitchPolicy()?)
2017-06-152 14:36:01.665 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postStitchPolicy(); solution(goals.head): postStitchPolicy(); FreshGoals: List(defpost(postStitchPolicy(), [stitchPolicy()]))
2017-06-152 14:36:01.666 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: stitchPolicy(); solution(goals.head): stitchPolicy(); FreshGoals: List(spec('carrier slice stitching policy'), defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:36:01.666 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrier slice stitching policy'); solution(goals.head): spec('carrier slice stitching policy'); FreshGoals: List(defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)))
2017-06-152 14:36:01.667 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:01.666-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,allowStitch(_3990459440,_2110452364,_1836903346,_4118664404,_3559171678)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,endorsePA(_4266684612)), :(_4266684612,endorse(_3990459440)), :(_3990459440,stitch(_2110452364,_1836903346,_4118664404,_3559171678))), Map(?Bob -> _3990459440, ?BobSlice -> _2110452364, ?ReservID -> _1836903346, ?Slice -> _4118664404, ?Node -> _3559171678, ?PA -> _4266684612)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:01.667 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.495-04:00),
queries: List(),
statements: Map(StrLit(allowStitch5) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,allowStitch(_1979397574,_1866183896,_2682059062,_3799469144,_1317937364)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,endorsePA(_4255244456)), :(_4255244456,endorse(_1979397574)), :(_1979397574,stitch(_1866183896,_2682059062,_3799469144,_1317937364))), Map(?Bob -> _1979397574, ?BobSlice -> _1866183896, ?ReservID -> _2682059062, ?Slice -> _3799469144, ?Node -> _1317937364, ?PA -> _4255244456)))),
links: List(),
speaksForToken: None,
label: stitch policy(policy23),
signature: None,
setData: None
2017-06-152 14:36:01.667 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); solution(goals.head): defcon(stitchPolicy(), SetTerm(id = StrLit(K67hkVISEW7WE5-nRIox5g); argRefs = StrLit($PolicyVersion),StrLit($Self),StrLit($SelfKey); args = ?PolicyVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(stitch policy(,_3742665642,))))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642))), StrLit(allowStitch5) -> Set(StyStmt(List(allowStitch(_928298590,_3723003926,_1807567444,_277869906,_2197518170), endorsePA(_449500970), :(_449500970,endorse(_928298590)), :(_928298590,stitch(_3723003926,_1807567444,_277869906,_2197518170))), Map(?Bob -> _928298590, ?BobSlice -> _3723003926, ?ReservID -> _1807567444, ?Slice -> _277869906, ?Node -> _2197518170, ?PA -> _449500970, $PolicyVersion -> _3742665642)))),None)); FreshGoals: List()
2017-06-152 14:36:01.679 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4:
FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
N1-D9-voIYFtD7OzzvO9jSzGuPXVfM3prOB21UUZOqO-1xeoRz6O-exB68ptFFOLEUx3KDgVBZ2gDQQnrjQg0h7tQ_r4yRHdWb4Mmk1ylCa72nye3TrxZ3UBjsWfyy_yRslpovxwbcz0zgYKhf-Nqt4NnhMedAz07FXdqnTmgIUJkCtNNvYc7thAci6_-roWMRpzHhr1OG9sFp8sKXW4UjZ2c5DadamRy_cq6Vt9vfLZVgIhiakvs6KtaZHMsGoJ1-QksYOGxz2VZOinEwXFbholWrdi8DTxT7PObeSilA6jZnfuV_g8Qb__novEAtnCbBxyiQa_11AF0EMNqR7xLw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.668-04:00, 2020-06-01T14:36:01.668-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:36:01.679 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
2017-06-152 14:36:01.680 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4
N1-D9-voIYFtD7OzzvO9jSzGuPXVfM3prOB21UUZOqO-1xeoRz6O-exB68ptFFOLEUx3KDgVBZ2gDQQnrjQg0h7tQ_r4yRHdWb4Mmk1ylCa72nye3TrxZ3UBjsWfyy_yRslpovxwbcz0zgYKhf-Nqt4NnhMedAz07FXdqnTmgIUJkCtNNvYc7thAci6_-roWMRpzHhr1OG9sFp8sKXW4UjZ2c5DadamRy_cq6Vt9vfLZVgIhiakvs6KtaZHMsGoJ1-QksYOGxz2VZOinEwXFbholWrdi8DTxT7PObeSilA6jZnfuV_g8Qb__novEAtnCbBxyiQa_11AF0EMNqR7xLw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:01.668-04:00, 2020-06-01T14:36:01.668-04:00, PT720H
SHA256withRSA
stitch policy(policy23)

allowStitch(?Bob,?BobSlice,?ReservID,?Slice,?Node):-endorsePA(?PA),?PA:endorse(?Bob),?Bob:stitch(?BobSlice,?ReservID,?Slice,?Node).
2017-06-152 14:36:01.819 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4) is posted (code: 204)
2017-06-152 14:36:01.819 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postStitchPolicy(), [stitchPolicy()]); solution(goals.head): ['FTamhQUPWGukVUVicCmVUExV1UbWck81WF6kvkCDFh4']; FreshGoals: List()
2017-06-152 14:36:01.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 14:36:01.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:36:01.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:36:01.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 14:36:01.827 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 14:36:01.828 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:01.828 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:01.829 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:01.828-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:01.829 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.755-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:01.829 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 14:36:01.842 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY:
jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
fM8aYSwr0w8FzZseXkKrgJ-z6XYx8Ks0ORnA5OJJS-8YCXJRTzvD4dDVcDWt8gpttFQEJtM08eBHq6bqOXfDvjKW9WZOeZ9GDTLsOeS6AIy_mhV2id_rQX13VP9FWqbudf4DYSAIC-te2aMJ17qFsj9ICBUw-GNXQiJuLUUTAhALpFbJ8ObtnB73snoP3kS52Wf8m-8Vqitz8zBsPC2-a2R7J7aXgCecLT4iFBYTEKqx-w5yDInmnhH6bQd27nDzpJRVKplehj55fxe96ETFuNSAJC6sh3hR1ilEEynFROITuzPBcIQt6qK2XnD5EoyDDBOJ0X9GCdCa9X_lv42tPw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:36:01.830-04:00, 2020-06-01T14:36:01.830-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:01.842 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
2017-06-152 14:36:01.842 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY
fM8aYSwr0w8FzZseXkKrgJ-z6XYx8Ks0ORnA5OJJS-8YCXJRTzvD4dDVcDWt8gpttFQEJtM08eBHq6bqOXfDvjKW9WZOeZ9GDTLsOeS6AIy_mhV2id_rQX13VP9FWqbudf4DYSAIC-te2aMJ17qFsj9ICBUw-GNXQiJuLUUTAhALpFbJ8ObtnB73snoP3kS52Wf8m-8Vqitz8zBsPC2-a2R7J7aXgCecLT4iFBYTEKqx-w5yDInmnhH6bQd27nDzpJRVKplehj55fxe96ETFuNSAJC6sh3hR1ilEEynFROITuzPBcIQt6qK2XnD5EoyDDBOJ0X9GCdCa9X_lv42tPw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:36:01.830-04:00, 2020-06-01T14:36:01.830-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:01.942 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY) is posted (code: 204)
2017-06-152 14:36:01.943 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['jcXNkQa2lA7_1nWjhVJprZSPWDXmrWJa2ZyETyCpjuY']; FreshGoals: List()
2017-06-152 14:36:01.950 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)
2017-06-152 14:36:01.950 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.950 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:01.950 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:36:01.951 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:36:01.951 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')?)
2017-06-152 14:36:01.952 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); solution(goals.head): postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); FreshGoals: List(defpost(postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), [endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')]))
2017-06-152 14:36:01.953 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); solution(goals.head): endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:01.953 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:01.954 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:01.954-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:01.954 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.963-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Member -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Member -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:01.955 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 14:36:01.967 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
eAkJES3_fVOuVZhOp84DirBHk_u681wnnip_SzFL_r7KtfzoPqA2LJhnxSGeUBEXRBQ4R2Qz98XcZ22aSHH-Neu8NeQuelWb9juHD4JXP0zX5rbiQ9tnkfo668DGpWexYnMazslXbzLM8afH49ThP-pI9V5lmxcQIVIGMvXtSUea1BfrW5ewYXdEQh2ROe0UWLkLmZm2jMDSKiHY5cYBlXKnMoselAerQ0btXVEZeUAprUc42I0gvEHGVpZAcren3Fwl5EZOn7odr9su8CokWjPVFgWWgsIHgLmZQKUcwkCiutWN5x6n7oQxEA0KnltTlCyHwovnDwxulGjKX6ZGyQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:01.956-04:00, 2020-06-01T14:36:01.956-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:01.967 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 14:36:01.967 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
eAkJES3_fVOuVZhOp84DirBHk_u681wnnip_SzFL_r7KtfzoPqA2LJhnxSGeUBEXRBQ4R2Qz98XcZ22aSHH-Neu8NeQuelWb9juHD4JXP0zX5rbiQ9tnkfo668DGpWexYnMazslXbzLM8afH49ThP-pI9V5lmxcQIVIGMvXtSUea1BfrW5ewYXdEQh2ROe0UWLkLmZm2jMDSKiHY5cYBlXKnMoselAerQ0btXVEZeUAprUc42I0gvEHGVpZAcren3Fwl5EZOn7odr9su8CokWjPVFgWWgsIHgLmZQKUcwkCiutWN5x6n7oQxEA0KnltTlCyHwovnDwxulGjKX6ZGyQ
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:01.956-04:00, 2020-06-01T14:36:01.956-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:02.345 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 14:36:02.345 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8'), [endorsePM('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 14:36:02.354 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 14:36:02.355 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:02.355 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:02.355 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:36:02.355 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:36:02.355 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 14:36:02.356 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 14:36:02.357 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:02.357 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:02.358 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:02.358-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:02.359 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:02.090-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Self -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:02.359 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 14:36:02.373 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs:
p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
FzaS5vjOR4tZBgsW7KPZswyycXvI55UV-oF_CJK2zCyFTXgSozgPxWAIndZeeKjqI8MwhkZIEYpTTl4vOpSDxmcfWZfT007CDtT1EHzw1fL80rQkhV34HxkERyD7upMCvFwfIqH0Q8BPWS8YCm9VsDQgUUKrnGjpo-JubzfcCqIpzs8xFTd7FZw_tCRUdKzz1BZ4tSIWBRdgf5rlkiiZePtHluBdUwHyRt--wi3fW1lo5xqrMNomRHfZLNfwfmunm-wWugXNvLgDzCcocZBFJ2-pAN-PaXzjGN0MMjdHRXEfusmUp7J-pSUeQT-4ohhw1yptAJVd8-gB4JJ-UhF0yw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:36:02.360-04:00, 2020-06-01T14:36:02.360-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:02.373 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
2017-06-152 14:36:02.373 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs
FzaS5vjOR4tZBgsW7KPZswyycXvI55UV-oF_CJK2zCyFTXgSozgPxWAIndZeeKjqI8MwhkZIEYpTTl4vOpSDxmcfWZfT007CDtT1EHzw1fL80rQkhV34HxkERyD7upMCvFwfIqH0Q8BPWS8YCm9VsDQgUUKrnGjpo-JubzfcCqIpzs8xFTd7FZw_tCRUdKzz1BZ4tSIWBRdgf5rlkiiZePtHluBdUwHyRt--wi3fW1lo5xqrMNomRHfZLNfwfmunm-wWugXNvLgDzCcocZBFJ2-pAN-PaXzjGN0MMjdHRXEfusmUp7J-pSUeQT-4ohhw1yptAJVd8-gB4JJ-UhF0yw
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:36:02.360-04:00, 2020-06-01T14:36:02.360-04:00, PT720H
SHA256withRSA
subject(set29)

link(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:02.918 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs) is posted (code: 204)
2017-06-152 14:36:02.918 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs']; FreshGoals: List()
2017-06-152 14:36:02.926 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 14:36:02.926 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:02.926 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:02.926 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:36:02.926 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:36:02.927 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 14:36:02.927 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 14:36:02.928 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:02.929 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:02.929 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:02.929-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:02.930 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.185-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:02.930 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 14:36:02.945 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token -NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM:
-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
nG7y5wvFpV7W7d7tAUYQHTA59HN1ZIPpXbAe86EbpozpaeJ_4-Mr_4nghbBxyqKrlsEuGdLyEnPbzCO7trWLKrx_p_1YhFOlwEvaTKyHKzFTSky4dFMmtfs4pxOxebzLtu2XdyMolyxHFyKZ_2bBVL2i0MQhDqGXoHeFlTEi_veGZ57E0CqjSeCLmi4o27sFxUu2ntco1LKj9ruBVWxSbJWGdonAoLuvWk6lPy-Gl0dtjCqbi00RZhto0z5VwRI6da3ijcdhqj3eD_nhobhai-Tj03MM9ARx_3AuEHsKcV3ftgtYjQz92yYPbzZRmS-vEYmd9dv8qr5S3e5GUYf6iQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:36:02.931-04:00, 2020-06-01T14:36:02.931-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:02.945 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: -NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
2017-06-152 14:36:02.945 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  -NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM
nG7y5wvFpV7W7d7tAUYQHTA59HN1ZIPpXbAe86EbpozpaeJ_4-Mr_4nghbBxyqKrlsEuGdLyEnPbzCO7trWLKrx_p_1YhFOlwEvaTKyHKzFTSky4dFMmtfs4pxOxebzLtu2XdyMolyxHFyKZ_2bBVL2i0MQhDqGXoHeFlTEi_veGZ57E0CqjSeCLmi4o27sFxUu2ntco1LKj9ruBVWxSbJWGdonAoLuvWk6lPy-Gl0dtjCqbi00RZhto0z5VwRI6da3ijcdhqj3eD_nhobhai-Tj03MM9ARx_3AuEHsKcV3ftgtYjQz92yYPbzZRmS-vEYmd9dv8qr5S3e5GUYf6iQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:36:02.931-04:00, 2020-06-01T14:36:02.931-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:02.989 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM) is posted (code: 204)
2017-06-152 14:36:02.989 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['-NEwcFcc3TGKhF_Cmm6bY8Yn6AUnlMC0QFCGdTXKXFM']; FreshGoals: List()
2017-06-152 14:36:02.995 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)
2017-06-152 14:36:02.996 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:02.996 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:02.996 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:36:02.996 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:36:02.996 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')?)
2017-06-152 14:36:02.997 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); solution(goals.head): postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); FreshGoals: List(defpost(postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), [endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')]))
2017-06-152 14:36:02.997 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); solution(goals.head): endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:02.998 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:02.998 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:02.998-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:02.999 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.963-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Member -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Member -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:02.999 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 14:36:03.012 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
b9K_wl8PYjJDe3fjYlqQ6Ibc3-kJf_5hR6wYoDahfMmnuTZQCc4txHnpKbJWGW6PvZ31K3JLDgJXh_NKIpGxKJpW8QvciG7OzO0Fm82LouwXMZfv0nWs61qXJFsqQk3tqZz_888s-sp8T46ehBGJfOtYbeVWC4cVN2ncHxIIeNK4oAAxG7EJrHfRDV8Tf8z4RguBvRUobVZo558gRUqkfI2-CGVAyQKXYmDGAl8T68CNPRgrxRr4ijpR_vbdYnzNxUBVZDAo6cE0FrYU4h5_pMoMHix7KO8CA-PidiK_Ik-jGIB8Ntz9oRXdzDV_17Sd8qbArYaEVY3L4V2UWESm-g
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:03.000-04:00, 2020-06-01T14:36:03.000-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:03.012 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 14:36:03.012 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
b9K_wl8PYjJDe3fjYlqQ6Ibc3-kJf_5hR6wYoDahfMmnuTZQCc4txHnpKbJWGW6PvZ31K3JLDgJXh_NKIpGxKJpW8QvciG7OzO0Fm82LouwXMZfv0nWs61qXJFsqQk3tqZz_888s-sp8T46ehBGJfOtYbeVWC4cVN2ncHxIIeNK4oAAxG7EJrHfRDV8Tf8z4RguBvRUobVZo558gRUqkfI2-CGVAyQKXYmDGAl8T68CNPRgrxRr4ijpR_vbdYnzNxUBVZDAo6cE0FrYU4h5_pMoMHix7KO8CA-PidiK_Ik-jGIB8Ntz9oRXdzDV_17Sd8qbArYaEVY3L4V2UWESm-g
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:03.000-04:00, 2020-06-01T14:36:03.000-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:03.119 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 14:36:03.119 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'), [endorsePM('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 14:36:03.127 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 14:36:03.127 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.128 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.128 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:36:03.128 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:36:03.128 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 14:36:03.128 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 14:36:03.129 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:03.129 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:03.130 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.130-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:03.130 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:00.952-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Self -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:03.131 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 14:36:03.143 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo:
_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
MM-OMJh6Q_bG8hLxmn6eLy7yhanwRh9YkMllo4J-5wSzS5ML7I8oqdw6WHgCF69C6UY8vueCd-Kujj95p-1go72y4o0M3by_Vg5trvsdhwH-ENTFgfw02aoQ-HCQfQTdHI2q8bhxufrz-P_VlmfBv_DxOr_An1PEb4Zj7B2b17JZtuA2sWECp-yn9yLJJ1fbUU7rNFvwSRqrzsYKtPRNM7HlUtL0ceXAm-MCVYYRE85JzJjTXVkkw3PWjjRZong8b-H6C_3CpPmqDOKOAOgs3hUYoqaFd9OKCY2P3jpVOUg5qytPKkT4F_VNF3zvRYU-l72ca7gllrRTs4eymldszA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:36:03.131-04:00, 2020-06-01T14:36:03.131-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:03.143 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
2017-06-152 14:36:03.143 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo
MM-OMJh6Q_bG8hLxmn6eLy7yhanwRh9YkMllo4J-5wSzS5ML7I8oqdw6WHgCF69C6UY8vueCd-Kujj95p-1go72y4o0M3by_Vg5trvsdhwH-ENTFgfw02aoQ-HCQfQTdHI2q8bhxufrz-P_VlmfBv_DxOr_An1PEb4Zj7B2b17JZtuA2sWECp-yn9yLJJ1fbUU7rNFvwSRqrzsYKtPRNM7HlUtL0ceXAm-MCVYYRE85JzJjTXVkkw3PWjjRZong8b-H6C_3CpPmqDOKOAOgs3hUYoqaFd9OKCY2P3jpVOUg5qytPKkT4F_VNF3zvRYU-l72ca7gllrRTs4eymldszA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:36:03.131-04:00, 2020-06-01T14:36:03.131-04:00, PT720H
SHA256withRSA
subject(set29)

link('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:03.167 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo) is posted (code: 204)
2017-06-152 14:36:03.167 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['_Apc8oUPa6vRGtHp8K9i2VjINjCTSwEwHh-5FDi30Uo']; FreshGoals: List()
2017-06-152 14:36:03.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 14:36:03.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:03.174 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:36:03.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 14:36:03.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 14:36:03.176 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:03.176 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:03.177 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.177-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:03.177 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.638-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:03.178 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 14:36:03.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4:
W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
bR1s1GTQJ4nK7kyx6DeWOIDgrWYjOV00DIP-N8vKxuuHXARwR6Dvt5Le7mtKAdEccQNU9ldof2zs4h9hub0yLiYIAdvR1aDPSKD-xMr2-FCLYVlW9FwEulYR3LbDSgYhY4u9AqzB9jXoay12vy4CpqVpUhKTNICCD_UrYhhmsQW93VqX2j3FP8KSFwcbXSRZzqTvzxBgeOsMlOQojAsVQ0fhZ1GCU-647vuQyRq5M4PXdavsdKx-Bh2la8n8MFBOJaEBshBnrRn4HBzx8v31b3IzSSwyFzXsiOdtMCdNKLOjBrXs_a2sQJfEEpZh5sgM0eyxx8A7SGdSulKdog17_A
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:03.178-04:00, 2020-06-01T14:36:03.178-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:03.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
2017-06-152 14:36:03.188 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4
bR1s1GTQJ4nK7kyx6DeWOIDgrWYjOV00DIP-N8vKxuuHXARwR6Dvt5Le7mtKAdEccQNU9ldof2zs4h9hub0yLiYIAdvR1aDPSKD-xMr2-FCLYVlW9FwEulYR3LbDSgYhY4u9AqzB9jXoay12vy4CpqVpUhKTNICCD_UrYhhmsQW93VqX2j3FP8KSFwcbXSRZzqTvzxBgeOsMlOQojAsVQ0fhZ1GCU-647vuQyRq5M4PXdavsdKx-Bh2la8n8MFBOJaEBshBnrRn4HBzx8v31b3IzSSwyFzXsiOdtMCdNKLOjBrXs_a2sQJfEEpZh5sgM0eyxx8A7SGdSulKdog17_A
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:03.178-04:00, 2020-06-01T14:36:03.178-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:03.258 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4) is posted (code: 204)
2017-06-152 14:36:03.259 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['W4XvDtr3YFJ_kPBYfD478UjG1wHefHXrzr1PFN-a4-4']; FreshGoals: List()
2017-06-152 14:36:03.265 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)
2017-06-152 14:36:03.265 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.265 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.265 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:36:03.265 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:36:03.265 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')?)
2017-06-152 14:36:03.266 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); solution(goals.head): postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); FreshGoals: List(defpost(postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), [endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')]))
2017-06-152 14:36:03.267 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); solution(goals.head): endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:03.267 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:03.268 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.267-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Member -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:03.268 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.963-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Member -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Member -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:03.268 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 14:36:03.277 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
cOxbtC1NJNdvwuEfQuOy1CICPz1XWTC240Q3wsRk842RNqtM9AbHvru8N2Kw4UbzFUzqc_pwQCNsNJNL3BPZQKKNO8xCazGzdmjdbq9G54n-2WUvsyY7KRxxokpTIFahJu4D0g2kcRId_EjcDt2HwbkOwCkd_KwHSjGCDtkVgoe6eNpA8fL74LKD7uzA4J9zQVkiDwqKiwCXc5Zo-j2c6WPc_usdivA9oGiO5PnDU15XjR6wAzvq0U5lu2RKdkMk4eBx1UIQ6htP9SfiiGXyzCmhcR--13KH7NECPv8Uc1EmTZ5nwvg_ndijnpcGZJ7FAb4r-kEhjVALOFWpMxDZZA
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:03.269-04:00, 2020-06-01T14:36:03.269-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:03.277 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 14:36:03.278 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
cOxbtC1NJNdvwuEfQuOy1CICPz1XWTC240Q3wsRk842RNqtM9AbHvru8N2Kw4UbzFUzqc_pwQCNsNJNL3BPZQKKNO8xCazGzdmjdbq9G54n-2WUvsyY7KRxxokpTIFahJu4D0g2kcRId_EjcDt2HwbkOwCkd_KwHSjGCDtkVgoe6eNpA8fL74LKD7uzA4J9zQVkiDwqKiwCXc5Zo-j2c6WPc_usdivA9oGiO5PnDU15XjR6wAzvq0U5lu2RKdkMk4eBx1UIQ6htP9SfiiGXyzCmhcR--13KH7NECPv8Uc1EmTZ5nwvg_ndijnpcGZJ7FAb4r-kEhjVALOFWpMxDZZA
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:03.269-04:00, 2020-06-01T14:36:03.269-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:03.293 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 14:36:03.293 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E'), [endorsePM('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 14:36:03.298 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 14:36:03.298 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.298 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:36:03.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:36:03.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 14:36:03.299 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 14:36:03.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:03.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:03.300 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.300-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:03.301 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.220-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:03.301 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 14:36:03.309 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4:
IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
kmwJcplnCLQsmlGzGnPvKSTmxOq-Rj1kQkLf-3e_cCsGTkp9ROCD5tBH1P82vlLdP3Q5XZbScfzth1C-CywJ10cvNbnAs2Jl10mOn2NCwkG8Nx-JGSpmx4jHgSAK2TDCLQloyiFsQXNkqBd0a8Mr8-hAxwnvJET6tq43VHfaGuAIfevFAdPF8fQPR09dJq5nC-auFiPt3U7pPW0M3uzRaHSo3udj8pfj0qLDrU_rbhw9B3da1kPb2pdAYDdLazb9iWq44rDcPgiBJ6QmU7tykWtEpJLcfyVFVU4Xkh6iRzUZH8oICGzGPNa5Gu8Fg_RmnbWzdsmcVrCLmX-IF0xeug
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:03.301-04:00, 2020-06-01T14:36:03.301-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:03.309 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
2017-06-152 14:36:03.309 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4
kmwJcplnCLQsmlGzGnPvKSTmxOq-Rj1kQkLf-3e_cCsGTkp9ROCD5tBH1P82vlLdP3Q5XZbScfzth1C-CywJ10cvNbnAs2Jl10mOn2NCwkG8Nx-JGSpmx4jHgSAK2TDCLQloyiFsQXNkqBd0a8Mr8-hAxwnvJET6tq43VHfaGuAIfevFAdPF8fQPR09dJq5nC-auFiPt3U7pPW0M3uzRaHSo3udj8pfj0qLDrU_rbhw9B3da1kPb2pdAYDdLazb9iWq44rDcPgiBJ6QmU7tykWtEpJLcfyVFVU4Xkh6iRzUZH8oICGzGPNa5Gu8Fg_RmnbWzdsmcVrCLmX-IF0xeug
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:36:03.301-04:00, 2020-06-01T14:36:03.301-04:00, PT720H
SHA256withRSA
subject(set29)

link(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:03.314 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4) is posted (code: 204)
2017-06-152 14:36:03.314 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['IvQv8_04pj-BuLw6eLHyFjj5LBRr_uE-OrJDvzM2iT4']; FreshGoals: List()
2017-06-152 14:36:03.319 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)
2017-06-152 14:36:03.319 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.319 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.319 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:36:03.319 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:36:03.319 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')?)
2017-06-152 14:36:03.320 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]))
2017-06-152 14:36:03.320 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); solution(goals.head): endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'); FreshGoals: List(spec('carrierSlice states PA'), defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:03.320 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('carrierSlice states PA'); solution(goals.head): spec('carrierSlice states PA'); FreshGoals: List(defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)))
2017-06-152 14:36:03.321 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.321-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:03.321 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:05.814-04:00),
queries: List(),
statements: Map(StrLit(endorsePA1) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,endorsePA(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc))), Map($PA -> KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc)))),
links: List(),
speaksForToken: None,
label: my project authorization(set29),
signature: None,
setData: None
2017-06-152 14:36:03.321 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); solution(goals.head): defcon(endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), SetTerm(id = StrLit(dywZKs1WxdYJjijuyMaPlQ); argRefs = StrLit($PA),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(my project authorization(,_2233326052,))))), Map($PA -> $_3619829710, $SetVersion -> _2233326052))), StrLit(endorsePA1) -> Set(StyStmt(List(endorsePA($_3619829710)), Map($PA -> $_3619829710, $SetVersion -> _2233326052)))),None)); FreshGoals: List()
2017-06-152 14:36:03.329 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA:
7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
mpYEOtRvwEDrtLwF48STlBplpdegTNDfnc8bZJ92daBzmy2VWNNFdrFDuLzugAjF1iRjTeC6uDhsp7MhP8_-Ygnd3tTmHL6aZoGmc5earEy6hJnen78z3U7BDEM8T2lObjnBTSqJlAnarJfmkrARzE5fkuVHdHHB-6KA_JWMHMoCg9ey0lFqbv_H47FkHK5i8TdR1Fh-0xqkZwPwIXjP4NlLb5llBsu4hTV12hyPORIqWF7UenhkE--T626FLzVlLcXorqtqpmwaUIS5G4oemD9MuoB4SX2JKIZ2eQnLzz99ZBF4ePh6EvcBtNTNZ5MIWgHW7woWPGIZjA43xGTxTQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:36:03.322-04:00, 2020-06-01T14:36:03.322-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:03.329 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
2017-06-152 14:36:03.329 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA
mpYEOtRvwEDrtLwF48STlBplpdegTNDfnc8bZJ92daBzmy2VWNNFdrFDuLzugAjF1iRjTeC6uDhsp7MhP8_-Ygnd3tTmHL6aZoGmc5earEy6hJnen78z3U7BDEM8T2lObjnBTSqJlAnarJfmkrARzE5fkuVHdHHB-6KA_JWMHMoCg9ey0lFqbv_H47FkHK5i8TdR1Fh-0xqkZwPwIXjP4NlLb5llBsu4hTV12hyPORIqWF7UenhkE--T626FLzVlLcXorqtqpmwaUIS5G4oemD9MuoB4SX2JKIZ2eQnLzz99ZBF4ePh6EvcBtNTNZ5MIWgHW7woWPGIZjA43xGTxTQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:36:03.322-04:00, 2020-06-01T14:36:03.322-04:00, PT720H
SHA256withRSA
my project authorization(set29)

endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc').
2017-06-152 14:36:03.660 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA) is posted (code: 204)
2017-06-152 14:36:03.660 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc'), [endorsePA('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')]); solution(goals.head): ['7H8zdJyl4WC8gAGEdsbdyK-J9AdKf_ilUl0gNJgtfrA']; FreshGoals: List()
2017-06-152 14:36:03.667 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)
2017-06-152 14:36:03.668 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')? 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.668 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc) 
 requestedEnv: Map(Principal -> Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.668 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-152 14:36:03.668 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc')
    safelangId             = 8
2017-06-152 14:36:03.669 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')?)
2017-06-152 14:36:03.669 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); solution(goals.head): postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); FreshGoals: List(defpost(postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), [endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')]))
2017-06-152 14:36:03.670 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); solution(goals.head): endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'); FreshGoals: List(spec('Endorse a project member'), defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:03.670 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Endorse a project member'); solution(goals.head): spec('Endorse a project member'); FreshGoals: List(defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)))
2017-06-152 14:36:03.671 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.671-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Member -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:03.672 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
subject: Some(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:04.963-04:00),
queries: List(),
statements: Map(StrLit(endorse1) -> Set(StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8))), Map($Member -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($Member -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($Member -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc,endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Member -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),
links: List(),
speaksForToken: None,
label: endorse project member(set29),
signature: None,
setData: None
2017-06-152 14:36:03.672 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); solution(goals.head): defcon(endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), SetTerm(id = StrLit(xpmdpi25_cQp7qoNAtTTMA); argRefs = StrLit($Member),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(endorse project member(,_361784756,))))), Map($Member -> $_3560752578, $SetVersion -> _361784756))), StrLit(endorse1) -> Set(StyStmt(List(endorse($_3560752578)), Map($Member -> $_3560752578, $SetVersion -> _361784756)))),None)); FreshGoals: List()
2017-06-152 14:36:03.688 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo:
_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
NvF7A92QqZxa3DMgLgiXhLL-w73ZqjhrmaEu8ziVnnXH6JCj84KOq4QApt20cOi0QnwiXx5JmvKSXYERLe4ZbX-1VlP5zgWBqklUVbK2wnwuXDP9H4Xx9fUoWuCANgvG3tUrfcYcbGJooggOjB6T1fkR4mORXErB4oAB-ob7Ij7FUqRIbyRO7iBtyuopfdGW2uIUQ-fd6dZnzjqRJRnSE2G8YjuT3OF8-0Z3IJsmk8aY-0ZaqwMkHwkFahX_WbiNi2kStg4zk2GzTOBLkDcgKJdJM9B74_hBwS6d0cTouH9V3eF7abOuJewXTdw0v73V8j6D90UoJyM9YMr5mXr0AA
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:03.673-04:00, 2020-06-01T14:36:03.673-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:03.689 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
2017-06-152 14:36:03.689 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo
NvF7A92QqZxa3DMgLgiXhLL-w73ZqjhrmaEu8ziVnnXH6JCj84KOq4QApt20cOi0QnwiXx5JmvKSXYERLe4ZbX-1VlP5zgWBqklUVbK2wnwuXDP9H4Xx9fUoWuCANgvG3tUrfcYcbGJooggOjB6T1fkR4mORXErB4oAB-ob7Ij7FUqRIbyRO7iBtyuopfdGW2uIUQ-fd6dZnzjqRJRnSE2G8YjuT3OF8-0Z3IJsmk8aY-0ZaqwMkHwkFahX_WbiNi2kStg4zk2GzTOBLkDcgKJdJM9B74_hBwS6d0cTouH9V3eF7abOuJewXTdw0v73V8j6D90UoJyM9YMr5mXr0AA
KXwvxF_rWupThUEAKwmkMTuhV8X-hqZXOAtMkWBFapc
2017-06-01T14:36:03.673-04:00, 2020-06-01T14:36:03.673-04:00, PT720H
SHA256withRSA
endorse project member(set29)

endorse(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
endorse('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
endorse(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
endorse(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
2017-06-152 14:36:03.708 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) is posted (code: 204)
2017-06-152 14:36:03.709 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postEndorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24'), [endorsePM('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')]); solution(goals.head): ['_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo']; FreshGoals: List()
2017-06-152 14:36:03.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)
2017-06-152 14:36:03.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:36:03.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:36:03.715 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')?)
2017-06-152 14:36:03.716 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]))
2017-06-152 14:36:03.716 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); solution(goals.head): addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'); FreshGoals: List(spec('Add a token to the user's subject set. Invoke after the user gets a delegation'), defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:03.717 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); solution(goals.head): spec('Add a token to the user's subject set. Invoke after the user gets a delegation'); FreshGoals: List(defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)))
2017-06-152 14:36:03.717 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.717-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:03.718 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:57.797-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo))), Map($Token -> _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo)))),
links: ArrayBuffer(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, _kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo),
speaksForToken: None,
label: subject(set29),
signature: None,
setData: None
2017-06-152 14:36:03.718 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); solution(goals.head): defcon(addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), SetTerm(id = StrLit(7mC17ayc9YY7e2sDXaGOZg); argRefs = StrLit($Token),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(subject(,_2333439866,))))), Map($Token -> $_1580205530, $SetVersion -> _2333439866))), StrLit(_link) -> Set(StyStmt(List(link($_1580205530)), Map($Token -> $_1580205530, $SetVersion -> _2333439866)))),None)); FreshGoals: List()
2017-06-152 14:36:03.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4:
xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
FxFrlUunGjg1GxKTVwXhwhLK5gVb0RoQFM3rQlRqTdCd2iLpkw9_yMFxbbqaneCyWN1ihXGKR99fAJpbdoHWtajM-Fq3PSBTgUIZiWjCVFARcf3mBurJWyy8IO9QF-A8SySXDciKwFzClxnP8xJkzq5w44drVoYkcaOQ20_9gVFNYxM0s8wsfVqXCuRSFNEEDaMWuiTjkPvjlu53VcugBikdr9EHl16hKwJobtP8qbZAtrcdFes7c0s13swTQx2aSQfAaRHLVpy5XH5EZStYPok4F32idkx7j61zvOddF0Z7UeEbn0freRtOEYJ79WK0HmD59K-w_ESI7qfeEYgr7w
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:36:03.718-04:00, 2020-06-01T14:36:03.718-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:03.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
2017-06-152 14:36:03.729 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4
FxFrlUunGjg1GxKTVwXhwhLK5gVb0RoQFM3rQlRqTdCd2iLpkw9_yMFxbbqaneCyWN1ihXGKR99fAJpbdoHWtajM-Fq3PSBTgUIZiWjCVFARcf3mBurJWyy8IO9QF-A8SySXDciKwFzClxnP8xJkzq5w44drVoYkcaOQ20_9gVFNYxM0s8wsfVqXCuRSFNEEDaMWuiTjkPvjlu53VcugBikdr9EHl16hKwJobtP8qbZAtrcdFes7c0s13swTQx2aSQfAaRHLVpy5XH5EZStYPok4F32idkx7j61zvOddF0Z7UeEbn0freRtOEYJ79WK0HmD59K-w_ESI7qfeEYgr7w
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:36:03.718-04:00, 2020-06-01T14:36:03.718-04:00, PT720H
SHA256withRSA
subject(set29)

link(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo').
2017-06-152 14:36:03.734 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4) is posted (code: 204)
2017-06-152 14:36:03.734 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(updateSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo'), [addTokenToSubjectSet('_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo')]); solution(goals.head): ['xVtYmxcqHQTzCJicAtBOtkbUMdCP-7YQtPyxrXJLsh4']; FreshGoals: List()
2017-06-152 14:36:03.740 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.1.1/16")
2017-06-152 14:36:03.740 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postMakeIPTokenSet(ipv4"192.168.1.1/16")? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.740 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.740 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:36:03.740 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:36:03.741 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postMakeIPTokenSet(ipv4"192.168.1.1/16")?)
2017-06-152 14:36:03.741 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postMakeIPTokenSet(ipv4"192.168.1.1/16"); solution(goals.head): postMakeIPTokenSet(ipv4"192.168.1.1/16"); FreshGoals: List(defpost(postMakeIPTokenSet(ipv4"192.168.1.1/16"), [makeIPTokenSet(ipv4"192.168.1.1/16")]))
2017-06-152 14:36:03.741 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: makeIPTokenSet(ipv4"192.168.1.1/16"); solution(goals.head): makeIPTokenSet(ipv4"192.168.1.1/16"); FreshGoals: List(defcon(makeIPTokenSet(ipv4"192.168.1.1/16"), SetTerm(id = StrLit(1qYgFO6dPALxvX7FzW0Aqg); argRefs = StrLit($DlgPrefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ipv4"192.168.1.1/16",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_1102735632,(,_1273557860,))))), Map($DlgPrefix -> _1102735632, $SetVersion -> _1273557860)))),None)))
2017-06-152 14:36:03.742 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.742-04:00),
queries: List(),
statements: Map(),
links: List(),
speaksForToken: None,
label: Token for IP allocation/ipv4"192.168.1.1/16"(set29),
signature: None,
setData: None
2017-06-152 14:36:03.742 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:06.228-04:00),
queries: List(),
statements: Map(),
links: List(),
speaksForToken: None,
label: Token for IP allocation/ipv4"192.168.1.1/16"(set29),
signature: None,
setData: None
2017-06-152 14:36:03.743 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(makeIPTokenSet(ipv4"192.168.1.1/16"), SetTerm(id = StrLit(1qYgFO6dPALxvX7FzW0Aqg); argRefs = StrLit($DlgPrefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ipv4"192.168.1.1/16",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_1102735632,(,_1273557860,))))), Map($DlgPrefix -> _1102735632, $SetVersion -> _1273557860)))),None)); solution(goals.head): defcon(makeIPTokenSet(ipv4"192.168.1.1/16"), SetTerm(id = StrLit(1qYgFO6dPALxvX7FzW0Aqg); argRefs = StrLit($DlgPrefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ipv4"192.168.1.1/16",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_1102735632,(,_1273557860,))))), Map($DlgPrefix -> _1102735632, $SetVersion -> _1273557860)))),None)); FreshGoals: List()
2017-06-152 14:36:03.752 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8:
p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
Jb5U7wYXT1ytnGh27JzMjQGYIPibun6duLhghSlJPiThP_1ZLqxmvq8Rrynf_g00sPueqEuglm72wgi9zINbu9VhRNnM2jBaOycDtHjyQz_0gwBAkpG14eymvpoTRv-4gYEqxlVlCQWk2V6NH1yAuUfg3fkIpUCBCG2cC4_y0U3bq1R9fbRh9QP9pU1_mIfjR6g16EEgviTp6Q6qr-8rRMlMVYUjkBqagiJcB5-8ldtcPFdPXe7WSATcih9MfPSf1D7nMVYmRaE_oqX54ZRXxvx3swhqOq0MQ8RRVm3ByfRl-JpWuMmdf7XHnBQOo-7UhAaFCk1MHWF99xUMJBBkUg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:03.743-04:00, 2020-06-01T14:36:03.743-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.1.1/16"(set29)


2017-06-152 14:36:03.752 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
2017-06-152 14:36:03.753 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8
Jb5U7wYXT1ytnGh27JzMjQGYIPibun6duLhghSlJPiThP_1ZLqxmvq8Rrynf_g00sPueqEuglm72wgi9zINbu9VhRNnM2jBaOycDtHjyQz_0gwBAkpG14eymvpoTRv-4gYEqxlVlCQWk2V6NH1yAuUfg3fkIpUCBCG2cC4_y0U3bq1R9fbRh9QP9pU1_mIfjR6g16EEgviTp6Q6qr-8rRMlMVYUjkBqagiJcB5-8ldtcPFdPXe7WSATcih9MfPSf1D7nMVYmRaE_oqX54ZRXxvx3swhqOq0MQ8RRVm3ByfRl-JpWuMmdf7XHnBQOo-7UhAaFCk1MHWF99xUMJBBkUg
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:03.743-04:00, 2020-06-01T14:36:03.743-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.1.1/16"(set29)


2017-06-152 14:36:03.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) is posted (code: 204)
2017-06-152 14:36:03.826 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postMakeIPTokenSet(ipv4"192.168.1.1/16"), [makeIPTokenSet(ipv4"192.168.1.1/16")]); solution(goals.head): ['p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8']; FreshGoals: List()
2017-06-152 14:36:03.833 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")
2017-06-152 14:36:03.833 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.833 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.833 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:36:03.834 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:36:03.834 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")?)
2017-06-152 14:36:03.835 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); solution(goals.head): postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(defpost(postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), [ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")]))
2017-06-152 14:36:03.836 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); solution(goals.head): ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"), defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?IPSetToken_1,'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 14:36:03.837 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DlgPrefix($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.1.1/16"(set29)'; FreshGoals: List()
2017-06-152 14:36:03.837 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8'; FreshGoals: List()
2017-06-152 14:36:03.837 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8' := label("Token for IP allocation/?DlgPrefix($SetVersion)"); FreshGoals: List(defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 14:36:03.838 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.838-04:00),
queries: List(),
statements: Map(StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24"))), StrLit(_link) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,link(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8))), Map($IPSetToken -> p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)))),
links: ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),
speaksForToken: None,
label: IP allocation/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8(set29),
signature: None,
setData: None
2017-06-152 14:36:03.839 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:06.432-04:00),
queries: List(),
statements: Map(StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24"))), StrLit(_link) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,link(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8))), Map($IPSetToken -> p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)))),
links: ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),
speaksForToken: None,
label: IP allocation/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8(set29),
signature: None,
setData: None
2017-06-152 14:36:03.839 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); solution(goals.head): defcon(ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); FreshGoals: List()
2017-06-152 14:36:03.851 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q:
CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
OuC9mMkgwP7eXAxE6WUQBr2XyAXkg6yBTBf0KduoIu8VeqVav_R1z5olGw65wgPpTk3QCbbBW2-M2pxVotPPOg9gt3a4hBoofb_Ksmuzt0C1A16URIhcMk5Y624V-KcvmzQ6RIYKfJKnAsqKb4DguOQqtcdyf5sKm7jkDm1HLunSc1f3tj0ITlzwlk4dhwf7xKTHI6EM49b_-z8RWqz0cDNAqtwzdFrEOevrTBhUIzC-YNQAok29YUf0wFs469eXPK-FpCz0JLzijd2Ez8xL92by8kV6jyFsfZij2HxfMfHeGGSowzHBP2sKm1CSY5EQRbtncGEYywty_Xh3fooRuA
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:03.840-04:00, 2020-06-01T14:36:03.840-04:00, PT720H
SHA256withRSA
IP allocation/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8(set29)

allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 14:36:03.852 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
2017-06-152 14:36:03.852 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q
OuC9mMkgwP7eXAxE6WUQBr2XyAXkg6yBTBf0KduoIu8VeqVav_R1z5olGw65wgPpTk3QCbbBW2-M2pxVotPPOg9gt3a4hBoofb_Ksmuzt0C1A16URIhcMk5Y624V-KcvmzQ6RIYKfJKnAsqKb4DguOQqtcdyf5sKm7jkDm1HLunSc1f3tj0ITlzwlk4dhwf7xKTHI6EM49b_-z8RWqz0cDNAqtwzdFrEOevrTBhUIzC-YNQAok29YUf0wFs469eXPK-FpCz0JLzijd2Ez8xL92by8kV6jyFsfZij2HxfMfHeGGSowzHBP2sKm1CSY5EQRbtncGEYywty_Xh3fooRuA
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:03.840-04:00, 2020-06-01T14:36:03.840-04:00, PT720H
SHA256withRSA
IP allocation/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8(set29)

allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 14:36:03.857 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) is posted (code: 204)
2017-06-152 14:36:03.857 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIPAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16"), [ipAllocate('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', ipv4"192.168.19.2/24", ipv4"192.168.1.1/16")]); solution(goals.head): ['CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q']; FreshGoals: List()
2017-06-152 14:36:03.862 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, ipv4"192.168.19.2/24")
2017-06-152 14:36:03.863 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.863 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.863 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:36:03.863 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:36:03.864 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")?)
2017-06-152 14:36:03.864 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); solution(goals.head): postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); FreshGoals: List(defpost(postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), [addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")]))
2017-06-152 14:36:03.865 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); solution(goals.head): addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"); FreshGoals: List(spec('link a token for allocated IP range'), defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 14:36:03.865 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for allocated IP range'); solution(goals.head): spec('link a token for allocated IP range'); FreshGoals: List(defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 14:36:03.866 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.866-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q))), Map($Token -> CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)))),
links: ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q),
speaksForToken: None,
label: Token for IP allocation/ipv4"192.168.19.2/24"(set29),
signature: None,
setData: None
2017-06-152 14:36:03.867 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:06.640-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q))), Map($Token -> CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)))),
links: ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q),
speaksForToken: None,
label: Token for IP allocation/ipv4"192.168.19.2/24"(set29),
signature: None,
setData: None
2017-06-152 14:36:03.867 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); solution(goals.head): defcon(addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q',ipv4"192.168.19.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); FreshGoals: List()
2017-06-152 14:36:03.877 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4:
nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
vxqYczZ0lme9e9GEYyEBNDrqFAOO00ofHcbH-PUtM4E6TyRR2uzOnhnOrEHmpYkqFq0jtaAvBEvr8kzbmpdNT5IpV11fPigXqLH1kcJROZN2k4MjqIPz1odUF2WxNxchdJ3rHoJoi52qhpvzzSsX85FFVpLYTXbSWUUVejU6ZeOEcVRM_s6esKcSwOYYXZ5hkH3bejOJIzdJMB8EydpC-NLOpo6qc90DZ09KVcCTFcYkj7aVXZbqjLzq7eGWWF1oJMOeIS0DnSDc_krj9SnIqdoEzNX1lLFOyzXrUMChlUYkDnQXex5LeKqO4W8svNnd7Hd1fPmHpylK_WW81K1o1w
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:36:03.867-04:00, 2020-06-01T14:36:03.867-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.19.2/24"(set29)

link('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q').
2017-06-152 14:36:03.877 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
2017-06-152 14:36:03.877 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4
vxqYczZ0lme9e9GEYyEBNDrqFAOO00ofHcbH-PUtM4E6TyRR2uzOnhnOrEHmpYkqFq0jtaAvBEvr8kzbmpdNT5IpV11fPigXqLH1kcJROZN2k4MjqIPz1odUF2WxNxchdJ3rHoJoi52qhpvzzSsX85FFVpLYTXbSWUUVejU6ZeOEcVRM_s6esKcSwOYYXZ5hkH3bejOJIzdJMB8EydpC-NLOpo6qc90DZ09KVcCTFcYkj7aVXZbqjLzq7eGWWF1oJMOeIS0DnSDc_krj9SnIqdoEzNX1lLFOyzXrUMChlUYkDnQXex5LeKqO4W8svNnd7Hd1fPmHpylK_WW81K1o1w
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:36:03.867-04:00, 2020-06-01T14:36:03.867-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.19.2/24"(set29)

link('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q').
2017-06-152 14:36:03.936 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) is posted (code: 204)
2017-06-152 14:36:03.937 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24"), [addDlgToken('CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q', ipv4"192.168.19.2/24")]); solution(goals.head): ['nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4']; FreshGoals: List()
2017-06-152 14:36:03.943 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")
2017-06-152 14:36:03.944 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")? 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.944 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA) 
 requestedEnv: Map(Principal -> Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:03.944 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-152 14:36:03.944 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA')
    safelangId             = 8
2017-06-152 14:36:03.944 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")?)
2017-06-152 14:36:03.945 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); solution(goals.head): postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(defpost(postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), [ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")]))
2017-06-152 14:36:03.946 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); solution(goals.head): ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"); FreshGoals: List(?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"), defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?IPSetToken_1,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 14:36:03.947 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DlgPrefix($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.1.1/16"(set29)'; FreshGoals: List()
2017-06-152 14:36:03.947 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8'; FreshGoals: List()
2017-06-152 14:36:03.947 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?IPSetToken_1 := label("Token for IP allocation/?DlgPrefix($SetVersion)"); solution(goals.head): 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8' := label("Token for IP allocation/?DlgPrefix($SetVersion)"); FreshGoals: List(defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)))
2017-06-152 14:36:03.948 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:03.948-04:00),
queries: List(),
statements: Map(StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24"))), Map($Prcpl -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, $Prefix -> ipv4"192.168.36.2/24"))), StrLit(_link) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,link(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8))), Map($IPSetToken -> p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)))),
links: ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),
speaksForToken: None,
label: IP allocation/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8(set29),
signature: None,
setData: None
2017-06-152 14:36:03.949 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
subject: Some(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:06.735-04:00),
queries: List(),
statements: Map(StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24"))), Map($Prcpl -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, $Prefix -> ipv4"192.168.36.2/24"))), StrLit(_link) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,link(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8))), Map($IPSetToken -> p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)))),
links: ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),
speaksForToken: None,
label: IP allocation/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8(set29),
signature: None,
setData: None
2017-06-152 14:36:03.949 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); solution(goals.head): defcon(ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), SetTerm(id = StrLit(d7LrnGgoR-yI4SZLwxTGZA); argRefs = StrLit($IPSetToken),StrLit($Prcpl),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(IP allocation/,$_1702503896,(,_1779189028,))))), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(allocate2) -> Set(StyStmt(List(allocate($_1702503896,$_1979563306)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028))), StrLit(_link) -> Set(StyStmt(List(link($_2832379752)), Map($IPSetToken -> $_2832379752, $Prcpl -> $_1702503896, $Prefix -> $_1979563306, $SetVersion -> _1779189028)))),None)); FreshGoals: List()
2017-06-152 14:36:03.960 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI:
X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
JtPh6wtOZ24ShS7yMlfdGCYwZTb6laxSmMUrnwqhjvZr4pTJCI2TvefUKVJp4biXJUrKckXrmlh6ZkmX7bXOrA1NIhmPfnAh5a2e-fbc8xhRo8QyE0nFTcHgJf-bFlfRRG1JF92WRD9SPP8yHzQRGkrBHw3MfUx8m5VFWSvv7-A-_7uggzuUS1oSHYPHRU7Kt0KUTVkygNBB_hXvRvxXadv0DjHtF_tAvwrQ0xBuV3NExij3CdSOYjpTTqIH-Y3p5Kz2ulqNS7aaCjncJCSjde1rNSinfjFizhXnQPNQyxNWVfSNfngS4FYw1tKaxD_Ub7gtEWQHMMI3___4YN3wdQ
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:03.950-04:00, 2020-06-01T14:36:03.950-04:00, PT720H
SHA256withRSA
IP allocation/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8(set29)

allocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 14:36:03.961 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
2017-06-152 14:36:03.961 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI
JtPh6wtOZ24ShS7yMlfdGCYwZTb6laxSmMUrnwqhjvZr4pTJCI2TvefUKVJp4biXJUrKckXrmlh6ZkmX7bXOrA1NIhmPfnAh5a2e-fbc8xhRo8QyE0nFTcHgJf-bFlfRRG1JF92WRD9SPP8yHzQRGkrBHw3MfUx8m5VFWSvv7-A-_7uggzuUS1oSHYPHRU7Kt0KUTVkygNBB_hXvRvxXadv0DjHtF_tAvwrQ0xBuV3NExij3CdSOYjpTTqIH-Y3p5Kz2ulqNS7aaCjncJCSjde1rNSinfjFizhXnQPNQyxNWVfSNfngS4FYw1tKaxD_Ub7gtEWQHMMI3___4YN3wdQ
UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA
2017-06-01T14:36:03.950-04:00, 2020-06-01T14:36:03.950-04:00, PT720H
SHA256withRSA
IP allocation/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8(set29)

allocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24").
link('p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8').
2017-06-152 14:36:04.066 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI) is posted (code: 204)
2017-06-152 14:36:04.066 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postIPAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16"), [ipAllocate('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', ipv4"192.168.36.2/24", ipv4"192.168.1.1/16")]); solution(goals.head): ['X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI']; FreshGoals: List()
2017-06-152 14:36:04.073 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI, ipv4"192.168.36.2/24")
2017-06-152 14:36:04.073 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:04.073 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:36:04.073 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:36:04.074 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:36:04.074 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")?)
2017-06-152 14:36:04.074 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); solution(goals.head): postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); FreshGoals: List(defpost(postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), [addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")]))
2017-06-152 14:36:04.075 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); solution(goals.head): addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"); FreshGoals: List(spec('link a token for allocated IP range'), defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 14:36:04.076 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for allocated IP range'); solution(goals.head): spec('link a token for allocated IP range'); FreshGoals: List(defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)))
2017-06-152 14:36:04.076 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:36:04.076-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI))), Map($Token -> X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)))),
links: ArrayBuffer(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI),
speaksForToken: None,
label: Token for IP allocation/ipv4"192.168.36.2/24"(set29),
signature: None,
setData: None
2017-06-152 14:36:04.077 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
subject: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:06.967-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,link(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI))), Map($Token -> X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)))),
links: ArrayBuffer(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI),
speaksForToken: None,
label: Token for IP allocation/ipv4"192.168.36.2/24"(set29),
signature: None,
setData: None
2017-06-152 14:36:04.077 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); solution(goals.head): defcon(addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), SetTerm(id = StrLit(LKx3nMxRogzVhelwGnBQgw); argRefs = StrLit($Token),StrLit($Prefix),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI',ipv4"192.168.36.2/24",?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Token for IP allocation/,_3780466158,(,_312340626,))))), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626))), StrLit(_link) -> Set(StyStmt(List(link($_488235220)), Map($Token -> $_488235220, $Prefix -> _3780466158, $SetVersion -> _312340626)))),None)); FreshGoals: List()
2017-06-152 14:36:04.090 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc:
8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
gbtZ6ycPsVVelRP5ojzM6rC8Dlpf5gYUxXFDc7SWGcNmvmIJu28zPApvHfDJA4nPaM2n98Y8LL8pTSmWNnO0gtEwoqeGB4TVz-yZkCkHrt-6IjHBfwvFJq5jd_mJ-XfoJz1Fv21lIP6IshEsvPkxYWE4dpM0f3RWQ2jEvIbeo_eToZFM2p4uMUR2wEC-e43rZb1f55Uf71jbWaOnlTvv2IdLRxZMpEksB1kPBglUBvZfyJt2gXdk1adu5b-_-XWALH8AiFD_qal_9mHRubnFpG--0KS-s32-ZZ-7Oot3mLxhzfXqRAu1FYkJcIJxAtFUWy1UHx7x-oDs06K1F2hLkA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:36:04.078-04:00, 2020-06-01T14:36:04.078-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.36.2/24"(set29)

link('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI').
2017-06-152 14:36:04.090 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
2017-06-152 14:36:04.091 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc
gbtZ6ycPsVVelRP5ojzM6rC8Dlpf5gYUxXFDc7SWGcNmvmIJu28zPApvHfDJA4nPaM2n98Y8LL8pTSmWNnO0gtEwoqeGB4TVz-yZkCkHrt-6IjHBfwvFJq5jd_mJ-XfoJz1Fv21lIP6IshEsvPkxYWE4dpM0f3RWQ2jEvIbeo_eToZFM2p4uMUR2wEC-e43rZb1f55Uf71jbWaOnlTvv2IdLRxZMpEksB1kPBglUBvZfyJt2gXdk1adu5b-_-XWALH8AiFD_qal_9mHRubnFpG--0KS-s32-ZZ-7Oot3mLxhzfXqRAu1FYkJcIJxAtFUWy1UHx7x-oDs06K1F2hLkA
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:36:04.078-04:00, 2020-06-01T14:36:04.078-04:00, PT720H
SHA256withRSA
Token for IP allocation/ipv4"192.168.36.2/24"(set29)

link('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI').
2017-06-152 14:36:04.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc) is posted (code: 204)
2017-06-152 14:36:04.175 [ForkJoinPool-3-worker-13] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24"), [addDlgToken('X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI', ipv4"192.168.36.2/24")]); solution(goals.head): ['8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc']; FreshGoals: List()
2017-06-152 14:41:04.210 [Safelang-akka.actor.default-dispatcher-18] [34mINFO [0;39m [36mLocalActorRef[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - Message [akka.io.Tcp$Close$] from Actor[akka://Safelang/user/IO-HTTP/group-0/2#2079048126] to Actor[akka://Safelang/system/IO-TCP/selectors/$a/2#2073164929] was not delivered. [3] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
2017-06-152 14:48:50.977 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.36.2/24", [V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, 1)
2017-06-152 14:48:50.977 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postInitRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:50.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:50.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:48:50.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:48:50.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postInitRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1')?)
2017-06-152 14:48:50.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postInitRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'); solution(goals.head): postInitRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'); FreshGoals: List(defpost(postInitRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'), [startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1')]))
2017-06-152 14:48:50.979 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'); solution(goals.head): startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'); FreshGoals: List(?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"), defcon(startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token_1,ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:48:50.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DstIP($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.36.2/24"(set29)'; FreshGoals: List()
2017-06-152 14:48:50.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): '8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc'; FreshGoals: List()
2017-06-152 14:48:50.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): '8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc' := label("Token for IP allocation/?DstIP($SetVersion)"); FreshGoals: List(defcon(startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc',ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:48:50.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p6KcIbhbInvLIXBiJ71HKNg1APUI5JJxMvD6j3S-_zs) has expired from prefetching cache
2017-06-152 14:48:50.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) has expired from prefetching cache
2017-06-152 14:48:50.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y
2017-06-152 14:48:50.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y
2017-06-152 14:48:53.697 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:48:53.697 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:48:53.698 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:48:53.698 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 111 fetched (prebuffer 21): Token(Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y)
2017-06-152 14:48:53.698 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y): ArrayBuffer(8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc)
2017-06-152 14:48:53.699 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc)
2017-06-152 14:48:53.699 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc',ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); solution(goals.head): defcon(startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc',ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); FreshGoals: List()
2017-06-152 14:48:53.699 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(_kBglMDhOb2vWZEws-YVQPyWvnzq1riDbLKoe8disEo) has expired from prefetching cache
2017-06-152 14:48:53.700 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc) has expired from prefetching cache
2017-06-152 14:48:53.700 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 112 fetched (prebuffer 20): Token(8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc)
2017-06-152 14:48:53.700 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc): ArrayBuffer(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)
2017-06-152 14:48:53.701 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)
2017-06-152 14:48:53.701 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 113 fetched (prebuffer 21): Token(X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI)
2017-06-152 14:48:53.701 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:48:53.702 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:48:53.702 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) has expired from prefetching cache
2017-06-152 14:48:53.702 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 114 fetched (prebuffer 21): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:48:53.702 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 14:48:53.722 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y:
Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y
PjsqX5YWXwtpCT2qCRLqjSfvw2WIdUj_VpX-sq_pS1ETO4Rs1IGlG3eIE9wU_jXh87ojbV3VHy7yXcVJxKx37JjiiHxq-H1MQbgDC6b_RFHBI7QaF-BE0p-Jbp46cEb1SPb7cHtq8UGaRpfyzD52tZDx1noqf4diUfu5lGPC8uFXTQNW2QnMBJ3-xI23wWQMGpmTxvuslwCV3cGlkugh2S2iHq_DsV0yj2aLPY5jWqEqO4HQRQihrDNeAun95oLyb5kug2tc8_smW2mNbH-puI43RMzj898lMnKcbto9EvAwEglq3i9U2Iya-fq3ozaasReP0Zc-BmsONsVfrJZHjQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:48:53.700-04:00, 2020-06-01T14:48:53.700-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.36.2/24"/1 (set29)

advertise(ipv4"192.168.36.2/24",['V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc').
2017-06-152 14:48:53.722 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y
2017-06-152 14:48:53.722 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y
PjsqX5YWXwtpCT2qCRLqjSfvw2WIdUj_VpX-sq_pS1ETO4Rs1IGlG3eIE9wU_jXh87ojbV3VHy7yXcVJxKx37JjiiHxq-H1MQbgDC6b_RFHBI7QaF-BE0p-Jbp46cEb1SPb7cHtq8UGaRpfyzD52tZDx1noqf4diUfu5lGPC8uFXTQNW2QnMBJ3-xI23wWQMGpmTxvuslwCV3cGlkugh2S2iHq_DsV0yj2aLPY5jWqEqO4HQRQihrDNeAun95oLyb5kug2tc8_smW2mNbH-puI43RMzj898lMnKcbto9EvAwEglq3i9U2Iya-fq3ozaasReP0Zc-BmsONsVfrJZHjQ
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:48:53.700-04:00, 2020-06-01T14:48:53.700-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.36.2/24"/1 (set29)

advertise(ipv4"192.168.36.2/24",['V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc').
2017-06-152 14:48:55.226 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y) is posted (code: 204)
2017-06-152 14:48:55.227 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postInitRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1'), [startRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '1')]); solution(goals.head): ['Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y']; FreshGoals: List()
2017-06-152 14:48:55.387 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y, ipv4"192.168.36.2/24", V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, 1)
2017-06-152 14:48:55.388 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:55.388 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:55.388 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:48:55.388 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:48:55.388 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')?)
2017-06-152 14:48:55.389 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); solution(goals.head): postPathToken('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); FreshGoals: List(defpost(postPathToken('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), [linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')]))
2017-06-152 14:48:55.389 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); solution(goals.head): linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:48:55.390 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:48:55.390 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(YGWTAie23NdTFAdb1snVXUWnzMdmoLtW_IWIpMcMxjY) has expired from prefetching cache
2017-06-152 14:48:55.391 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(1Kc38Q4jKqqDtuF2Y-BLBDEJMzDfAmPYT5GxJJ1o3Q8) has expired from prefetching cache
2017-06-152 14:48:55.391 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs
2017-06-152 14:48:55.391 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs
2017-06-152 14:48:56.078 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:48:56.078 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:48:56.080 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:48:56.081 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 115 fetched (prebuffer 20): Token(7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs)
2017-06-152 14:48:56.081 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs): ArrayBuffer(Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y)
2017-06-152 14:48:56.081 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y)
2017-06-152 14:48:56.082 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8',ipv4"192.168.36.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:48:56.101 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs:
7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs
vKEzFgQERsYfLs8ediD5w107XghwWgPHH0ZJuBFB6BG00m4VZJNtQdW9tbMUQVe67qsg1dmqDETl_PAP5b3VuoYY_QJgFDteZTzcCXFRDZPK6PWeZgUjvpFbP8HKpzN-UztNPj4TCwgpzZCRujpEyFEyoh4tBgs0srOatr9lzhJale2c_9vJAikrlJPgQK4YK-UzP1F7NDgckOhKjVFSAOhdMHp9TI85vNsNNMAR8gt4o63OAO8rJbq3doOKzBK_TbvSGQX7K4ApiQMzHtSsckGtyIMwnYHw5Jt2NMHYLvBqSbWV0hpAYY4Qs2Iyt-Q_kNG3yI7bUeUMPsbk6X9zeQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:48:56.083-04:00, 2020-06-01T14:48:56.083-04:00, PT720H
SHA256withRSA
Path/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.36.2/24"/1 (set29)

link('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y').
2017-06-152 14:48:56.101 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs
2017-06-152 14:48:56.101 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs
vKEzFgQERsYfLs8ediD5w107XghwWgPHH0ZJuBFB6BG00m4VZJNtQdW9tbMUQVe67qsg1dmqDETl_PAP5b3VuoYY_QJgFDteZTzcCXFRDZPK6PWeZgUjvpFbP8HKpzN-UztNPj4TCwgpzZCRujpEyFEyoh4tBgs0srOatr9lzhJale2c_9vJAikrlJPgQK4YK-UzP1F7NDgckOhKjVFSAOhdMHp9TI85vNsNNMAR8gt4o63OAO8rJbq3doOKzBK_TbvSGQX7K4ApiQMzHtSsckGtyIMwnYHw5Jt2NMHYLvBqSbWV0hpAYY4Qs2Iyt-Q_kNG3yI7bUeUMPsbk6X9zeQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:48:56.083-04:00, 2020-06-01T14:48:56.083-04:00, PT720H
SHA256withRSA
Path/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.36.2/24"/1 (set29)

link('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y').
2017-06-152 14:48:56.637 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs) is posted (code: 204)
2017-06-152 14:48:56.638 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), [linkRoute('Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y', ipv4"192.168.36.2/24", 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')]); solution(goals.head): ['7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs']; FreshGoals: List()
2017-06-152 14:48:56.670 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.36.2/24", [V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, 1)
2017-06-152 14:48:56.670 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:56.670 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:56.670 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:48:56.671 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:48:56.671 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')?)
2017-06-152 14:48:56.674 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); solution(goals.head): verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:56.674 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:48:56.674 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 14:48:56.675 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:56.675 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.36.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:48:56.676 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): '7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs'; FreshGoals: List()
2017-06-152 14:48:56.676 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): '7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs',ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:56.677 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:48:56.677 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 14:48:56.677 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs',ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:56.679 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))?, Map($DstIP -> ipv4"192.168.36.2/24", $Path -> [V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))
2017-06-152 14:48:56.679 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))?, Map($DstIP -> ipv4"192.168.36.2/24", $Path -> [V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:23:10.967-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:23:10.967-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs),None,None,Set(7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs, Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y, 8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc, X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.36.2/24", $Path -> [V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24"))), Map($Prcpl -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, $Prefix -> ipv4"192.168.36.2/24")))),Map(),Set()))
2017-06-152 14:48:56.680 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:48:56.681 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 

2017-06-152 14:48:56.681 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 

2017-06-152 14:48:56.681 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 14:48:56.681 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_55248738,_3549315328)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2177308682,_3935179876,_3549315328,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_55248738,_3935179876)), 

2017-06-152 14:48:56.682 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2177308682,_3935179876,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_3935179876)))
2017-06-152 14:48:56.682 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2177308682,_3935179876,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_3935179876)), 

2017-06-152 14:48:56.682 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:48:56.682 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2980400704,_293781300,_2839343686,_848027184)), :(_2980400704,advertise(_293781300,_2839343686,_848027184)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2980400704,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_293781300,_2848407918)), 

2017-06-152 14:48:56.682 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_2177308682,advertise(_3935179876,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2177308682,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3935179876,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_3935179876)))
2017-06-152 14:48:56.683 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2177308682,advertise(_3935179876,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2177308682,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3935179876,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_3935179876)), 

2017-06-152 14:48:56.683 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:48:56.683 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:48:56.683 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8; this.getClass=class prolog.terms.Const; that=_2177308682; that.getClass=class prolog.terms.Var
2017-06-152 14:48:56.683 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8; this.getClass=class prolog.terms.Const; that=_2177308682; that.getClass=class prolog.terms.Var
2017-06-152 14:48:56.684 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_3935179876; that.getClass=class prolog.terms.Var
2017-06-152 14:48:56.684 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_3935179876; that.getClass=class prolog.terms.Var
2017-06-152 14:48:56.684 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:56.684 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:56.684 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:48:56.684 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2914529404,_3814213966)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2914529404,_3814213966)), 

2017-06-152 14:48:56.685 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:56.685 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",_2848407918)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:56.685 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24")), 

2017-06-152 14:48:56.685 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24")), 

2017-06-152 14:48:56.685 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2848407918; that.getClass=class prolog.terms.Var
2017-06-152 14:48:56.686 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2848407918; that.getClass=class prolog.terms.Var
2017-06-152 14:48:56.686 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:56.686 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 
   |   answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 

2017-06-152 14:48:56.687 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs',ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.36.2/24", '[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs',ipv4"192.168.36.2/24",'[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 14:48:56.701 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.36.2/24", [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, 1)
2017-06-152 14:48:56.701 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:56.701 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:56.701 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:48:56.701 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:48:56.702 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')?)
2017-06-152 14:48:56.703 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); solution(goals.head): postAdvertise(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), [advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')]))
2017-06-152 14:48:56.704 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); solution(goals.head): advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:48:56.705 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.36.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:48:56.705 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): '7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs'; FreshGoals: List()
2017-06-152 14:48:56.706 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): '7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs',ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:48:56.707 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic) has expired from prefetching cache
2017-06-152 14:48:56.707 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) has expired from prefetching cache
2017-06-152 14:48:56.707 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) has expired from prefetching cache
2017-06-152 14:48:56.707 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg) has expired from prefetching cache
2017-06-152 14:48:56.708 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI
2017-06-152 14:48:56.708 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI
2017-06-152 14:48:57.609 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:48:57.609 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:48:57.610 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:48:57.610 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 116 fetched (prebuffer 17): Token(knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI)
2017-06-152 14:48:57.610 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI): ArrayBuffer(7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs)
2017-06-152 14:48:57.611 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs)
2017-06-152 14:48:57.611 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs',ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs',ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 14:48:57.627 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI:
knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI
nzqw1kDuIQShvF3oGnVVkwH1X4wEsxZs1YfUcLZ3exGjdLKXqJ0Z7nL8yqaRWy5epBXfkBlM4jPC5N6efPQMboGtdUoaslSZYA7_R9S7ni8Wxt0nVuexeV3Y-_XC-8ZNL7odpsJHMl4b3iGnj_pvRdtRnphwxx5GQhBtgCfoQpCZ9PSX4klRXxFg3T-EgTXZjUMg-i079WYc24tEXHIBcar5lQjLXUmEVboc-luaOXm5YfBnkA3PSvz5-mDTSquIr8XJlhOvb0qkX9zTn4tOPUar6jJIGuLg-LiGC5vAIh9BVaPqiku7mt3NXy4jMgs1myZ1_AvGQ7JpfspNka33RQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:48:57.612-04:00, 2020-06-01T14:48:57.612-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.36.2/24"/1 (set29)

advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs').
2017-06-152 14:48:57.627 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI
2017-06-152 14:48:57.627 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI
nzqw1kDuIQShvF3oGnVVkwH1X4wEsxZs1YfUcLZ3exGjdLKXqJ0Z7nL8yqaRWy5epBXfkBlM4jPC5N6efPQMboGtdUoaslSZYA7_R9S7ni8Wxt0nVuexeV3Y-_XC-8ZNL7odpsJHMl4b3iGnj_pvRdtRnphwxx5GQhBtgCfoQpCZ9PSX4klRXxFg3T-EgTXZjUMg-i079WYc24tEXHIBcar5lQjLXUmEVboc-luaOXm5YfBnkA3PSvz5-mDTSquIr8XJlhOvb0qkX9zTn4tOPUar6jJIGuLg-LiGC5vAIh9BVaPqiku7mt3NXy4jMgs1myZ1_AvGQ7JpfspNka33RQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:48:57.612-04:00, 2020-06-01T14:48:57.612-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.36.2/24"/1 (set29)

advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs').
2017-06-152 14:48:58.290 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI) is posted (code: 204)
2017-06-152 14:48:58.290 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1'), [advertiseRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', '1')]); solution(goals.head): ['knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI']; FreshGoals: List()
2017-06-152 14:48:58.394 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI, ipv4"192.168.36.2/24", weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, 2)
2017-06-152 14:48:58.394 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:58.394 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:58.394 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:48:58.394 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:48:58.394 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')?)
2017-06-152 14:48:58.395 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); solution(goals.head): postPathToken('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); FreshGoals: List(defpost(postPathToken('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), [linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')]))
2017-06-152 14:48:58.396 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); solution(goals.head): linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.36.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:48:58.397 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.36.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:48:58.397 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(ERvlnvgsJ97EI3cIMsihoSQcCMbNpP0eWW8oZiQYebY) has expired from prefetching cache
2017-06-152 14:48:58.398 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY
2017-06-152 14:48:58.398 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY
2017-06-152 14:48:58.742 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:48:58.742 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:48:58.742 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:48:58.743 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 117 fetched (prebuffer 17): Token(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY)
2017-06-152 14:48:58.743 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY): ArrayBuffer(knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI)
2017-06-152 14:48:58.743 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI)
2017-06-152 14:48:58.744 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.36.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.36.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:48:58.759 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY:
vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY
cdVYu--8xpyd2ODxr9w70TCbWThgsvinzLb03DyMteebzerhv8DbY8VRpu6d7th7wlzmqqkEsJnRDAmzNnQC18Vyq7occKde3_FasMPlCBJjnb4LF0P3FFBCFn8Xx_EbSEG0AEMIGl8i6TFT3r5snPV2v-GzESAj6nAQ5UogYfxc9oXHYFTm5BTRT1B9JodwWc7v3Zfmbp29eaTE5AP3h3FVpczzIcnVD49Xenr61MKjKpKSJD7J20EFu0fFxk6zwdTdtlIqp70ooTmpng1Dx7T16eB6azMyc90sqjDMHaanqEdj7-UsFF-KeAnIRRSqKkNyKlIjLU0vT-yOaqSuVA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:48:58.745-04:00, 2020-06-01T14:48:58.745-04:00, PT720H
SHA256withRSA
Path/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.36.2/24"/2 (set29)

link('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI').
2017-06-152 14:48:58.759 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY
2017-06-152 14:48:58.759 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY
cdVYu--8xpyd2ODxr9w70TCbWThgsvinzLb03DyMteebzerhv8DbY8VRpu6d7th7wlzmqqkEsJnRDAmzNnQC18Vyq7occKde3_FasMPlCBJjnb4LF0P3FFBCFn8Xx_EbSEG0AEMIGl8i6TFT3r5snPV2v-GzESAj6nAQ5UogYfxc9oXHYFTm5BTRT1B9JodwWc7v3Zfmbp29eaTE5AP3h3FVpczzIcnVD49Xenr61MKjKpKSJD7J20EFu0fFxk6zwdTdtlIqp70ooTmpng1Dx7T16eB6azMyc90sqjDMHaanqEdj7-UsFF-KeAnIRRSqKkNyKlIjLU0vT-yOaqSuVA
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:48:58.745-04:00, 2020-06-01T14:48:58.745-04:00, PT720H
SHA256withRSA
Path/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.36.2/24"/2 (set29)

link('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI').
2017-06-152 14:48:58.916 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY) is posted (code: 204)
2017-06-152 14:48:58.916 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), [linkRoute('knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI', ipv4"192.168.36.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')]); solution(goals.head): ['vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY']; FreshGoals: List()
2017-06-152 14:48:58.953 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.36.2/24", [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, 2)
2017-06-152 14:48:58.954 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:58.954 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:58.954 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:48:58.954 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:48:58.955 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')?)
2017-06-152 14:48:58.958 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); solution(goals.head): verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:58.959 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:48:58.959 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg'; FreshGoals: List()
2017-06-152 14:48:58.960 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg',?PathToken_1,ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:58.960 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.36.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 14:48:58.961 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY'; FreshGoals: List()
2017-06-152 14:48:58.962 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY',ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:58.962 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:48:58.962 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg'; FreshGoals: List()
2017-06-152 14:48:58.963 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY',ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:48:58.965 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))?, Map($DstIP -> ipv4"192.168.36.2/24", $Path -> [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))
2017-06-152 14:48:58.965 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))?, Map($DstIP -> ipv4"192.168.36.2/24", $Path -> [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8])))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T14:23:10.736-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T14:23:10.737-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY),None,None,Set(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY, knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI, 7-sSn5SMZvIlkE_tcxkuS5P2yOfvroHqcpZQrqH9qFs, Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y, 8-V6MDlCwJhAvziiULUe3KbveUZsMJtu1Dl1qvIzmGc, X6o_S3a1w5V52qvVFoph44FahIp9ezz24k0QOWUH8vI, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.36.2/24", $Path -> [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.36.2/24", $Path -> [V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24"))), Map($Prcpl -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, $Prefix -> ipv4"192.168.36.2/24")))),Map(),Set()))
2017-06-152 14:48:58.967 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:48:58.967 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 

2017-06-152 14:48:58.968 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 

2017-06-152 14:48:58.968 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218)), 

2017-06-152 14:48:58.968 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_1444794680,_3429707000)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_215494812,_2854808164,_3429707000,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1444794680,_2854808164)), 

2017-06-152 14:48:58.969 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_215494812,_2854808164,[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2854808164)))
2017-06-152 14:48:58.969 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_215494812,_2854808164,[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2854808164)), 

2017-06-152 14:48:58.969 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 14:48:58.970 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_319052296,_3064708732,_2050630884,_2544679436)), :(_319052296,advertise(_3064708732,_2050630884,_2544679436)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_319052296,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3064708732,_2789820138)), 

2017-06-152 14:48:58.970 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_215494812,advertise(_2854808164,[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_215494812,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2854808164,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2854808164)))
2017-06-152 14:48:58.970 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_215494812,advertise(_2854808164,[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_215494812,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2854808164,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2854808164)), 

2017-06-152 14:48:58.971 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:48:58.971 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:48:58.971 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_215494812; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.972 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_215494812; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.972 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2854808164; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.972 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2854808164; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.972 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.973 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.973 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086)), 

2017-06-152 14:48:58.973 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1291482112,_3880543358)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1291482112,_3880543358)), 

2017-06-152 14:48:58.973 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.974 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.974 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404)), 

2017-06-152 14:48:58.974 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_365092416,_4166038532)), :(_1721083258,allocate(_365092416,_4166038532)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1721083258,_3799929410)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_4166038532,_3799929410)), 

2017-06-152 14:48:58.974 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1721083258,allocate(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1721083258,_3799929410)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2789820138,_3799929410)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.974 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2789820138)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.975 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:48:58.975 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:48:58.975 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8; this.getClass=class prolog.terms.Const; that=_215494812; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.975 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8; this.getClass=class prolog.terms.Const; that=_215494812; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.975 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2854808164; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.976 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2854808164; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.976 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8  that.sym=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:48:58.976 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24  that.sym=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:48:58.976 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:48:58.976 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_215494812,_2854808164,[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2854808164)), 

2017-06-152 14:48:58.977 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496)), 

2017-06-152 14:48:58.977 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3779960978,_2646661162,_1454710940,_1196008522)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_3415004416|_1360414162]=_1454710940), :(_3779960978,advertise(_2646661162,_1454710940,_1196008522)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2925010604,_2755245272,_1360414162,_3779960978)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2646661162,_2755245272)), 

2017-06-152 14:48:58.977 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_3415004416|_1360414162]=[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]]), :(_215494812,advertise(_2854808164,[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2925010604,_2755245272,_1360414162,_215494812)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2854808164,_2755245272)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2854808164)))
2017-06-152 14:48:58.977 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_3415004416; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.977 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_3415004416; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]]; this.getClass=class prolog.terms.Cons; that=_1360414162; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]]; this.getClass=class prolog.terms.Cons; that=_1360414162; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_215494812,advertise(_2854808164,[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2925010604,_2755245272,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],_215494812)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2854808164,_2755245272)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2854808164)), 

2017-06-152 14:48:58.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:48:58.978 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:48:58.979 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_215494812; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.979 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_215494812; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.979 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2854808164; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.979 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2854808164; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.979 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2925010604,_2755245272,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2755245272)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2925010604,_2755245272,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2755245272)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 14:48:58.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_162558346,_3949706682,_2225632004,_3982403644)), :(_162558346,advertise(_3949706682,_2225632004,_3982403644)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_162558346,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3949706682,_1743292476)), 

2017-06-152 14:48:58.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_2925010604,advertise(_2755245272,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2925010604,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2755245272,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2755245272)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.980 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2925010604,advertise(_2755245272,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2925010604,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2755245272,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2755245272)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:48:58.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:48:58.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_2925010604; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24; this.getClass=class prolog.terms.Const; that=_2925010604; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2755245272; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.981 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2755245272; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.982 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24  that.sym=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:48:58.982 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8  that.sym=weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:48:58.982 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:48:58.982 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2925010604,advertise(_2755245272,[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2925010604,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_2755245272,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_2755245272)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.982 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:48:58.983 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,advertise(ipv4"192.168.36.2/24",[V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:48:58.983 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8; this.getClass=class prolog.terms.Const; that=_2925010604; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.983 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8; this.getClass=class prolog.terms.Const; that=_2925010604; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.983 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2755245272; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.983 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_2755245272; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.984 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.984 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.984 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086)), 

2017-06-152 14:48:58.984 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3503836950,_388970074)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3503836950,_388970074)), 

2017-06-152 14:48:58.984 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.985 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",_1743292476)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.985 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.985 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8,ipv4"192.168.36.2/24")), 

2017-06-152 14:48:58.985 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_1743292476; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.985 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.36.2/24"; this.getClass=class prolog.terms.Const; that=_1743292476; that.getClass=class prolog.terms.Var
2017-06-152 14:48:58.985 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.36.2/24",ipv4"192.168.36.2/24")))
2017-06-152 14:48:58.986 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 
   |   answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.36.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8|[]])), 

2017-06-152 14:48:58.986 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY',ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.36.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY',ipv4"192.168.36.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 14:48:59.001 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.36.2/24", [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8], iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, 2)
2017-06-152 14:48:59.001 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:59.002 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:48:59.002 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:48:59.002 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:48:59.002 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')?)
2017-06-152 14:48:59.003 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); solution(goals.head): postAdvertise(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), [advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')]))
2017-06-152 14:48:59.004 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); solution(goals.head): advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.36.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:48:59.005 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.36.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 14:48:59.005 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY'; FreshGoals: List()
2017-06-152 14:48:59.006 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY',ipv4"192.168.36.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:48:59.007 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA
2017-06-152 14:48:59.007 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA
2017-06-152 14:48:59.297 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:48:59.297 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:48:59.297 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:48:59.297 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 118 fetched (prebuffer 18): Token(UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA)
2017-06-152 14:48:59.297 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA): ArrayBuffer(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY)
2017-06-152 14:48:59.298 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY)
2017-06-152 14:48:59.298 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY',ipv4"192.168.36.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY',ipv4"192.168.36.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 14:48:59.312 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA:
UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA
FmGKJxu44Mw6AaFt1r5OgiACh1DCkaSwX06Mn3lb3O7KmBHAZcsbOVsSbYJbHsccVOE0BRh5N7a2-awDz5-tot40QOSwRutEkoFMX_ENI6JZXpaScfIOfxwneoBJikZ4iHaprxA65paaaNEM_ToQRutuIIX8vvDwIxSrj5pvHo4v7zMIOVuozMwSZYdyblWGgZOP0VNhq2GN8lokjBXXmlhbzWPGzqnX4A7L5-qoiDEvHc8nX3bEWmUtTgxMfTx17fiJOuX4eIQAsVowXQeam7dFZpJeqxvqzYVh9t3_xczTP2Vw92INXls_3RDLMUD8Nuz2Qh5L_4J1r6Vll5dxYw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:48:59.298-04:00, 2020-06-01T14:48:59.298-04:00, PT720H
SHA256withRSA
Advertise/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.36.2/24"/2 (set29)

advertise(ipv4"192.168.36.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'],iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY).
2017-06-152 14:48:59.313 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA
2017-06-152 14:48:59.313 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA
FmGKJxu44Mw6AaFt1r5OgiACh1DCkaSwX06Mn3lb3O7KmBHAZcsbOVsSbYJbHsccVOE0BRh5N7a2-awDz5-tot40QOSwRutEkoFMX_ENI6JZXpaScfIOfxwneoBJikZ4iHaprxA65paaaNEM_ToQRutuIIX8vvDwIxSrj5pvHo4v7zMIOVuozMwSZYdyblWGgZOP0VNhq2GN8lokjBXXmlhbzWPGzqnX4A7L5-qoiDEvHc8nX3bEWmUtTgxMfTx17fiJOuX4eIQAsVowXQeam7dFZpJeqxvqzYVh9t3_xczTP2Vw92INXls_3RDLMUD8Nuz2Qh5L_4J1r6Vll5dxYw
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:48:59.298-04:00, 2020-06-01T14:48:59.298-04:00, PT720H
SHA256withRSA
Advertise/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.36.2/24"/2 (set29)

advertise(ipv4"192.168.36.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8'],iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8).
link(vfvESq4D7R6FXPbH2qizFRY40Y3HnquWljEvkW3R7GY).
2017-06-152 14:49:00.128 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA) is posted (code: 204)
2017-06-152 14:49:00.129 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2'), [advertiseRoute(ipv4"192.168.36.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '2')]); solution(goals.head): ['UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA']; FreshGoals: List()
2017-06-152 14:49:00.331 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA, ipv4"192.168.36.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 3)
2017-06-152 14:49:00.331 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:00.331 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:00.331 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:49:00.332 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:49:00.332 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3')?)
2017-06-152 14:49:00.332 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'); solution(goals.head): postPathToken('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'); FreshGoals: List(defpost(postPathToken('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), [linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3')]))
2017-06-152 14:49:00.333 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'); solution(goals.head): linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.36.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:00.333 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.36.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:00.334 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(Hl1i_ZZrGZPhT2SYC42rPSYV1tO1HJ_wdp6D_zqzF0Y) has expired from prefetching cache
2017-06-152 14:49:00.334 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg
2017-06-152 14:49:00.334 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg
2017-06-152 14:49:01.574 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:49:01.574 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:49:01.576 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:49:01.576 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 119 fetched (prebuffer 18): Token(vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg)
2017-06-152 14:49:01.577 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg): ArrayBuffer(UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA)
2017-06-152 14:49:01.577 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA)
2017-06-152 14:49:01.577 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.36.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.36.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:49:01.591 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg:
vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg
qniQV5yuDfr5lKIRvQ1SKUMgNM7rni7F-VjjgV_fkhmqzYWkP05NTI2J1ZAetG_ZfC90yMzgJqmlKN72mAzproa5EKf-OwlQ8cRe5DaMAs7CF4RZcD1lKpP9Za5dtjLjH5VbyqTp8Q_-TLmmFre1AJlqMq0hNJ4mNeznB1k21EkqR-AVv8oeKyQBVgke0TmLVo1FneY-ml7pOCKXphIuiOnT6HYTWQfsTg29SoJNw6-YZ5cAWK4ogLvQPeNeLsOiG3Jt0PAdkTG1cRYbgqHKsviZUCqLhPd0lifMNKK5HsaUDVpm2TonlMxFhMoMkz3CvMk5pKIt0MZHX1Q0SDMzJg
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:49:01.578-04:00, 2020-06-01T14:49:01.578-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.36.2/24"/3 (set29)

link('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA').
2017-06-152 14:49:01.591 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg
2017-06-152 14:49:01.592 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg
qniQV5yuDfr5lKIRvQ1SKUMgNM7rni7F-VjjgV_fkhmqzYWkP05NTI2J1ZAetG_ZfC90yMzgJqmlKN72mAzproa5EKf-OwlQ8cRe5DaMAs7CF4RZcD1lKpP9Za5dtjLjH5VbyqTp8Q_-TLmmFre1AJlqMq0hNJ4mNeznB1k21EkqR-AVv8oeKyQBVgke0TmLVo1FneY-ml7pOCKXphIuiOnT6HYTWQfsTg29SoJNw6-YZ5cAWK4ogLvQPeNeLsOiG3Jt0PAdkTG1cRYbgqHKsviZUCqLhPd0lifMNKK5HsaUDVpm2TonlMxFhMoMkz3CvMk5pKIt0MZHX1Q0SDMzJg
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:49:01.578-04:00, 2020-06-01T14:49:01.578-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.36.2/24"/3 (set29)

link('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA').
2017-06-152 14:49:02.038 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg) is posted (code: 204)
2017-06-152 14:49:02.039 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3'), [linkRoute('UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA', ipv4"192.168.36.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '3')]); solution(goals.head): ['vp38qakScvSrpde5anhZCoRxD4rd_MuAxnQA5U3nJDg']; FreshGoals: List()
2017-06-152 14:49:21.883 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 1)
2017-06-152 14:49:21.883 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')? 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:21.883 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8) 
 requestedEnv: Map(Principal -> Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:21.884 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:49:21.884 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8')
    safelangId             = 8
2017-06-152 14:49:21.884 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')?)
2017-06-152 14:49:21.885 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(defpost(postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]))
2017-06-152 14:49:21.886 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); solution(goals.head): startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'); FreshGoals: List(?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"), defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?Token_1,ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:49:21.886 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Token for IP allocation/?DstIP($SetVersion)"; solution(goals.head): 'Token for IP allocation/ipv4"192.168.19.2/24"(set29)'; FreshGoals: List()
2017-06-152 14:49:21.887 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4'; FreshGoals: List()
2017-06-152 14:49:21.887 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?Token_1 := label("Token for IP allocation/?DstIP($SetVersion)"); solution(goals.head): 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4' := label("Token for IP allocation/?DstIP($SetVersion)"); FreshGoals: List(defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)))
2017-06-152 14:49:21.888 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:49:21.888-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:49:21.888 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
subject: Some(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.422-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(_link) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,link(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4))), Map($Token -> nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)))),
links: ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4),
speaksForToken: None,
label: Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:49:21.889 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); solution(goals.head): defcon(startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), SetTerm(id = StrLit(2iUrDgRdDZFFutO3nePMrQ); argRefs = StrLit($Token),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_2677454084,$_976497522,$_2486694154)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_2486694154,/,$_2677454084,/,_888499140, (,_2919340434,))))), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434))), StrLit(_link) -> Set(StyStmt(List(link($_1992268920)), Map($Token -> $_1992268920, $DstIP -> $_2677454084, $Path -> $_976497522, $Target -> $_2486694154, $Len -> _888499140, $SetVersion -> _2919340434)))),None)); FreshGoals: List()
2017-06-152 14:49:21.901 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8:
2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
ae7OBBETN06aqE15N4KryWZNz4EHDXZGd9s2FqwwvptJ6ljgRK4kDwfYb-D6NBe5crT7bF2fjWZ96EJ3IPEUgiFbrgh1Rxip0Z8ovqJSXN4XU9q9g_27hM53eoh1BA6lB26o1XbcmTzRYoA7jkCYEgmXWSnqLET-2MPmzWg3JrLAKOn-CX9VLmUCdKU6Zg7nsQGv4BZrRk_ERcA_IKcyapbeuKwMjyfHGdJKGeJXxEM3iOjusV8nXVpaWshlwf4VFjCCTpTmNRAoCMULwroXZmjuzgDwUoyRAO7UiZ_HFO27ztoDEP4lPHdCbOeckUuJRQPKRWIm6zGkCDzz43mFPQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:49:21.889-04:00, 2020-06-01T14:49:21.889-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 14:49:21.902 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
2017-06-152 14:49:21.902 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8
ae7OBBETN06aqE15N4KryWZNz4EHDXZGd9s2FqwwvptJ6ljgRK4kDwfYb-D6NBe5crT7bF2fjWZ96EJ3IPEUgiFbrgh1Rxip0Z8ovqJSXN4XU9q9g_27hM53eoh1BA6lB26o1XbcmTzRYoA7jkCYEgmXWSnqLET-2MPmzWg3JrLAKOn-CX9VLmUCdKU6Zg7nsQGv4BZrRk_ERcA_IKcyapbeuKwMjyfHGdJKGeJXxEM3iOjusV8nXVpaWshlwf4VFjCCTpTmNRAoCMULwroXZmjuzgDwUoyRAO7UiZ_HFO27ztoDEP4lPHdCbOeckUuJRQPKRWIm6zGkCDzz43mFPQ
iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-01T14:49:21.889-04:00, 2020-06-01T14:49:21.889-04:00, PT720H
SHA256withRSA
Advertise/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E).
link('nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4').
2017-06-152 14:49:22.099 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8) is posted (code: 204)
2017-06-152 14:49:22.100 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postInitRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1'), [startRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '1')]); solution(goals.head): ['2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8']; FreshGoals: List()
2017-06-152 14:49:22.111 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:49:22.112 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.112 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.112 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:49:22.112 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:49:22.112 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:49:22.113 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 14:49:22.115 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:22.115 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:22.116 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:49:22.116-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:49:22.117 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.982-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:49:22.118 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:49:22.131 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw:
Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
lDQzx6O-SuN4Ryg8Cb-xL1uZcSw0uRpFQFC7hztYv-jhnR-CGXz2ZUgnyjYWsInPcNbn3spUDdimV2FCUNggfNOJ6-teRdXBlVpPkxShvi1HlTrlVmQztkKasQzg6v1V0LIjqODP2WSA3aOSc6RD4s6wnhcze3Jsgv8lkCBQwOVtUVrLl6ntzZsqZfC7WmK7Q-x-7D4AUDB3h4mpZwy-cN5bmYAFFHBVSNt2fzslS6D_Udc6KzEzYlvevC9z-XmigkG4cvKpY0VvTMRV-j9PB6oTMcLvdDz2NjWO8Joto0-TmSPlvyVgWZ_SeObv99zpHWCEgeoxN9m4A-eKQM42CQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:49:22.118-04:00, 2020-06-01T14:49:22.118-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 14:49:22.131 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-152 14:49:22.131 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
lDQzx6O-SuN4Ryg8Cb-xL1uZcSw0uRpFQFC7hztYv-jhnR-CGXz2ZUgnyjYWsInPcNbn3spUDdimV2FCUNggfNOJ6-teRdXBlVpPkxShvi1HlTrlVmQztkKasQzg6v1V0LIjqODP2WSA3aOSc6RD4s6wnhcze3Jsgv8lkCBQwOVtUVrLl6ntzZsqZfC7WmK7Q-x-7D4AUDB3h4mpZwy-cN5bmYAFFHBVSNt2fzslS6D_Udc6KzEzYlvevC9z-XmigkG4cvKpY0VvTMRV-j9PB6oTMcLvdDz2NjWO8Joto0-TmSPlvyVgWZ_SeObv99zpHWCEgeoxN9m4A-eKQM42CQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:49:22.118-04:00, 2020-06-01T14:49:22.118-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
2017-06-152 14:49:22.247 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) is posted (code: 204)
2017-06-152 14:49:22.248 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw']; FreshGoals: List()
2017-06-152 14:49:22.255 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:49:22.256 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.256 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.256 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:49:22.256 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:49:22.257 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:49:22.259 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:22.259 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:49:22.260 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg'; FreshGoals: List()
2017-06-152 14:49:22.261 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg',?PathToken_1,ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:22.261 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:49:22.262 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 14:49:22.263 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:22.263 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:49:22.264 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg'; FreshGoals: List()
2017-06-152 14:49:22.264 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:22.265 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))
2017-06-152 14:49:22.266 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),None,Some(2017-06-01T14:23:10.736-04:00),Set(MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086))), Map(?Prcpl -> _2913286998, ?Prefix -> _3623592086, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3100088366,_3055049696)), :(_853785086,allocate(_3100088366,_3055049696)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_853785086,_940986404)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3055049696,_940986404))), Map(?Prcpl -> _3100088366, ?Prefix -> _3055049696, ?UpStream -> _853785086, ?PrefixSet -> _940986404)))),Set()), Subcontext(StrLit(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),None,Some(2017-06-01T14:23:10.737-04:00),Set(sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540))), Map(?DstIP -> _3374781160, ?Path -> _3877916282, ?DstIPSet -> _1954175540, ?Speaker -> _3180640736, ?AS -> _1832498634)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_2235274752,_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,[_524373440|_345555476]=_3768456536), :(_2235274752,advertise(_1101623106,_3768456536,_1184069764)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_96215306,_3644198496,_345555476,_2235274752)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1101623106,_3644198496))), Map(?DstIP -> _1101623106, ?Path -> _3768456536, ?DstIPSet -> _3644198496, ?Speaker -> _2235274752, ?AS -> _1184069764, ?Head -> _524373440, ?Tail -> _345555476, ?P -> _96215306))), StrLit(route2) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218))), Map(?DstIP -> _3440146378, ?Path -> _525771804, ?Dst -> _4211491468, ?DstIPSet -> _2469017218, $Self -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)))),Set()), Subcontext(StrLit(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),None,Some(2017-06-01T14:23:10.741-04:00),Set(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:49:22.267 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:49:22.267 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |  answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:49:22.267 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:49:22.267 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_3440146378,_525771804)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_4211491468,_2469017218,_525771804,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3440146378,_2469017218)), 

2017-06-152 14:49:22.268 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(_991975092,_2919868968)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1328042110,_1655474454,_2919868968,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_991975092,_1655474454)), 

2017-06-152 14:49:22.268 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1328042110,_1655474454,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1655474454)))
2017-06-152 14:49:22.268 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1328042110,_1655474454,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1655474454)), 

2017-06-152 14:49:22.268 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_3180640736,_3374781160,_3877916282,_1832498634)), :(_3180640736,advertise(_3374781160,_3877916282,_1832498634)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_3180640736,_1954175540)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3374781160,_1954175540)), 

2017-06-152 14:49:22.268 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,authorizedAdvertise(_1510000128,_3116072834,_3021824874,_3003099334)), :(_1510000128,advertise(_3116072834,_3021824874,_3003099334)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1510000128,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_3116072834,_4002629726)), 

2017-06-152 14:49:22.269 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_1328042110,advertise(_1655474454,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1328042110,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1655474454,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1655474454)))
2017-06-152 14:49:22.269 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1328042110,advertise(_1655474454,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1328042110,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1655474454,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1655474454)), 

2017-06-152 14:49:22.269 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:22.269 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:22.269 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1328042110; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.270 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1328042110; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.270 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1655474454; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.270 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1655474454; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.270 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:22.270 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:22.271 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:22.271 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:22.271 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:49:22.271 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_1328042110,advertise(_1655474454,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_1328042110,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(_1655474454,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_1655474454)), 

2017-06-152 14:49:22.271 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:22.272 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:22.272 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1328042110; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.272 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_1328042110; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.272 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1655474454; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.272 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_1655474454; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.273 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:22.273 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:22.273 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2913286998,_3623592086)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2913286998,_3623592086)), 

2017-06-152 14:49:22.273 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,ownPrefix(_2377547104,_3538909582)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2377547104,_3538909582)), 

2017-06-152 14:49:22.273 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:22.274 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",_4002629726)), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:22.274 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:49:22.274 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:49:22.274 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4002629726; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.275 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4002629726; that.getClass=class prolog.terms.Var
2017-06-152 14:49:22.275 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:22.275 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |   answer=:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,route(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:49:22.276 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.19.2/24", '[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'MxeUHe3Dq8MuhWNOhYOG4NIZVny9-YdTP5sofEuxeVg','sU8qi6o79Ed-Ky29KPX5ScY5pVaMwJCUXVQ-OgbXXmg','Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 14:49:22.289 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-152 14:49:22.289 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.290 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.290 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:49:22.290 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-152 14:49:22.290 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-152 14:49:22.291 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-152 14:49:22.292 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:49:22.292 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)'; FreshGoals: List()
2017-06-152 14:49:22.293 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw'; FreshGoals: List()
2017-06-152 14:49:22.293 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:49:22.294 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:49:22.294-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw))), Map($PathToken -> Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)))),
links: ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),
speaksForToken: None,
label: Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:49:22.294 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.540-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw))), Map($PathToken -> Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)))),
links: ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw),
speaksForToken: None,
label: Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-152 14:49:22.294 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24','1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 14:49:22.304 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ:
OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
lbte0f06-C-qHluUy1zSOy7fvtNYj9yBZ4sgXvmDYWlrLGkL5JL1cOyg-PT7i80igyH1dKmyljZ_ojPdmkfcWsDBbjDgkX3xUxMIMDysKjo2cw8D_c2gxIys4lUhl3BAiJf3LOs1XNUsJR4EM3XAha_d1tdsq72ORMkJp8yV3HOKhNc-144wZok1ZWQPKAUrEHnxcNAH6RUOkjZ7ViJ_UQtz0TbfevKBNEsGvBokbYR2j71Gw06HOlsS8eJDoM0xo4B7Cz7xajuM6_EypqHbjXepu0CsqRkSKagGVDxWsRMxWvvNeDQdOH9oXiNcndJkyDKTB-jh-HN5j10pRgkwLQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:49:22.295-04:00, 2020-06-01T14:49:22.295-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 14:49:22.304 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
2017-06-152 14:49:22.304 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ
lbte0f06-C-qHluUy1zSOy7fvtNYj9yBZ4sgXvmDYWlrLGkL5JL1cOyg-PT7i80igyH1dKmyljZ_ojPdmkfcWsDBbjDgkX3xUxMIMDysKjo2cw8D_c2gxIys4lUhl3BAiJf3LOs1XNUsJR4EM3XAha_d1tdsq72ORMkJp8yV3HOKhNc-144wZok1ZWQPKAUrEHnxcNAH6RUOkjZ7ViJ_UQtz0TbfevKBNEsGvBokbYR2j71Gw06HOlsS8eJDoM0xo4B7Cz7xajuM6_EypqHbjXepu0CsqRkSKagGVDxWsRMxWvvNeDQdOH9oXiNcndJkyDKTB-jh-HN5j10pRgkwLQ
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-01T14:49:22.295-04:00, 2020-06-01T14:49:22.295-04:00, PT720H
SHA256withRSA
Advertise/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/1 (set29)

advertise(ipv4"192.168.19.2/24",'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24).
link('Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw').
2017-06-152 14:49:22.640 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ) is posted (code: 204)
2017-06-152 14:49:22.640 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [advertiseRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ']; FreshGoals: List()
2017-06-152 14:49:22.650 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, ipv4"192.168.19.2/24", bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:49:22.650 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.650 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:22.650 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:49:22.651 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:49:22.651 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:49:22.652 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]))
2017-06-152 14:49:22.653 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:22.654 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:22.655 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:49:22.655-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ))), Map($Token -> OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)))),
links: ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ),
speaksForToken: None,
label: Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:49:22.655 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:52:39.772-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ))), Map($Token -> OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)))),
links: ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ),
speaksForToken: None,
label: Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:49:22.656 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ','bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E',ipv4"192.168.19.2/24",'2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:49:22.666 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs:
piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
MnYqFyBrwcU2ZhX6zqCkkB3lVjHUJwKtW8hnwieJpeOtJqpM2QOFrm3tTD5Vl9JLj5k98QPDeOW3rgdZUOCBqnM1M2-isZiDXVhu8utkQbXVD-mHzeQ2L7gGOyPnxaLq8JpkgHDzH0dA5o4KFovfTfMlrfrbciC_MkLGC7Qvbs4n9wpCHolgKXkCcd2Ze8_2DAW7Qh7vN7K96CyUcOBeHlHahO61a-BzfYw28DNvb0zdwOvFF7n3iTX_XjaF_OJTzENmorp3U-gZamhylIqM-ZOzn51cPV3SC96wqzMREPFCrRIx_M4r0lmkR1z3sLj2uo65RjE2JLJTEj7Xnz_EQQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:49:22.656-04:00, 2020-06-01T14:49:22.656-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 14:49:22.666 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
2017-06-152 14:49:22.666 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs
MnYqFyBrwcU2ZhX6zqCkkB3lVjHUJwKtW8hnwieJpeOtJqpM2QOFrm3tTD5Vl9JLj5k98QPDeOW3rgdZUOCBqnM1M2-isZiDXVhu8utkQbXVD-mHzeQ2L7gGOyPnxaLq8JpkgHDzH0dA5o4KFovfTfMlrfrbciC_MkLGC7Qvbs4n9wpCHolgKXkCcd2Ze8_2DAW7Qh7vN7K96CyUcOBeHlHahO61a-BzfYw28DNvb0zdwOvFF7n3iTX_XjaF_OJTzENmorp3U-gZamhylIqM-ZOzn51cPV3SC96wqzMREPFCrRIx_M4r0lmkR1z3sLj2uo65RjE2JLJTEj7Xnz_EQQ
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:49:22.656-04:00, 2020-06-01T14:49:22.656-04:00, PT720H
SHA256withRSA
Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)

link('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ').
2017-06-152 14:49:23.459 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) is posted (code: 204)
2017-06-152 14:49:23.459 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [linkRoute('OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ', ipv4"192.168.19.2/24", 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]); solution(goals.head): ['piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs']; FreshGoals: List()
2017-06-152 14:49:23.468 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:49:23.468 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:23.468 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:23.469 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:49:23.469 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:49:23.469 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:49:23.472 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"), ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,?RoutingPolicyRef_1,?PathToken_1,ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:23.473 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "routing policy($PolicyVersion)"; solution(goals.head): 'routing policy(policy23)'; FreshGoals: List()
2017-06-152 14:49:23.473 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic'; FreshGoals: List()
2017-06-152 14:49:23.474 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?RoutingPolicyRef_1 := label("routing policy($PolicyVersion)"); solution(goals.head): 'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic' := label("routing policy($PolicyVersion)"); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic',?PathToken_1,ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:23.475 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 14:49:23.475 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 14:49:23.476 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"), defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = ?OwnPrefixPolicy_1,'mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:23.477 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "own prefix policy($PolicyVersion)"; solution(goals.head): 'own prefix policy(policy23)'; FreshGoals: List()
2017-06-152 14:49:23.477 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A'; FreshGoals: List()
2017-06-152 14:49:23.478 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?OwnPrefixPolicy_1 := label("own prefix policy($PolicyVersion)"); solution(goals.head): 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A' := label("own prefix policy($PolicyVersion)"); FreshGoals: List(defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)))
2017-06-152 14:49:23.479 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - queries: ListBuffer(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))
2017-06-152 14:49:23.480 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm executeDefguard$1}[0;39m - subcontexts: ArrayBuffer(Subcontext(StrLit(_guard),None,None,Set(),Map(),Map(),Set(StyQuery(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))?, Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8])))), Subcontext(StrLit(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),None,Some(2017-06-01T14:23:10.967-04:00),Set(GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A),Map(),Map(StrLit(ownPrefix2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546))), Map(?Prcpl -> _3799578162, ?Prefix -> _2120900546, $RpkiRoot -> UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890))), Map(?Prcpl -> _2062985880, ?Prefix -> _2433846870, ?UpStream -> _3036492576, ?PrefixSet -> _2554723890)))),Set()), Subcontext(StrLit(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),None,Some(2017-06-01T14:23:10.967-04:00),Set(mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic),Map(),Map(StrLit(authorizedAdvertise4) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324))), Map(?DstIP -> _1247179332, ?Path -> _376384540, ?DstIPSet -> _3061613324, ?Speaker -> _1462248904, ?AS -> _2708264076)), StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628))), Map(?DstIP -> _539085292, ?Path -> _3878597072, ?DstIPSet -> _994643628, ?Speaker -> _1329660884, ?AS -> _3021482714, ?Head -> _4076920878, ?Tail -> _3695188234, ?P -> _1332908898))), StrLit(route2) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362))), Map(?DstIP -> _3468466298, ?Path -> _317219054, ?Dst -> _3386517586, ?DstIPSet -> _3130344362, $Self -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)))),Set()), Subcontext(StrLit(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),None,Some(2017-06-01T14:23:10.973-04:00),Set(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs, OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ, Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw, 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8, nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4, CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q, p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8),Map(StrLit(advertise3) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), StyStmt(List(:(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))), StrLit(allocate2) -> Set(StyStmt(List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24"))), Map($Prcpl -> iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, $Prefix -> ipv4"192.168.19.2/24")))),Map(),Set()))
2017-06-152 14:49:23.481 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mStylaService$[0;39m [32m{safe.safelang.StylaService$ solveWithContext}[0;39m - numStyla=1    stylaQ.size=1
2017-06-152 14:49:23.482 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |  answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:49:23.482 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:49:23.482 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_3468466298,_317219054)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_3386517586,_3130344362,_317219054,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3468466298,_3130344362)), 

2017-06-152 14:49:23.483 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(_1501386990,_3862921682)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2192525318,_441222882,_3862921682,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1501386990,_441222882)), 

2017-06-152 14:49:23.483 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2192525318,_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)))
2017-06-152 14:49:23.483 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2192525318,_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)), 

2017-06-152 14:49:23.484 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:49:23.484 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2839885676,_2993562246,_1266262964,_880568238)), :(_2839885676,advertise(_2993562246,_1266262964,_880568238)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2839885676,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2993562246,_3036858394)), 

2017-06-152 14:49:23.484 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_2192525318,advertise(_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2192525318,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_441222882,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)))
2017-06-152 14:49:23.485 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2192525318,advertise(_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2192525318,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_441222882,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)), 

2017-06-152 14:49:23.485 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.485 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.486 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.486 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.486 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.486 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.487 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.487 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.487 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.488 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.488 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:49:23.488 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2192525318,advertise(_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2192525318,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_441222882,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)), 

2017-06-152 14:49:23.489 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.489 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.489 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.489 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.490 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.490 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.490 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.491 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.491 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:49:23.491 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2008782382,_4049207150)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_2008782382,_4049207150)), 

2017-06-152 14:49:23.491 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.492 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.492 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2062985880,_2433846870)), :(_3036492576,allocate(_2062985880,_2433846870)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3036492576,_2554723890)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2433846870,_2554723890)), 

2017-06-152 14:49:23.492 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_667924476,_2234435846)), :(_797914474,allocate(_667924476,_2234435846)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_797914474,_286473594)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_2234435846,_286473594)), 

2017-06-152 14:49:23.493 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_797914474,allocate(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_797914474,_286473594)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3036858394,_286473594)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.493 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.493 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.494 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.494 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.494 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.494 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.495 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.495 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.495 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.496 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.496 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.496 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:49:23.496 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2192525318,advertise(_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_2192525318,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_441222882,_3036858394)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)), 

2017-06-152 14:49:23.497 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.497 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.497 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.498 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.498 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.498 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.498 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:49:23.499 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:49:23.499 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:49:23.499 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_2192525318,_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)), 

2017-06-152 14:49:23.500 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1329660884,_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_4076920878|_3695188234]=_3878597072), :(_1329660884,advertise(_539085292,_3878597072,_3021482714)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1332908898,_994643628,_3695188234,_1329660884)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_539085292,_994643628)), 

2017-06-152 14:49:23.500 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1245264114,_3098324554,_4024358992,_1722732604)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3839077042|_969971356]=_4024358992), :(_1245264114,advertise(_3098324554,_4024358992,_1722732604)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_550884782,_820694712,_969971356,_1245264114)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_3098324554,_820694712)), 

2017-06-152 14:49:23.500 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,[_3839077042|_969971356]=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]), :(_2192525318,advertise(_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_550884782,_820694712,_969971356,_2192525318)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_441222882,_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)))
2017-06-152 14:49:23.500 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3839077042; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.500 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_3839077042; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.501 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=_969971356; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.501 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=_969971356; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.501 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2192525318,advertise(_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_550884782,_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],_2192525318)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_441222882,_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)), 

2017-06-152 14:49:23.501 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.501 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.502 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.502 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.502 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.502 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.502 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.502 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.503 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.503 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.503 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24))
2017-06-152 14:49:23.503 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_2192525318,advertise(_441222882,[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_550884782,_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],_2192525318)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_441222882,_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_441222882)), 

2017-06-152 14:49:23.503 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.503 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.504 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.504 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_2192525318; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.504 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.504 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_441222882; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.504 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_550884782,_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.505 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_550884782,_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.505 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1462248904,_1247179332,_376384540,_2708264076)), :(_1462248904,advertise(_1247179332,_376384540,_2708264076)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1462248904,_3061613324)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_1247179332,_3061613324)), 

2017-06-152 14:49:23.505 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,authorizedAdvertise(_1226142764,_4107038692,_2050665590,_499331718)), :(_1226142764,advertise(_4107038692,_2050665590,_499331718)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1226142764,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_4107038692,_4288000262)), 

2017-06-152 14:49:23.505 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(_550884782,advertise(_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_550884782,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_820694712,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.505 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_550884782,advertise(_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_550884782,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_820694712,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.506 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.506 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.506 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.506 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.506 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.506 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.507 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.507 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.507 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.507 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.507 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:49:23.508 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_550884782,advertise(_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_550884782,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_820694712,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.508 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.508 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)), 

2017-06-152 14:49:23.508 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.508 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.508 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.509 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.509 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E  that.sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8
2017-06-152 14:49:23.509 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Const bind_to}[0;39m - Cannot bind: sym=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8  that.sym=bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-152 14:49:23.509 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24)) cannot be unified with :(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:49:23.509 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_550884782,advertise(_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_550884782,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_820694712,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.509 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.509 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.510 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.510 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.510 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.510 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.510 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.510 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; that.getClass=class prolog.terms.Cons
2017-06-152 14:49:23.511 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.511 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mCons[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]]; this.getClass=class prolog.terms.Cons; that=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; that.getClass=class prolog.terms.Const
2017-06-152 14:49:23.511 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldwith] :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)) cannot be unified with :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E))
2017-06-152 14:49:23.511 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(_550884782,advertise(_820694712,[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_550884782,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(_820694712,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_820694712)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.511 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.511 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,advertise(ipv4"192.168.19.2/24",[iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E)), 

2017-06-152 14:49:23.512 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.512 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8; this.getClass=class prolog.terms.Const; that=_550884782; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.512 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.512 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_820694712; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.512 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.512 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.513 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_3799578162,_2120900546)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_3799578162,_2120900546)), 

2017-06-152 14:49:23.513 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,ownPrefix(_1756459614,_3326548514)), :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(_1756459614,_3326548514)), 

2017-06-152 14:49:23.513 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.513 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] goal= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",_4288000262)), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.513 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder nextGoal}[0;39m - 
[Unfolder nextGoal] clause= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.513 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  copylist= :(UIz4bXT7accigZ7KNpEyF2igwGOgXb9gne7p13i2bWA,allocate(iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8,ipv4"192.168.19.2/24")), 

2017-06-152 14:49:23.514 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4288000262; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.514 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mConst[0;39m [32m{prolog.terms.Nonvar bind_to}[0;39m - [Nonvar bind_to] Cannot bind: this=ipv4"192.168.19.2/24"; this.getClass=class prolog.terms.Const; that=_4288000262; that.getClass=class prolog.terms.Var
2017-06-152 14:49:23.514 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mUnfolder[0;39m [32m{prolog.interp.Unfolder unfoldWith}[0;39m - [Unfolder unfoldWith]  unification succeeds  new goals= List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")), :(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,isInRange(ipv4"192.168.19.2/24",ipv4"192.168.19.2/24")))
2017-06-152 14:49:23.514 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mLogicEngine[0;39m [32m{prolog.interp.Prog getElement}[0;39m - [Prog getElement] query=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 
   |   answer=:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,route(ipv4"192.168.19.2/24",[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8|[]])), 

2017-06-152 14:49:23.515 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); solution(goals.head): defguard(verifyRoute(ipv4"192.168.19.2/24", '[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(XJ-bm8gfHkLUZesAWzurAQ); argRefs = StrLit($OwnPrefixPolicy),StrLit($RoutingPolicyRef),StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Self),StrLit($SelfKey); args = 'GbXxA4b2c1o01Tnw47w6-liCpICA8VrR0Xb8m-sNS1A','mJvojEuFIZHdnjpKbTJ-xHr2lbiVNzCz8szpEDSW_Ic','piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]',?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_query) -> Set(StyQuery(List(route($_197779192,$_4202215968))?, Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968))), StrLit(_link) -> Set(StyStmt(List(link($_2439775620)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_2674107516)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)), StyStmt(List(link($_3817234576)), Map($OwnPrefixPolicy -> $_2439775620, $RoutingPolicyRef -> $_2674107516, $PathToken -> $_3817234576, $DstIP -> $_197779192, $Path -> $_4202215968)))),None)); FreshGoals: List()
2017-06-152 14:49:23.529 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(ipv4"192.168.19.2/24", [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8, bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E, 2)
2017-06-152 14:49:23.529 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')? 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:23.529 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24) 
 requestedEnv: Map(Principal -> Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:23.530 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-152 14:49:23.530 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24')
    safelangId             = 8
2017-06-152 14:49:23.530 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')?)
2017-06-152 14:49:23.531 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(defpost(postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]))
2017-06-152 14:49:23.533 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); solution(goals.head): advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'); FreshGoals: List(?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"), defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = ?PathToken_1,ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:49:23.534 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: "Path/?Src/?DstIP/?Len ($SetVersion)"; solution(goals.head): 'Path/bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E/ipv4"192.168.19.2/24"/2 (set29)'; FreshGoals: List()
2017-06-152 14:49:23.534 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs'; FreshGoals: List()
2017-06-152 14:49:23.535 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: ?PathToken_1 := label("Path/?Src/?DstIP/?Len ($SetVersion)"); solution(goals.head): 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs' := label("Path/?Src/?DstIP/?Len ($SetVersion)"); FreshGoals: List(defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)))
2017-06-152 14:49:23.536 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:49:23.536-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.19.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs))), Map($PathToken -> piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)))),
links: ArrayBuffer(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),
speaksForToken: None,
label: Advertise/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:49:23.537 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
subject: Some(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T14:23:10.019-04:00),
queries: List(),
statements: Map(StrLit(advertise3) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,advertise(ipv4"192.168.19.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), Map($DstIP -> ipv4"192.168.19.2/24", $Path -> [weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8], $Target -> V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8))), StrLit(_link) -> Set(StyStmt(List(:(weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,link(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs))), Map($PathToken -> piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)))),
links: ArrayBuffer(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs),
speaksForToken: None,
label: Advertise/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.19.2/24"/2 (set29),
signature: None,
setData: None
2017-06-152 14:49:23.537 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); solution(goals.head): defcon(advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), SetTerm(id = StrLit(7soikpOz838LT0wpzMVmHA); argRefs = StrLit($PathToken),StrLit($DstIP),StrLit($Path),StrLit($Target),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs',ipv4"192.168.19.2/24",'[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]','V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8','2',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(advertise3) -> Set(StyStmt(List(advertise($_1803771884,$_4200123530,$_3049696684)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Advertise/,$_3049696684,/,$_1803771884,/,_634314898, (,_416171068,))))), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068))), StrLit(_link) -> Set(StyStmt(List(link($_1238697530)), Map($PathToken -> $_1238697530, $DstIP -> $_1803771884, $Path -> $_4200123530, $Target -> $_3049696684, $Len -> _634314898, $SetVersion -> _416171068)))),None)); FreshGoals: List()
2017-06-152 14:49:23.548 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token 1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg:
1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
GwCcTtTBLcPW4tbz8VoLdrMq_GuE_aYK_XMDpUT5sZB8xggrybd2b77A4iYS6hC4Ju11lWsrS14x5phyNHCOcZ8QXrOy57LWG6mpyaCitNjzzy19LOrYi21m35TeZxSRB1QmQdJhM3VZULQftQHbWWgkLrYod-PHc4MuNjKBQZ_-QHuuBLHS-50QSExIEz6qxWyXXilHcDtfXyn1Lyr51jPS7P4AWFp5NsI17DD79h34vmGYtJKmeOOJVSiVs2P7FaxuD5rY7PXnOCcdjC4H5VIjRgHyWgvbqEtdW6yn6vRTAgW3yFyImDhfbu0yKkHTAE57GKmUOq34Hq9ZVOQQ9g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:49:23.538-04:00, 2020-06-01T14:49:23.538-04:00, PT720H
SHA256withRSA
Advertise/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.19.2/24"/2 (set29)

advertise(ipv4"192.168.19.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs').
2017-06-152 14:49:23.549 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: 1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
2017-06-152 14:49:23.549 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg
GwCcTtTBLcPW4tbz8VoLdrMq_GuE_aYK_XMDpUT5sZB8xggrybd2b77A4iYS6hC4Ju11lWsrS14x5phyNHCOcZ8QXrOy57LWG6mpyaCitNjzzy19LOrYi21m35TeZxSRB1QmQdJhM3VZULQftQHbWWgkLrYod-PHc4MuNjKBQZ_-QHuuBLHS-50QSExIEz6qxWyXXilHcDtfXyn1Lyr51jPS7P4AWFp5NsI17DD79h34vmGYtJKmeOOJVSiVs2P7FaxuD5rY7PXnOCcdjC4H5VIjRgHyWgvbqEtdW6yn6vRTAgW3yFyImDhfbu0yKkHTAE57GKmUOq34Hq9ZVOQQ9g
weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24
2017-06-01T14:49:23.538-04:00, 2020-06-01T14:49:23.538-04:00, PT720H
SHA256withRSA
Advertise/V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8/ipv4"192.168.19.2/24"/2 (set29)

advertise(ipv4"192.168.19.2/24",[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8],'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8').
link('piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs').
2017-06-152 14:49:23.878 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg) is posted (code: 204)
2017-06-152 14:49:23.879 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postAdvertise(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2'), [advertiseRoute(ipv4"192.168.19.2/24", '[weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24,bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8]', 'V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8', 'bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E', '2')]); solution(goals.head): ['1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg']; FreshGoals: List()
2017-06-152 14:49:23.896 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg, ipv4"192.168.19.2/24", weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24, 3)
2017-06-152 14:49:23.896 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3')? 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:23.896 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8) 
 requestedEnv: Map(Principal -> Some(V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-152 14:49:23.896 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-152 14:49:23.897 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8')
    safelangId             = 8
2017-06-152 14:49:23.897 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3')?)
2017-06-152 14:49:23.898 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'); solution(goals.head): postPathToken('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'); FreshGoals: List(defpost(postPathToken('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'), [linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3')]))
2017-06-152 14:49:23.898 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'); solution(goals.head): linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.19.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:23.899 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.19.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-152 14:49:23.900 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(eTCx3HFgNSD5Z1yWzNuavNhCdeO7vRxq0TsWPSaChIQ) has expired from prefetching cache
2017-06-152 14:49:23.900 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(je7UlUAe8gCKCvirjZlbAUFDI73X41oIvXD7wWh0b18) has expired from prefetching cache
2017-06-152 14:49:23.900 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0
2017-06-152 14:49:23.900 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient fetchCert}[0;39m - Fetch remote: http://152.3.145.36:8098/types/safesets/buckets/safe/keys/V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0
2017-06-152 14:49:23.990 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient certFromFetchResponse}[0;39m - WARN fetch cert async failed: unknown status code 404
2017-06-152 14:49:23.991 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient fetchSlogSet}[0;39m - Invalid rawCert: None
2017-06-152 14:49:23.991 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache get}[0;39m - Fetch via set cache failed on token Token(V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0) : com.google.common.util.concurrent.UncheckedExecutionException: safe.safelog.UnSafeException: Set Token(V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0) unavailable neither in local set table nor in safesets  getLocal=None
2017-06-152 14:49:23.992 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 120 fetched (prebuffer 17): Token(V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0)
2017-06-152 14:49:23.992 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0): ArrayBuffer(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg)
2017-06-152 14:49:23.992 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg)
2017-06-152 14:49:23.992 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(knSL7Rn4nLfzwL5oYrR0kj2ZNU8K6Ckupnn-j7rztLI) has expired from prefetching cache
2017-06-152 14:49:23.992 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.19.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = '1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg','weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24',ipv4"192.168.19.2/24",'3',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-152 14:49:23.993 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(UsPd6Xm5h1TcmiC5aQZkxnT4XUYTFUzYpncxDdnN7cA) has expired from prefetching cache
2017-06-152 14:49:23.993 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 121 fetched (prebuffer 16): Token(1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg)
2017-06-152 14:49:23.993 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg): ArrayBuffer(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 14:49:23.993 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 14:49:23.994 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs) has expired from prefetching cache
2017-06-152 14:49:23.994 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 122 fetched (prebuffer 16): Token(piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs)
2017-06-152 14:49:23.994 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (piTrrAc2mdTnZsO7_NfqYfX_6-av21mernTmQ9955zs): ArrayBuffer(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:49:23.994 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:49:23.994 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 123 fetched (prebuffer 17): Token(OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ)
2017-06-152 14:49:23.994 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (OuM8zJnAWSv_toBoyEb-Gyecx8QTKZHlUcJhJvn4adQ): ArrayBuffer(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:49:23.994 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) has expired from prefetching cache
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 124 fetched (prebuffer 17): Token(Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw)
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw): ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 125 fetched (prebuffer 18): Token(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8): ArrayBuffer(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:49:23.995 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4) has expired from prefetching cache
2017-06-152 14:49:23.996 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 126 fetched (prebuffer 18): Token(nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4)
2017-06-152 14:49:23.996 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (nLWA6vjcFeb3zMbGLBJlfE8iOAaaRoOr_Pu_rVs33b4): ArrayBuffer(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:49:23.996 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:49:23.996 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q) has expired from prefetching cache
2017-06-152 14:49:23.996 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 127 fetched (prebuffer 18): Token(CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q)
2017-06-152 14:49:23.996 [ForkJoinPool-3-worker-5] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (CDh8_fkbZrBqC2dFSnE8QmVXYCExrmynwi7qJDR-A5Q): ArrayBuffer(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:49:23.996 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anonfun$3$$anonfun$apply$1 apply}[0;39m - prebuffer Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:49:23.997 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader$$anon$3 onRemoval}[0;39m - Key Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8) has expired from prefetching cache
2017-06-152 14:49:23.997 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - 128 fetched (prebuffer 18): Token(p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8)
2017-06-152 14:49:23.997 [ForkJoinPool-3-worker-3] [34mINFO [0;39m [36mSetCache[0;39m [32m{safe.safelang.setcache.SetCache$SafePrefetchingCacheLoader safe$safelang$setcache$SetCache$SafePrefetchingCacheLoader$$loadCert}[0;39m - links of cert (p0WZ1nb40LRQtOBLdmvwWiZpz_0u7F7dvCJ6BE2UEI8): List()
2017-06-152 14:49:24.004 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0:
V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0
GZs4A8owx6BtU0s9loTOHU650qMkbQjF98NNTIgzgBuGiFkZicJyw34AsDeFLHllfJGEn0h07uwdqYv7J9VyRLDCsMduvZMKaJZncX189XMJwZz8r5uBl76kdpStQoP4gpFLNrqSxbPP9f7Jmzj61ILpiMa0l1mU32BWz6W8e0VfpMyKDAo59f4CmajwegSverH-8TmmYwzMYsZ4skKSR0y-iMxO5NJuPJ_qr448I66k_OKomrllhlCx7jNzS8cC0pETbvHGKopofFjK4-FX6GAAeUmFHa2PdOqmUomFqQQvuXK8u6s38QqFdn8O0iS2lCTde5pkYnpwCk3SISgEJg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:49:23.993-04:00, 2020-06-01T14:49:23.993-04:00, PT720H
SHA256withRSA
Path/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/3 (set29)

link('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg').
2017-06-152 14:49:24.004 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0
2017-06-152 14:49:24.004 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0
GZs4A8owx6BtU0s9loTOHU650qMkbQjF98NNTIgzgBuGiFkZicJyw34AsDeFLHllfJGEn0h07uwdqYv7J9VyRLDCsMduvZMKaJZncX189XMJwZz8r5uBl76kdpStQoP4gpFLNrqSxbPP9f7Jmzj61ILpiMa0l1mU32BWz6W8e0VfpMyKDAo59f4CmajwegSverH-8TmmYwzMYsZ4skKSR0y-iMxO5NJuPJ_qr448I66k_OKomrllhlCx7jNzS8cC0pETbvHGKopofFjK4-FX6GAAeUmFHa2PdOqmUomFqQQvuXK8u6s38QqFdn8O0iS2lCTde5pkYnpwCk3SISgEJg
V1F2853Nq8V304Yb_GInYaWTgVqmBsQwC0tXWuNmmf8
2017-06-01T14:49:23.993-04:00, 2020-06-01T14:49:23.993-04:00, PT720H
SHA256withRSA
Path/weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24/ipv4"192.168.19.2/24"/3 (set29)

link('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg').
2017-06-152 14:49:24.059 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0) is posted (code: 204)
2017-06-152 14:49:24.059 [ForkJoinPool-3-worker-15] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3'), [linkRoute('1srwvWU2Agc2nvbm81tpFZAw8geV18kCMVuyJdksNJg', ipv4"192.168.19.2/24", 'weQ8OFpXWhIB1AMzKX2SDJcxT738VdHCcl7mFlvOD24', '3')]); solution(goals.head): ['V4Lul-ImFBGEPtShD3ailuD7TW58RTmwFoCtL4eVtM0']; FreshGoals: List()
2017-06-152 14:54:24.129 [Safelang-akka.actor.default-dispatcher-24] [34mINFO [0;39m [36mLocalActorRef[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - Message [akka.io.Tcp$Close$] from Actor[akka://Safelang/user/IO-HTTP/group-0/3#-1957684412] to Actor[akka://Safelang/system/IO-TCP/selectors/$a/3#299847145] was not delivered. [4] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
2017-06-153 22:28:22.414 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$$anonfun$guardHandlerRoute$1$$anonfun$4 apply}[0;39m - [guardHandlerRoute] envs=Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)     args=List(X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g, ipv4"192.168.19.2/24", iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8, 1)
2017-06-153 22:28:22.418 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mRestfulService[0;39m [32m{safe.server.frontend.RestfulHttpService$class runGuard}[0;39m - [runGuard] query: postPathToken('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')? 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-153 22:28:22.418 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - p: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E) 
 requestedEnv: Map(Principal -> Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E), Subject -> None, BearerRef -> None, Object -> None, Speaker -> None)
2017-06-153 22:28:22.418 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager solveSlangQuery}[0;39m - pid: bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-153 22:28:22.418 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelangManager[0;39m [32m{safe.safelang.SafelangManager checkInferenceEnv}[0;39m -  ========= Checking envs of this inference instance =========
    Subject                = None
    Speaker                = None
    Object                 = None
    BearerRef              = None
    ServerPrincipal/SelfID = Some('bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E')
    safelangId             = 8
2017-06-153 22:28:22.418 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$class solveSlang}[0;39m - [solveSlang] slang queries: List(postPathToken('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')?)
2017-06-153 22:28:22.419 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: postPathToken('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): postPathToken('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(defpost(postPathToken('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]))
2017-06-153 22:28:22.420 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); solution(goals.head): linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'); FreshGoals: List(spec('link a token for an advertised path'), defcon(linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-153 22:28:22.421 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: spec('link a token for an advertised path'); solution(goals.head): spec('link a token for an advertised path'); FreshGoals: List(defcon(linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)))
2017-06-153 22:28:22.423 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] slogset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-02T22:28:22.422-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g))), Map($Token -> X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g)))),
links: ArrayBuffer(X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-153 22:28:22.423 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSetTerm[0;39m [32m{safe.safelang.SetTerm evalSet}[0;39m - [Slang Term evalSet defcon] existingset=issuer: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
subject: Some(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E),
freshUtil: None,
speakersFreshUtil: None,
issuerFreshUntil: None,
validatedSpeaker: true,
validated: true,
resetTime: Some(2017-07-01T13:51:43.982-04:00),
queries: List(),
statements: Map(StrLit(_link) -> Set(StyStmt(List(:(bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E,link(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8))), Map($Token -> 2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8)))),
links: ArrayBuffer(2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8),
speaksForToken: None,
label: Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29),
signature: None,
setData: None
2017-06-153 22:28:22.424 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defcon(linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); solution(goals.head): defcon(linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), SetTerm(id = StrLit(fnCwiky9xkCWnhClKOibng); argRefs = StrLit($Token),StrLit($Src),StrLit($DstIP),StrLit($Len),StrLit($SetVersion),StrLit($Self),StrLit($SelfKey); args = 'X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g','iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8',ipv4"192.168.19.2/24",'1',?SetVersion_1,?Self_1,?SelfKey_1; template = SlogSetTemplate(Map(StrLit(_label) -> Set(StyStmt(List(label(interpolate(argsFun(Path/,_478114554,/,_2911450948,/,_3611040692, (,_1749028824,))))), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824))), StrLit(_link) -> Set(StyStmt(List(link($_2717607574)), Map($Token -> $_2717607574, $Src -> _478114554, $DstIP -> _2911450948, $Len -> _3611040692, $SetVersion -> _1749028824)))),None)); FreshGoals: List()
2017-06-153 22:28:22.442 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient postSlogSet}[0;39m - Token Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw:
Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
A9J0us_l0obTGs3ab8U2kh6nXWj17N2wy_ahXREovmSsIqBtQvf_CA21J-WV0lxf9STPgP3QeHjUJh1DJmN-WEtrh1Zh02shxDFC4oW5toLc4OtG-1Rsd4T1n_zuNNZylmBMgvr5gEO03G0Sl-41m5UDfKk4EW4Qow6sqnmSckBCExFeYTUJkcozSxYjeXKpt4ZCaCynASS6aZskLi-GVgtmClTdCW4uCmoFKyDKvrzh3nSYOb4rc_mtRsKHjJvYdotLq4gvkwLxrSxulEDWXmQ2tSLgRYp6E_EguOL9v6dE0tmsUjdZFszBPMl6YDtht-C8XOozpNCcuphgz0QUgg
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-02T22:28:22.425-04:00, 2020-06-02T22:28:22.425-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
link('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g').
2017-06-153 22:28:22.442 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafeSetsClient[0;39m [32m{safe.safelang.safesets.SafeSetsClient isIDSetToken}[0;39m - ID set token: Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
2017-06-153 22:28:22.442 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - Post cert safe.safelang.safesets.CertAddr$@4baa755c:
  Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw
A9J0us_l0obTGs3ab8U2kh6nXWj17N2wy_ahXREovmSsIqBtQvf_CA21J-WV0lxf9STPgP3QeHjUJh1DJmN-WEtrh1Zh02shxDFC4oW5toLc4OtG-1Rsd4T1n_zuNNZylmBMgvr5gEO03G0Sl-41m5UDfKk4EW4Qow6sqnmSckBCExFeYTUJkcozSxYjeXKpt4ZCaCynASS6aZskLi-GVgtmClTdCW4uCmoFKyDKvrzh3nSYOb4rc_mtRsKHjJvYdotLq4gvkwLxrSxulEDWXmQ2tSLgRYp6E_EguOL9v6dE0tmsUjdZFszBPMl6YDtht-C8XOozpNCcuphgz0QUgg
bphJZn3RJBnNqoCZk6k9SBD8mwSb054PXbwV7HpE80E
2017-06-02T22:28:22.425-04:00, 2020-06-02T22:28:22.425-04:00, PT720H
SHA256withRSA
Path/iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8/ipv4"192.168.19.2/24"/1 (set29)

link('2AUTHfeyhfZ0Mttcl__apKETR_m5XWGW1Ghy1hpNmT8').
link('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g').
2017-06-153 22:28:23.645 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSprayStorageClient[0;39m [32m{safe.safelang.safesets.SprayStorageClient postCert}[0;39m - cert (http://152.3.145.36:8098/types/safesets/buckets/safe/keys/Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw) is posted (code: 204)
2017-06-153 22:28:23.645 [ForkJoinPool-3-worker-1] [34mINFO [0;39m [36mSafelang[0;39m [32m{safe.safelang.InferenceImpl$$anonfun$23 apply}[0;39m - [slangInference] recurse solution: <function1>;  goals.head: defpost(postPathToken('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1'), [linkRoute('X9RZRTi6l3XY-M7FmyD3TODL_bVrzL2n_Qg0H-WUW3g', ipv4"192.168.19.2/24", 'iMrcWFMgx6DJeLtVWvBCMzwd8EDtJtZ4L0n3YYn1hi8', '1')]); solution(goals.head): ['Zk6dmXSWNhZeq4KuBg0QiOH5vjGuoW1qJ5vkkPA6bLw']; FreshGoals: List()
2017-06-153 22:33:23.647 [Safelang-akka.actor.default-dispatcher-29] [34mINFO [0;39m [36mLocalActorRef[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$3 apply$mcV$sp}[0;39m - Message [akka.io.Tcp$Close$] from Actor[akka://Safelang/user/IO-HTTP/group-0/4#1841601116] to Actor[akka://Safelang/system/IO-TCP/selectors/$a/4#-2109301054] was not delivered. [5] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
2017-06-156 05:21:27.662 [SafeSystem-akka.actor.default-dispatcher-69] [31mWARN [0;39m [36mHttpServerConnection[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$2 apply$mcV$sp}[0;39m - Illegal request, responding with status '501 Not Implemented': Unsupported HTTP method
2017-06-159 10:11:59.964 [SafeSystem-akka.actor.default-dispatcher-77] [31mWARN [0;39m [36mHttpServerConnection[0;39m [32m{akka.event.slf4j.Slf4jLogger$$anonfun$receive$1$$anonfun$applyOrElse$2 apply$mcV$sp}[0;39m - Illegal request, responding with status '400 Bad Request': Illegal request
