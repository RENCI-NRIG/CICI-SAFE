!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AppendFile	RoutingServer.java	/^  public static void  AppendFile(String filepath, String data){$/;"	m	class:RoutingServer	signature:(String filepath, String data)
IPPrefix	RoutingServer.java	/^  private static String IPPrefix="192.168.";$/;"	f	class:RoutingServer	file:
Neighbor	Neighbor.java	/^  public Neighbor(String pid, String pgateway, String pedgerouter, String pedgeip, String pslice){$/;"	m	class:Neighbor	signature:(String pid, String pgateway, String pedgerouter, String pedgeip, String pslice)
Neighbor	Neighbor.java	/^public class Neighbor{$/;"	c
OVSController	RoutingServer.java	/^  private static String OVSController;$/;"	f	class:RoutingServer	file:
RequestResource	RoutingClient.java	/^	private static final String RequestResource = null;$/;"	f	class:RoutingClient	file:
RequestResource	RoutingServer.java	/^	private static final String RequestResource = null;$/;"	f	class:RoutingServer	file:
RoutingAPI	RoutingAPI.java	/^public interface RoutingAPI extends java.rmi.Remote$/;"	i
RoutingClient	RoutingClient.java	/^  public RoutingClient()throws RemoteException{}$/;"	m	class:RoutingClient	signature:()
RoutingClient	RoutingClient.java	/^public class RoutingClient extends UnicastRemoteObject implements RoutingAPI{$/;"	c
RoutingServer	RoutingServer.java	/^  public RoutingServer()throws RemoteException{}$/;"	m	class:RoutingServer	signature:()
RoutingServer	RoutingServer.java	/^public class RoutingServer extends UnicastRemoteObject implements RoutingAPI {$/;"	c
SDNController	RoutingServer.java	/^  private static String SDNController;$/;"	f	class:RoutingServer	file:
SDNControllerIP	RoutingClient.java	/^  private static String SDNControllerIP;$/;"	f	class:RoutingClient	file:
SDNControllerIP	RoutingServer.java	/^  private static String SDNControllerIP;$/;"	f	class:RoutingServer	file:
addEntry_HashList	RoutingServer.java	/^  private void addEntry_HashList(HashMap<String,ArrayList<String>>  map,String key, String entry){$/;"	m	class:RoutingServer	file:	signature:(HashMap<String,ArrayList<String>> map,String key, String entry)
advertiseRoute	RoutingAPI.java	/^  boolean advertiseRoute(String dest, ArrayList<String> path, String customer_keyhash) throws RemoteException;$/;"	m	interface:RoutingAPI	signature:(String dest, ArrayList<String> path, String customer_keyhash)
advertiseRoute	RoutingClient.java	/^  public boolean advertiseRoute(String dest, ArrayList<String> path, String customer_keyhash) throws RemoteException{$/;"	m	class:RoutingClient	signature:(String dest, ArrayList<String> path, String customer_keyhash)
advertiseRoute	RoutingServer.java	/^  public boolean advertiseRoute(String dest, ArrayList<String> path, String customer_keyhash) throws RemoteException{$/;"	m	class:RoutingServer	signature:(String dest, ArrayList<String> path, String customer_keyhash)
advertisements	RoutingServer.java	/^  private static ArrayList<String[]> advertisements=new ArrayList<String[]>();$/;"	f	class:RoutingServer	file:
authorizeRoute	RoutingServer.java	/^  private boolean authorizeRoute(String recvhash, String sendhash, ArrayList<String> path, String dstip){$/;"	m	class:RoutingServer	file:	signature:(String recvhash, String sendhash, ArrayList<String> path, String dstip)
authorizeStitchRequest	RoutingServer.java	/^  public static boolean authorizeStitchRequest(String customer_keyhash,String customerName,String ReservID,String server_keyhash,String slicename, String nodename){$/;"	m	class:RoutingServer	signature:(String customer_keyhash,String customerName,String ReservID,String server_keyhash,String slicename, String nodename)
computeIP	RoutingServer.java	/^  private static void computeIP(String prefix){$/;"	m	class:RoutingServer	file:	signature:(String prefix)
configOSPFForNewInterface	RoutingClient.java	/^  private static void configOSPFForNewInterface(ComputeNode c, String newip){$/;"	m	class:RoutingClient	file:	signature:(ComputeNode c, String newip)
configRouting	RoutingServer.java	/^  public static void configRouting(Slice s,String ovscontroller, String httpcontroller){$/;"	m	class:RoutingServer	signature:(Slice s,String ovscontroller, String httpcontroller)
controllerUrl	RoutingClient.java	/^	private static String controllerUrl;$/;"	f	class:RoutingClient	file:
controllerUrl	RoutingServer.java	/^	private static String controllerUrl;$/;"	f	class:RoutingServer	file:
copyFile2Slice	RoutingServer.java	/^  private static void copyFile2Slice(Slice s, String lfile, String rfile,String privkey){$/;"	m	class:RoutingServer	file:	signature:(Slice s, String lfile, String rfile,String privkey)
curip	RoutingClient.java	/^  private static int curip=128;$/;"	f	class:RoutingClient	file:
curip	RoutingServer.java	/^  private static int curip=128;$/;"	f	class:RoutingServer	file:
customer_keyhash	RoutingClient.java	/^  private static String customer_keyhash;$/;"	f	class:RoutingClient	file:
domains	RoutingClient.java	/^	public static final ArrayList<String> domains;$/;"	f	class:RoutingClient
domains	RoutingServer.java	/^	public static final ArrayList<String> domains;$/;"	f	class:RoutingServer
edgeip	Neighbor.java	/^  public String edgeip;$/;"	f	class:Neighbor
edgerouter	Neighbor.java	/^  public String edgerouter;$/;"	f	class:Neighbor
gateway	Neighbor.java	/^  public String gateway;$/;"	f	class:Neighbor
getAllElments_HashList	RoutingServer.java	/^  private ArrayList<String[]> getAllElments_HashList(HashMap<String,ArrayList<String>>  map){$/;"	m	class:RoutingServer	file:	signature:(HashMap<String,ArrayList<String>> map)
getNetworkInfo	RoutingClient.java	/^  public static void getNetworkInfo(Slice s){$/;"	m	class:RoutingClient	signature:(Slice s)
getNetworkInfo	RoutingServer.java	/^  public static void getNetworkInfo(Slice s){$/;"	m	class:RoutingServer	signature:(Slice s)
getOVSScript	RoutingClient.java	/^  private static String getOVSScript(String cip){$/;"	m	class:RoutingClient	file:	signature:(String cip)
getQuaggaScript	RoutingClient.java	/^  private static  String getQuaggaScript(){$/;"	m	class:RoutingClient	file:	signature:()
getSlice	RoutingClient.java	/^	public static Slice getSlice(ISliceTransportAPIv1 sliceProxy, String sliceName){$/;"	m	class:RoutingClient	signature:(ISliceTransportAPIv1 sliceProxy, String sliceName)
getSlice	RoutingServer.java	/^	public static Slice getSlice(ISliceTransportAPIv1 sliceProxy, String sliceName){$/;"	m	class:RoutingServer	signature:(ISliceTransportAPIv1 sliceProxy, String sliceName)
getSliceProxy	RoutingClient.java	/^	public static ISliceTransportAPIv1 getSliceProxy(String pem, String key, String controllerUrl){$/;"	m	class:RoutingClient	signature:(String pem, String key, String controllerUrl)
getSliceProxy	RoutingServer.java	/^	public static ISliceTransportAPIv1 getSliceProxy(String pem, String key, String controllerUrl){$/;"	m	class:RoutingServer	signature:(String pem, String key, String controllerUrl)
id	Neighbor.java	/^  public String id;$/;"	f	class:Neighbor
keyLocation	RoutingClient.java	/^	private static String keyLocation;$/;"	f	class:RoutingClient	file:
keyLocation	RoutingServer.java	/^	private static String keyLocation;$/;"	f	class:RoutingServer	file:
links	RoutingClient.java	/^  private static HashMap<String, Link> links=new HashMap<String, Link>();$/;"	f	class:RoutingClient	file:
links	RoutingServer.java	/^  private static HashMap<String, Link> links=new HashMap<String, Link>();$/;"	f	class:RoutingServer	file:
main	RoutingClient.java	/^	public static void main(String [] args){$/;"	m	class:RoutingClient	signature:(String [] args)
main	RoutingServer.java	/^	public static void main(String [] args){$/;"	m	class:RoutingServer	signature:(String [] args)
mask	RoutingServer.java	/^  private static String mask="\/24";$/;"	f	class:RoutingServer	file:
neighborASes	RoutingClient.java	/^  private static ArrayList<Neighbor> neighborASes=new ArrayList<Neighbor>();$/;"	f	class:RoutingClient	file:
neighborASes	RoutingServer.java	/^  private static ArrayList<Neighbor> neighborASes=new ArrayList<Neighbor>();$/;"	f	class:RoutingServer	file:
pemLocation	RoutingClient.java	/^	private static String pemLocation;$/;"	f	class:RoutingClient	file:
pemLocation	RoutingServer.java	/^	private static String pemLocation;$/;"	f	class:RoutingServer	file:
postSafeStitchRequest	RoutingClient.java	/^  private static boolean postSafeStitchRequest(String customer_keyhash,String customerName,String ReservID,String slicename, String nodename){$/;"	m	class:RoutingClient	file:	signature:(String customer_keyhash,String customerName,String ReservID,String slicename, String nodename)
postSafeStitchRequest	RoutingServer.java	/^  private static boolean postSafeStitchRequest(String customer_keyhash,String customerName,String ReservID,String slicename, String nodename){$/;"	m	class:RoutingServer	file:	signature:(String customer_keyhash,String customerName,String ReservID,String slicename, String nodename)
processStitchCmd	RoutingClient.java	/^  private static void processStitchCmd(String[] params){$/;"	m	class:RoutingClient	file:	signature:(String[] params)
processStitchCmd	RoutingServer.java	/^  private static void processStitchCmd(String[] params){$/;"	m	class:RoutingServer	file:	signature:(String[] params)
readNeighbors	RoutingClient.java	/^  private static void readNeighbors(){$/;"	m	class:RoutingClient	file:	signature:()
readNeighbors	RoutingServer.java	/^  private static void readNeighbors(){$/;"	m	class:RoutingServer	file:	signature:()
routingmanager	RoutingServer.java	/^  private static RoutingManager routingmanager=new RoutingManager();$/;"	f	class:RoutingServer	file:
runCmdSlice	RoutingServer.java	/^  private static void runCmdSlice(Slice s, String cmd, String privkey){$/;"	m	class:RoutingServer	file:	signature:(Slice s, String cmd, String privkey)
safe.sdx	Neighbor.java	/^package safe.sdx;$/;"	p
safe.sdx	RoutingAPI.java	/^package safe.sdx;$/;"	p
safe.sdx	RoutingClient.java	/^package safe.sdx;$/;"	p
safe.sdx	RoutingServer.java	/^package safe.sdx;$/;"	p
safeserver	RoutingClient.java	/^  private static String safeserver;$/;"	f	class:RoutingClient	file:
safeserver	RoutingServer.java	/^	private static String safeserver;$/;"	f	class:RoutingServer	file:
sctx	RoutingClient.java	/^  private static SliceAccessContext<SSHAccessToken> sctx;$/;"	f	class:RoutingClient	file:
sctx	RoutingServer.java	/^  private static SliceAccessContext<SSHAccessToken> sctx;$/;"	f	class:RoutingServer	file:
server_keyhash	RoutingServer.java	/^  private static String server_keyhash;$/;"	f	class:RoutingServer	file:
sleep	RoutingClient.java	/^	public static void sleep(int sec){$/;"	m	class:RoutingClient	signature:(int sec)
sleep	RoutingServer.java	/^	public static void sleep(int sec){$/;"	m	class:RoutingServer	signature:(int sec)
sliceName	Neighbor.java	/^  public String sliceName;$/;"	f	class:Neighbor
sliceName	RoutingClient.java	/^	private static String sliceName;$/;"	f	class:RoutingClient	file:
sliceName	RoutingServer.java	/^	private static String sliceName;$/;"	f	class:RoutingServer	file:
sliceProxy	RoutingClient.java	/^  private static ISliceTransportAPIv1 sliceProxy;$/;"	f	class:RoutingClient	file:
sliceProxy	RoutingServer.java	/^  private static ISliceTransportAPIv1 sliceProxy;$/;"	f	class:RoutingServer	file:
sshkey	RoutingClient.java	/^  private static String sshkey;$/;"	f	class:RoutingClient	file:
sshkeyLocation	RoutingServer.java	/^  private static String sshkeyLocation;$/;"	f	class:RoutingServer	file:
stitch	RoutingServer.java	/^	public static boolean stitch(String customerName, String ReservID,String carrierName, String netID,String secret,String newip){	$/;"	m	class:RoutingServer	signature:(String customerName, String ReservID,String carrierName, String netID,String secret,String newip)
stitchRequest	RoutingAPI.java	/^  String stitchRequest(String slicename, String nodename, String customer_keyhash,String customerName, String ResrvID,String secret) throws RemoteException;$/;"	m	interface:RoutingAPI	signature:(String slicename, String nodename, String customer_keyhash,String customerName, String ResrvID,String secret)
stitchRequest	RoutingClient.java	/^  public String stitchRequest(String sname, String nanem, String ck, String cn, String rid, String s){$/;"	m	class:RoutingClient	signature:(String sname, String nanem, String ck, String cn, String rid, String s)
stitchRequest	RoutingServer.java	/^  public String stitchRequest(String carrierName,String nodeName, String customer_keyhash,String customerName, String ResrvID,String secret) {$/;"	m	class:RoutingServer	signature:(String carrierName,String nodeName, String customer_keyhash,String customerName, String ResrvID,String secret)
toString	Neighbor.java	/^  public String toString(){$/;"	m	class:Neighbor	signature:()
undoStitch	RoutingClient.java	/^	public static void undoStitch(String carrierName, String customerName, String netName, String nodeName){	$/;"	m	class:RoutingClient	signature:(String carrierName, String customerName, String netName, String nodeName)
undoStitch	RoutingServer.java	/^	public static void undoStitch(String carrierName, String customerName, String netName, String nodeName){	$/;"	m	class:RoutingServer	signature:(String carrierName, String customerName, String netName, String nodeName)
waitTillActive	RoutingClient.java	/^  public static void waitTillActive(Slice s){$/;"	m	class:RoutingClient	signature:(Slice s)
