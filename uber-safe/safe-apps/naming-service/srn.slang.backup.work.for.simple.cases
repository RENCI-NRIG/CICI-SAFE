defenv Selfie() :-
  spec('Load the principal keypair'),
  principal($1).
  (* principal('/home/qiang/Desktop/safe-new-version-benchmark/safe/safe-apps/naming-service/keys/na1.pem'). *)

defcon rules2InferChildAuthority(?NameAuthority, ?SubdomainName) :-
  spec("Rules to infer a child authority"),
  {
    ?ChildAuthority :- $NameAuthority: NA($SubdomainName, ?ChildAuthority).
    ?ChildAuthority?
    name("$NameAuthority/$SubdomainName").
  }.

defetch fetchCert(?LinkRef) :- [?LinkRef].

resolve(?NameAuthority, ?Name, ?DirectNameAuthority) :- 
  singleComponent(?Name), 
  unify(?DirectNameAuthority, ?NameAuthority).


resolve(?NameAuthority, ?Name, ?DirectNameAuthority) :-
  splittable(?Name),
  ?FirstComponent := splitHead(?Name), 
  ?RestName := splitTail(?Name), 
  ?NARef := fetchCert(?NameAuthority), 
  ?InferRulesRef := rules2InferChildAuthority(?NameAuthority, ?FirstComponent), 
  ?ChildNameAuthoritySet := inferSet(?InferRulesRef, ?NARef), 
  ?ChildNameAuthority := reapId(?ChildNameAuthoritySet), 
  resolve(?ChildNameAuthority, ?RestName, ?DirectNameAuthority). 


defcon SRNEvaluation(?RootAuthority) :- 
  spec("Rules for SRN certified evaluation, in a bottom-up fashion"),
  {
    SRN(?Name, ?Scid) :- singleComponent(?Name), $RootAuthority: O(?Name, ?Scid).
    SRN(?Name, ?Scid) :- splittable(?Name), ?LastComponent := splitLast(?Name), ?Rest := splitTop(?Name), certifiedBinding(?Rest, ?NameAuthority), ?NameAuthority: O(?LastComponent, ?Scid).
    certifiedBinding(?Domainname, ?NameAuthority) :- singleComponent(?Domainname), $RootAuthority: NA(?Domainname, ?NameAuthority).
    certifiedBinding(?Domainname, ?NameAuthority) :- splittable(?Domainname), ?LastComponent := splitLast(?Domainname), ?Rest := splitTop(?Domainname), certifiedBinding(?Rest, ?ParentAuthority), ?ParentAuthority: NA(?LastComponent, ?NameAuthority). 
  }.


defguard queryName(?RootAuthority, ?Name) :-
  spec("Query a name"),
  ?DNameAuthority := applyInferenceBinding(resolve(?RootAuthority, ?Name, ?DirectNameAuthority), '3'),
  ?NameAuthorityRef := fetchCert(?DNameAuthority),
  ?EvalRulesRef := SRNEvaluation(?RootAuthority),
  {
    import($NameAuthorityRef).
    import($EvalRulesRef).
    SRN($Name, ?Scid)?
  }.
