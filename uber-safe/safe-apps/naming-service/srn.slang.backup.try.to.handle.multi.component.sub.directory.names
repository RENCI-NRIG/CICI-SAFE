defenv Selfie() :-
  spec('Load the principal keypair'),
  principal($1).
  (* principal('/home/qiang/Desktop/safe-new-version-benchmark/safe/safe-apps/naming-service/keys/na1.pem'). *)

defcon checkAuthorityDelegation(?Authority, ?SubDir) :-
  spec("Rules to infer the authority for a sub directory"),
  {
    ?SubAuthority :- $Authority: NA($SubDir, ?SubAuthority).
    ?SubAuthority?
    name("$Authority/$SubDir").
  }.

defcon checkDirectObject(?Authority, ?Name) :- 
  spec("Rules to check if a name represents a direct object"),
  {
    ?Scid :- $Authority: O($Name, ?Scid).
    ?Scid?
    name("$Authority/$Name").
  }. 

defetch fetchCert(?LinkRef) :- [?LinkRef].

resolve(?NA, ?Dir, ?Name, ?DirectNA, ?DirectDir) :-
  ?NARecToken := computeIdFromName(?NA, ?Dir),
  ?NARecRef := fetchCert(?NARecToken),
  ?RulesRef := checkDirectObject(?NA, ?Name), 
  ?ObjectIdSet := inferSet(?RulesRef, ?NARecRef), 
  unify(?DirectNA, ?NA),
  unify(?DirectDir, ?Dir). 


resolve(?NA, ?Dir, ?Name, ?DirectNA, ?DirectDir) :-
  splittable(?Name),
  ?FirstComponent := splitHead(?Name), 
  ?RestName := splitTail(?Name), 
  ?RulesRef := checkAuthorityDelegation(?NA, ?FirstComponent), 
  ?NARecToken := computeIdFromName(?NameAuthority, ?Dir),
  ?NARecRef := fetchCert(?NARecToken), 
  ?SubAuthoritySet := inferSet(?RulesRef, ?NARecRef), 
  ?SubAuthority := reapId(?SubAuthoritySet), 
  ?Subdir := appendName(?Dir, FirstComponent),
  resolve(?SubAuthority, ?Subdir, ?RestName, ?DirectNA, ?DirectDir). 


defcon SRNEvaluation(?RootAuthority) :- 
  spec("Rules for SRN certified evaluation, in a bottom-up fashion"),
  {
    SRN(?Name, ?DirectNA, ?DirectDir, ?Scid) :- ?ObjectName := dropDirPrefix(?Name, ?DirectDir), $DirectNA: O(?ObjectName, ?Scid), certifiedBinding(?DirectDir, ?DirectNA).
    certifiedBinding(?Dir, ?NA) :- singleComponent(?Dir), $RootAuthority: NA(?Dir, ?NA).
    certifiedBinding(?Dir, ?NA) :- splittable(?Dir), ?LastComponent := splitLast(?Dir), ?Rest := splitTop(?Dir), certifiedBinding(?Rest, ?ParentNA), ?ParentNA: NA(?LastComponent, ?NA). 
  }.


defguard queryName(?RootAuthority, ?RootDir, ?Name, ?DirectNA, ?DirectDir) :-
  spec("Query a name"),
  resolve(?RootAuthority, ?RootDir, ?Name, ?DirectNA, ?DirectDir),
  ?DNARecToken := computeIdFromName(?DirectNA, ?DirectDir),
  ?DNARecRef := fetchCert(?DNARecToken),
  ?EvalRulesRef := SRNEvaluation(?RootAuthority),
  {
    import($DNARecRef).
    import($EvalRulesRef).
    SRN($Name, $DirectNA, $DirectDir, ?Scid)?
  }.
